
projekt1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bb0  0800013c  0800013c  0000813c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08000cec  08000cec  00008cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08000cf0  08000cf0  00008cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000024  20000000  08000cf4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000034  20000024  08000d18  00010024  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  20000058  08000d18  00010058  2**0
                  ALLOC
  7 .ARM.attributes 00000029  00000000  00000000  00010024  2**0
                  CONTENTS, READONLY
  8 .debug_info   000037ac  00000000  00000000  0001004d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000dba  00000000  00000000  000137f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000460  00000000  00000000  000145b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003c8  00000000  00000000  00014a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001aca  00000000  00000000  00014de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001a16  00000000  00000000  000168aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000082  00000000  00000000  000182c0  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00000c84  00000000  00000000  00018344  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000024 	.word	0x20000024
 8000158:	00000000 	.word	0x00000000
 800015c:	08000cd4 	.word	0x08000cd4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	08000cd4 	.word	0x08000cd4
 8000178:	20000028 	.word	0x20000028

0800017c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000180:	4b14      	ldr	r3, [pc, #80]	; (80001d4 <SystemInit+0x58>)
 8000182:	4a14      	ldr	r2, [pc, #80]	; (80001d4 <SystemInit+0x58>)
 8000184:	6812      	ldr	r2, [r2, #0]
 8000186:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800018a:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800018c:	4a11      	ldr	r2, [pc, #68]	; (80001d4 <SystemInit+0x58>)
 800018e:	4b11      	ldr	r3, [pc, #68]	; (80001d4 <SystemInit+0x58>)
 8000190:	6899      	ldr	r1, [r3, #8]
 8000192:	4b11      	ldr	r3, [pc, #68]	; (80001d8 <SystemInit+0x5c>)
 8000194:	400b      	ands	r3, r1
 8000196:	6093      	str	r3, [r2, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000198:	4a0e      	ldr	r2, [pc, #56]	; (80001d4 <SystemInit+0x58>)
 800019a:	4b0e      	ldr	r3, [pc, #56]	; (80001d4 <SystemInit+0x58>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80001a2:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80001a6:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80001a8:	4b0a      	ldr	r3, [pc, #40]	; (80001d4 <SystemInit+0x58>)
 80001aa:	4a0a      	ldr	r2, [pc, #40]	; (80001d4 <SystemInit+0x58>)
 80001ac:	6812      	ldr	r2, [r2, #0]
 80001ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80001b2:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80001b4:	4b07      	ldr	r3, [pc, #28]	; (80001d4 <SystemInit+0x58>)
 80001b6:	4a07      	ldr	r2, [pc, #28]	; (80001d4 <SystemInit+0x58>)
 80001b8:	6892      	ldr	r2, [r2, #8]
 80001ba:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 80001be:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80001c0:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <SystemInit+0x58>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	60da      	str	r2, [r3, #12]
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 80001c6:	f000 f80b 	bl	80001e0 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <SystemInit+0x60>)
 80001cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80001d0:	609a      	str	r2, [r3, #8]
#endif
}
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	40023800 	.word	0x40023800
 80001d8:	88ffc00c 	.word	0x88ffc00c
 80001dc:	e000ed00 	.word	0xe000ed00

080001e0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSIStatus = 0, HSEStatus = 0;
 80001e6:	2300      	movs	r3, #0
 80001e8:	60fb      	str	r3, [r7, #12]
 80001ea:	2300      	movs	r3, #0
 80001ec:	60bb      	str	r3, [r7, #8]
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  
#ifdef PLL_SOURCE_HSI  

    /* Enable HSI */
  RCC->CR |= ((uint32_t)RCC_CR_HSION);
 80001f2:	4b40      	ldr	r3, [pc, #256]	; (80002f4 <SetSysClock+0x114>)
 80001f4:	4a3f      	ldr	r2, [pc, #252]	; (80002f4 <SetSysClock+0x114>)
 80001f6:	6812      	ldr	r2, [r2, #0]
 80001f8:	f042 0201 	orr.w	r2, r2, #1
 80001fc:	601a      	str	r2, [r3, #0]
   
   /* Wait till HSI is ready and if Time out is reached exit */
  do
  {
    HSIStatus = RCC->CR & RCC_CR_HSIRDY;
 80001fe:	4b3d      	ldr	r3, [pc, #244]	; (80002f4 <SetSysClock+0x114>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f003 0302 	and.w	r3, r3, #2
 8000206:	60bb      	str	r3, [r7, #8]
  } while((HSIStatus == 0) && (StartUpCounter != HSI_STARTUP_TIMEOUT));
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d103      	bne.n	8000216 <SetSysClock+0x36>
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000214:	d1f3      	bne.n	80001fe <SetSysClock+0x1e>

  if ((RCC->CR & RCC_CR_HSIRDY) != RESET)
 8000216:	4b37      	ldr	r3, [pc, #220]	; (80002f4 <SetSysClock+0x114>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f003 0302 	and.w	r3, r3, #2
 800021e:	2b00      	cmp	r3, #0
 8000220:	d002      	beq.n	8000228 <SetSysClock+0x48>
  {
    HSIStatus = (uint32_t)0x01;
 8000222:	2301      	movs	r3, #1
 8000224:	60bb      	str	r3, [r7, #8]
 8000226:	e001      	b.n	800022c <SetSysClock+0x4c>
  }
  else
  {
    HSIStatus = (uint32_t)0x00;
 8000228:	2300      	movs	r3, #0
 800022a:	60bb      	str	r3, [r7, #8]
  }
    
  if (HSIStatus == (uint32_t)0x01)
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	2b01      	cmp	r3, #1
 8000230:	d10b      	bne.n	800024a <SetSysClock+0x6a>
  {
    /*  PLL configuration: PLLCLK = (HSI * 6)/3 = 32 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |RCC_CFGR_PLLDIV));
 8000232:	4b30      	ldr	r3, [pc, #192]	; (80002f4 <SetSysClock+0x114>)
 8000234:	4a2f      	ldr	r2, [pc, #188]	; (80002f4 <SetSysClock+0x114>)
 8000236:	6892      	ldr	r2, [r2, #8]
 8000238:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 800023c:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI | RCC_CFGR_PLLMUL4 | RCC_CFGR_PLLDIV2 );
 800023e:	4b2d      	ldr	r3, [pc, #180]	; (80002f4 <SetSysClock+0x114>)
 8000240:	4a2c      	ldr	r2, [pc, #176]	; (80002f4 <SetSysClock+0x114>)
 8000242:	6892      	ldr	r2, [r2, #8]
 8000244:	f442 0288 	orr.w	r2, r2, #4456448	; 0x440000
 8000248:	609a      	str	r2, [r3, #8]

  
#endif /*PLL_SOURCE_HSI*/
  
    /* Enable 64-bit access */
  FLASH->ACR |= FLASH_ACR_ACC64;
 800024a:	4b2b      	ldr	r3, [pc, #172]	; (80002f8 <SetSysClock+0x118>)
 800024c:	4a2a      	ldr	r2, [pc, #168]	; (80002f8 <SetSysClock+0x118>)
 800024e:	6812      	ldr	r2, [r2, #0]
 8000250:	f042 0204 	orr.w	r2, r2, #4
 8000254:	601a      	str	r2, [r3, #0]
  
  /* Enable Prefetch Buffer */
  FLASH->ACR |= FLASH_ACR_PRFTEN;
 8000256:	4b28      	ldr	r3, [pc, #160]	; (80002f8 <SetSysClock+0x118>)
 8000258:	4a27      	ldr	r2, [pc, #156]	; (80002f8 <SetSysClock+0x118>)
 800025a:	6812      	ldr	r2, [r2, #0]
 800025c:	f042 0202 	orr.w	r2, r2, #2
 8000260:	601a      	str	r2, [r3, #0]
  
  /* Flash 1 wait state */
  FLASH->ACR |= FLASH_ACR_LATENCY;
 8000262:	4b25      	ldr	r3, [pc, #148]	; (80002f8 <SetSysClock+0x118>)
 8000264:	4a24      	ldr	r2, [pc, #144]	; (80002f8 <SetSysClock+0x118>)
 8000266:	6812      	ldr	r2, [r2, #0]
 8000268:	f042 0201 	orr.w	r2, r2, #1
 800026c:	601a      	str	r2, [r3, #0]
  
  /* Power enable */
  RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800026e:	4b21      	ldr	r3, [pc, #132]	; (80002f4 <SetSysClock+0x114>)
 8000270:	4a20      	ldr	r2, [pc, #128]	; (80002f4 <SetSysClock+0x114>)
 8000272:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000274:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000278:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Select the Voltage Range 1 (1.8 V) */
  PWR->CR = PWR_CR_VOS_0;
 800027a:	4b20      	ldr	r3, [pc, #128]	; (80002fc <SetSysClock+0x11c>)
 800027c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000280:	601a      	str	r2, [r3, #0]
  
  /* Wait Until the Voltage Regulator is ready */
  while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8000282:	bf00      	nop
 8000284:	4b1d      	ldr	r3, [pc, #116]	; (80002fc <SetSysClock+0x11c>)
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	f003 0310 	and.w	r3, r3, #16
 800028c:	2b00      	cmp	r3, #0
 800028e:	d1f9      	bne.n	8000284 <SetSysClock+0xa4>
  {
  }
  
  /* HCLK = SYSCLK /1*/
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000290:	4b18      	ldr	r3, [pc, #96]	; (80002f4 <SetSysClock+0x114>)
 8000292:	4a18      	ldr	r2, [pc, #96]	; (80002f4 <SetSysClock+0x114>)
 8000294:	6892      	ldr	r2, [r2, #8]
 8000296:	609a      	str	r2, [r3, #8]
  
  /* PCLK2 = HCLK /1*/
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000298:	4b16      	ldr	r3, [pc, #88]	; (80002f4 <SetSysClock+0x114>)
 800029a:	4a16      	ldr	r2, [pc, #88]	; (80002f4 <SetSysClock+0x114>)
 800029c:	6892      	ldr	r2, [r2, #8]
 800029e:	609a      	str	r2, [r3, #8]
  
  /* PCLK1 = HCLK /1*/
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 80002a0:	4b14      	ldr	r3, [pc, #80]	; (80002f4 <SetSysClock+0x114>)
 80002a2:	4a14      	ldr	r2, [pc, #80]	; (80002f4 <SetSysClock+0x114>)
 80002a4:	6892      	ldr	r2, [r2, #8]
 80002a6:	609a      	str	r2, [r3, #8]
  
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 80002a8:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <SetSysClock+0x114>)
 80002aa:	4a12      	ldr	r2, [pc, #72]	; (80002f4 <SetSysClock+0x114>)
 80002ac:	6812      	ldr	r2, [r2, #0]
 80002ae:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80002b2:	601a      	str	r2, [r3, #0]
  
  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80002b4:	bf00      	nop
 80002b6:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <SetSysClock+0x114>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d0f9      	beq.n	80002b6 <SetSysClock+0xd6>
  {
  }
  
  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002c2:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <SetSysClock+0x114>)
 80002c4:	4a0b      	ldr	r2, [pc, #44]	; (80002f4 <SetSysClock+0x114>)
 80002c6:	6892      	ldr	r2, [r2, #8]
 80002c8:	f022 0203 	bic.w	r2, r2, #3
 80002cc:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80002ce:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <SetSysClock+0x114>)
 80002d0:	4a08      	ldr	r2, [pc, #32]	; (80002f4 <SetSysClock+0x114>)
 80002d2:	6892      	ldr	r2, [r2, #8]
 80002d4:	f042 0203 	orr.w	r2, r2, #3
 80002d8:	609a      	str	r2, [r3, #8]
  
  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80002da:	bf00      	nop
 80002dc:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <SetSysClock+0x114>)
 80002de:	689b      	ldr	r3, [r3, #8]
 80002e0:	f003 030c 	and.w	r3, r3, #12
 80002e4:	2b0c      	cmp	r3, #12
 80002e6:	d1f9      	bne.n	80002dc <SetSysClock+0xfc>
  {
  }
  
}
 80002e8:	3714      	adds	r7, #20
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	40023800 	.word	0x40023800
 80002f8:	40023c00 	.word	0x40023c00
 80002fc:	40007000 	.word	0x40007000

08000300 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
}
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr

0800030c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000310:	e7fe      	b.n	8000310 <HardFault_Handler+0x4>
 8000312:	bf00      	nop

08000314 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000318:	e7fe      	b.n	8000318 <MemManage_Handler+0x4>
 800031a:	bf00      	nop

0800031c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000320:	e7fe      	b.n	8000320 <BusFault_Handler+0x4>
 8000322:	bf00      	nop

08000324 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000328:	e7fe      	b.n	8000328 <UsageFault_Handler+0x4>
 800032a:	bf00      	nop

0800032c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
}
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
}
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
}
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr

08000350 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  TimingDelay_Decrement();
 8000354:	f000 f8f4 	bl	8000540 <TimingDelay_Decrement>
}
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop

0800035c <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI15_10_IRQHandler Handler.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  if ((EXTI_GetITStatus(USER_BUTTON_EXTI_LINE) != RESET))
 8000360:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000364:	f000 fc00 	bl	8000b68 <EXTI_GetITStatus>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d011      	beq.n	8000392 <EXTI15_10_IRQHandler+0x36>
  {
    if(BlinkSpeed == 3)
 800036e:	4b09      	ldr	r3, [pc, #36]	; (8000394 <EXTI15_10_IRQHandler+0x38>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	2b03      	cmp	r3, #3
 8000374:	d103      	bne.n	800037e <EXTI15_10_IRQHandler+0x22>
    {
      BlinkSpeed = 0;
 8000376:	4b07      	ldr	r3, [pc, #28]	; (8000394 <EXTI15_10_IRQHandler+0x38>)
 8000378:	2200      	movs	r2, #0
 800037a:	701a      	strb	r2, [r3, #0]
 800037c:	e005      	b.n	800038a <EXTI15_10_IRQHandler+0x2e>
    }
    else
    {
      BlinkSpeed ++;
 800037e:	4b05      	ldr	r3, [pc, #20]	; (8000394 <EXTI15_10_IRQHandler+0x38>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	3301      	adds	r3, #1
 8000384:	b2da      	uxtb	r2, r3
 8000386:	4b03      	ldr	r3, [pc, #12]	; (8000394 <EXTI15_10_IRQHandler+0x38>)
 8000388:	701a      	strb	r2, [r3, #0]
    }
    /* Clear the EXTI line pending bit */
    EXTI_ClearITPendingBit(USER_BUTTON_EXTI_LINE);
 800038a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800038e:	f000 fc0f 	bl	8000bb0 <EXTI_ClearITPendingBit>
  }	
}
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000044 	.word	0x20000044

08000398 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000398:	f8df d03c 	ldr.w	sp, [pc, #60]	; 80003d8 <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800039c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800039e:	f000 b804 	b.w	80003aa <LoopCopyDataInit>

080003a2 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80003a2:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <LoopFillZerobss+0x1a>)
  ldr r3, [r3, r1]
 80003a4:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80003a6:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80003a8:	3104      	adds	r1, #4

080003aa <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80003aa:	480d      	ldr	r0, [pc, #52]	; (80003e0 <LoopFillZerobss+0x1e>)
  ldr r3, =_edata
 80003ac:	4b0d      	ldr	r3, [pc, #52]	; (80003e4 <LoopFillZerobss+0x22>)
  adds r2, r0, r1
 80003ae:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80003b0:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80003b2:	f4ff aff6 	bcc.w	80003a2 <CopyDataInit>
  ldr r2, =_sbss
 80003b6:	4a0c      	ldr	r2, [pc, #48]	; (80003e8 <LoopFillZerobss+0x26>)
  b LoopFillZerobss
 80003b8:	f000 b803 	b.w	80003c2 <LoopFillZerobss>

080003bc <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80003bc:	2300      	movs	r3, #0
  str r3, [r2], #4
 80003be:	f842 3b04 	str.w	r3, [r2], #4

080003c2 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80003c2:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <LoopFillZerobss+0x2a>)
  cmp r2, r3
 80003c4:	429a      	cmp	r2, r3
  bcc FillZerobss
 80003c6:	f4ff aff9 	bcc.w	80003bc <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003ca:	f7ff fed7 	bl	800017c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ce:	f000 fc5b 	bl	8000c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003d2:	f000 f85b 	bl	800048c <main>
  bx lr
 80003d6:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003d8:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 80003dc:	08000cf4 	.word	0x08000cf4
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 80003e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80003e4:	20000024 	.word	0x20000024
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 80003e8:	20000024 	.word	0x20000024
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 80003ec:	20000058 	.word	0x20000058

080003f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f0:	f7ff bffe 	b.w	80003f0 <ADC1_IRQHandler>

080003f4 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	6039      	str	r1, [r7, #0]
 80003fe:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000404:	2b00      	cmp	r3, #0
 8000406:	da0b      	bge.n	8000420 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000408:	490d      	ldr	r1, [pc, #52]	; (8000440 <NVIC_SetPriority+0x4c>)
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	f003 030f 	and.w	r3, r3, #15
 8000410:	3b04      	subs	r3, #4
 8000412:	683a      	ldr	r2, [r7, #0]
 8000414:	b2d2      	uxtb	r2, r2
 8000416:	0112      	lsls	r2, r2, #4
 8000418:	b2d2      	uxtb	r2, r2
 800041a:	440b      	add	r3, r1
 800041c:	761a      	strb	r2, [r3, #24]
 800041e:	e009      	b.n	8000434 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000420:	4908      	ldr	r1, [pc, #32]	; (8000444 <NVIC_SetPriority+0x50>)
 8000422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000426:	683a      	ldr	r2, [r7, #0]
 8000428:	b2d2      	uxtb	r2, r2
 800042a:	0112      	lsls	r2, r2, #4
 800042c:	b2d2      	uxtb	r2, r2
 800042e:	440b      	add	r3, r1
 8000430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	e000ed00 	.word	0xe000ed00
 8000444:	e000e100 	.word	0xe000e100

08000448 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000456:	d301      	bcc.n	800045c <SysTick_Config+0x14>
 8000458:	2301      	movs	r3, #1
 800045a:	e011      	b.n	8000480 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800045c:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <SysTick_Config+0x40>)
 800045e:	687a      	ldr	r2, [r7, #4]
 8000460:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000464:	3a01      	subs	r2, #1
 8000466:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8000468:	f04f 30ff 	mov.w	r0, #4294967295
 800046c:	210f      	movs	r1, #15
 800046e:	f7ff ffc1 	bl	80003f4 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000472:	4b05      	ldr	r3, [pc, #20]	; (8000488 <SysTick_Config+0x40>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000478:	4b03      	ldr	r3, [pc, #12]	; (8000488 <SysTick_Config+0x40>)
 800047a:	2207      	movs	r2, #7
 800047c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800047e:	2300      	movs	r3, #0
}
 8000480:	4618      	mov	r0, r3
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	e000e010 	.word	0xe000e010

0800048c <main>:
  * @brief   Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
       To reconfigure the default setting of SystemInit() function, refer to
       system_stm32l1xx.c file
     */ 
  
  /* SysTick end of count event each 1ms */
  RCC_GetClocksFreq(&RCC_Clocks);
 8000490:	481e      	ldr	r0, [pc, #120]	; (800050c <main+0x80>)
 8000492:	f000 f951 	bl	8000738 <RCC_GetClocksFreq>
  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 8000496:	4b1d      	ldr	r3, [pc, #116]	; (800050c <main+0x80>)
 8000498:	685a      	ldr	r2, [r3, #4]
 800049a:	4b1d      	ldr	r3, [pc, #116]	; (8000510 <main+0x84>)
 800049c:	fba3 1302 	umull	r1, r3, r3, r2
 80004a0:	099b      	lsrs	r3, r3, #6
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff ffd0 	bl	8000448 <SysTick_Config>
  
  /* Initialize LED2 */
  STM_EVAL_LEDInit(LED2);
 80004a8:	2000      	movs	r0, #0
 80004aa:	f000 f85b 	bl	8000564 <STM_EVAL_LEDInit>
  
  /* Initialize User_Button on STM32NUCLEO */
  STM_EVAL_PBInit(BUTTON_USER, BUTTON_MODE_EXTI);   
 80004ae:	2000      	movs	r0, #0
 80004b0:	2101      	movs	r1, #1
 80004b2:	f000 f8b9 	bl	8000628 <STM_EVAL_PBInit>
  
  /* Initiate Blink Speed variable */ 
  BlinkSpeed = 0;
 80004b6:	4b17      	ldr	r3, [pc, #92]	; (8000514 <main+0x88>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  while (1)
  {
    /* Test on blink speed */
    if(BlinkSpeed == 0)
 80004bc:	4b15      	ldr	r3, [pc, #84]	; (8000514 <main+0x88>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d106      	bne.n	80004d2 <main+0x46>
    {
      /*LED2 Toggle each 50ms*/
      STM_EVAL_LEDToggle(LED2);
 80004c4:	2000      	movs	r0, #0
 80004c6:	f000 f895 	bl	80005f4 <STM_EVAL_LEDToggle>
      Delay(50);      
 80004ca:	2032      	movs	r0, #50	; 0x32
 80004cc:	f000 f824 	bl	8000518 <Delay>
 80004d0:	e01a      	b.n	8000508 <main+0x7c>
    }      
    else if(BlinkSpeed == 1)
 80004d2:	4b10      	ldr	r3, [pc, #64]	; (8000514 <main+0x88>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d106      	bne.n	80004e8 <main+0x5c>
    {
      STM_EVAL_LEDToggle(LED2);
 80004da:	2000      	movs	r0, #0
 80004dc:	f000 f88a 	bl	80005f4 <STM_EVAL_LEDToggle>
      /*LED2 Toggle each 200ms */
      Delay(200); 
 80004e0:	20c8      	movs	r0, #200	; 0xc8
 80004e2:	f000 f819 	bl	8000518 <Delay>
 80004e6:	e00f      	b.n	8000508 <main+0x7c>
    }
    else if(BlinkSpeed == 2)
 80004e8:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <main+0x88>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b02      	cmp	r3, #2
 80004ee:	d103      	bne.n	80004f8 <main+0x6c>
    {
    	STM_EVAL_LEDOff(LED2);
 80004f0:	2000      	movs	r0, #0
 80004f2:	f000 f86d 	bl	80005d0 <STM_EVAL_LEDOff>
 80004f6:	e007      	b.n	8000508 <main+0x7c>
    }
    else if(BlinkSpeed == 3)
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <main+0x88>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b03      	cmp	r3, #3
 80004fe:	d103      	bne.n	8000508 <main+0x7c>
    {
    	STM_EVAL_LEDOn(LED2);
 8000500:	2000      	movs	r0, #0
 8000502:	f000 f853 	bl	80005ac <STM_EVAL_LEDOn>
    }
  }
 8000506:	e7d9      	b.n	80004bc <main+0x30>
 8000508:	e7d8      	b.n	80004bc <main+0x30>
 800050a:	bf00      	nop
 800050c:	20000048 	.word	0x20000048
 8000510:	10624dd3 	.word	0x10624dd3
 8000514:	20000044 	.word	0x20000044

08000518 <Delay>:
* @brief  Inserts a delay time.
* @param  nTime: specifies the delay time length, in 1 ms.
* @retval None
*/
void Delay(__IO uint32_t nTime)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  TimingDelay = nTime;
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	4b06      	ldr	r3, [pc, #24]	; (800053c <Delay+0x24>)
 8000524:	601a      	str	r2, [r3, #0]
  
  while(TimingDelay != 0);
 8000526:	bf00      	nop
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <Delay+0x24>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d1fb      	bne.n	8000528 <Delay+0x10>
}
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20000040 	.word	0x20000040

08000540 <TimingDelay_Decrement>:
* @brief  Decrements the TimingDelay variable.
* @param  None
* @retval None
*/
void TimingDelay_Decrement(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  if (TimingDelay != 0x00)
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <TimingDelay_Decrement+0x20>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d004      	beq.n	8000556 <TimingDelay_Decrement+0x16>
  { 
    TimingDelay--;
 800054c:	4b04      	ldr	r3, [pc, #16]	; (8000560 <TimingDelay_Decrement+0x20>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	1e5a      	subs	r2, r3, #1
 8000552:	4b03      	ldr	r3, [pc, #12]	; (8000560 <TimingDelay_Decrement+0x20>)
 8000554:	601a      	str	r2, [r3, #0]
  }
}
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000040 	.word	0x20000040

08000564 <STM_EVAL_LEDInit>:
  * @param  Led: Specifies the Led to be configured. 
  *         This parameter must be: LED2
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO Clock */
  RCC_AHBPeriphClockCmd(GPIO_CLK[Led], ENABLE);
 800056e:	2301      	movs	r3, #1
 8000570:	4618      	mov	r0, r3
 8000572:	2101      	movs	r1, #1
 8000574:	f000 f9ba 	bl	80008ec <RCC_AHBPeriphClockCmd>
  
  /* Configure the GPIO pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8000578:	2320      	movs	r3, #32
 800057a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800057c:	2301      	movs	r3, #1
 800057e:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000580:	2300      	movs	r3, #0
 8000582:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000584:	2301      	movs	r3, #1
 8000586:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8000588:	2303      	movs	r3, #3
 800058a:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);  
 800058c:	79fa      	ldrb	r2, [r7, #7]
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <STM_EVAL_LEDInit+0x44>)
 8000590:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000594:	f107 0308 	add.w	r3, r7, #8
 8000598:	4610      	mov	r0, r2
 800059a:	4619      	mov	r1, r3
 800059c:	f000 f9e2 	bl	8000964 <GPIO_Init>
}
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000000 	.word	0x20000000

080005ac <STM_EVAL_LEDOn>:
  * @param  Led: Specifies the Led to be set on. 
  *         This parameter must be: LED2
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{   
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led]; 
 80005b6:	79fa      	ldrb	r2, [r7, #7]
 80005b8:	4b04      	ldr	r3, [pc, #16]	; (80005cc <STM_EVAL_LEDOn+0x20>)
 80005ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005be:	2220      	movs	r2, #32
 80005c0:	831a      	strh	r2, [r3, #24]
}
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	20000000 	.word	0x20000000

080005d0 <STM_EVAL_LEDOff>:
  * @param  Led: Specifies the Led to be set off. 
  *         This parameter must be: LED2
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led]; 
 80005da:	79fa      	ldrb	r2, [r7, #7]
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <STM_EVAL_LEDOff+0x20>)
 80005de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005e2:	2220      	movs	r2, #32
 80005e4:	835a      	strh	r2, [r3, #26]
}
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	20000000 	.word	0x20000000

080005f4 <STM_EVAL_LEDToggle>:
  * @param  Led: Specifies the Led to be toggled. 
  *         This parameter must be: LED2
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 80005fe:	79fa      	ldrb	r2, [r7, #7]
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <STM_EVAL_LEDToggle+0x30>)
 8000602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000606:	79f9      	ldrb	r1, [r7, #7]
 8000608:	4a06      	ldr	r2, [pc, #24]	; (8000624 <STM_EVAL_LEDToggle+0x30>)
 800060a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800060e:	8a92      	ldrh	r2, [r2, #20]
 8000610:	b291      	uxth	r1, r2
 8000612:	2220      	movs	r2, #32
 8000614:	404a      	eors	r2, r1
 8000616:	b292      	uxth	r2, r2
 8000618:	829a      	strh	r2, [r3, #20]
}
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	20000000 	.word	0x20000000

08000628 <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
 800062e:	4602      	mov	r2, r0
 8000630:	460b      	mov	r3, r1
 8000632:	71fa      	strb	r2, [r7, #7]
 8000634:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the GPIO Clock */
  RCC_AHBPeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 8000636:	2304      	movs	r3, #4
 8000638:	4618      	mov	r0, r3
 800063a:	2101      	movs	r1, #1
 800063c:	f000 f956 	bl	80008ec <RCC_AHBPeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8000640:	2001      	movs	r0, #1
 8000642:	2101      	movs	r1, #1
 8000644:	f000 f970 	bl	8000928 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000648:	2300      	movs	r3, #0
 800064a:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8000650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000654:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8000656:	79fa      	ldrb	r2, [r7, #7]
 8000658:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <STM_EVAL_PBInit+0x90>)
 800065a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800065e:	f107 0318 	add.w	r3, r7, #24
 8000662:	4610      	mov	r0, r2
 8000664:	4619      	mov	r1, r3
 8000666:	f000 f97d 	bl	8000964 <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 800066a:	79bb      	ldrb	r3, [r7, #6]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d120      	bne.n	80006b2 <STM_EVAL_PBInit+0x8a>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8000670:	2202      	movs	r2, #2
 8000672:	230d      	movs	r3, #13
 8000674:	4610      	mov	r0, r2
 8000676:	4619      	mov	r1, r3
 8000678:	f000 f820 	bl	80006bc <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 800067c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000680:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000682:	2300      	movs	r3, #0
 8000684:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8000686:	2308      	movs	r3, #8
 8000688:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800068a:	2301      	movs	r3, #1
 800068c:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 800068e:	f107 0310 	add.w	r3, r7, #16
 8000692:	4618      	mov	r0, r3
 8000694:	f000 f9fa 	bl	8000a8c <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8000698:	2328      	movs	r3, #40	; 0x28
 800069a:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 800069c:	230f      	movs	r3, #15
 800069e:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 80006a0:	230f      	movs	r3, #15
 80006a2:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80006a4:	2301      	movs	r3, #1
 80006a6:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fa8d 	bl	8000bcc <NVIC_Init>
  }
}
 80006b2:	3720      	adds	r7, #32
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000004 	.word	0x20000004

080006bc <SYSCFG_EXTILineConfig>:
  * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
  *         This parameter can be EXTI_PinSourcex where x can be (0..15).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80006bc:	b490      	push	{r4, r7}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4602      	mov	r2, r0
 80006c4:	460b      	mov	r3, r1
 80006c6:	71fa      	strb	r2, [r7, #7]
 80006c8:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80006ce:	79bb      	ldrb	r3, [r7, #6]
 80006d0:	f003 0303 	and.w	r3, r3, #3
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	220f      	movs	r2, #15
 80006d8:	fa02 f303 	lsl.w	r3, r2, r3
 80006dc:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <SYSCFG_EXTILineConfig+0x78>)
 80006e0:	79ba      	ldrb	r2, [r7, #6]
 80006e2:	0892      	lsrs	r2, r2, #2
 80006e4:	b2d2      	uxtb	r2, r2
 80006e6:	4913      	ldr	r1, [pc, #76]	; (8000734 <SYSCFG_EXTILineConfig+0x78>)
 80006e8:	79b8      	ldrb	r0, [r7, #6]
 80006ea:	0880      	lsrs	r0, r0, #2
 80006ec:	b2c0      	uxtb	r0, r0
 80006ee:	3002      	adds	r0, #2
 80006f0:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80006f4:	68f9      	ldr	r1, [r7, #12]
 80006f6:	43c9      	mvns	r1, r1
 80006f8:	4001      	ands	r1, r0
 80006fa:	3202      	adds	r2, #2
 80006fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <SYSCFG_EXTILineConfig+0x78>)
 8000702:	79ba      	ldrb	r2, [r7, #6]
 8000704:	0892      	lsrs	r2, r2, #2
 8000706:	b2d2      	uxtb	r2, r2
 8000708:	490a      	ldr	r1, [pc, #40]	; (8000734 <SYSCFG_EXTILineConfig+0x78>)
 800070a:	79b8      	ldrb	r0, [r7, #6]
 800070c:	0880      	lsrs	r0, r0, #2
 800070e:	b2c0      	uxtb	r0, r0
 8000710:	3002      	adds	r0, #2
 8000712:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000716:	79fc      	ldrb	r4, [r7, #7]
 8000718:	79b9      	ldrb	r1, [r7, #6]
 800071a:	f001 0103 	and.w	r1, r1, #3
 800071e:	0089      	lsls	r1, r1, #2
 8000720:	fa04 f101 	lsl.w	r1, r4, r1
 8000724:	4301      	orrs	r1, r0
 8000726:	3202      	adds	r2, #2
 8000728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bc90      	pop	{r4, r7}
 8000732:	4770      	bx	lr
 8000734:	40010000 	.word	0x40010000

08000738 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000738:	b480      	push	{r7}
 800073a:	b089      	sub	sp, #36	; 0x24
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000758:	4b5f      	ldr	r3, [pc, #380]	; (80008d8 <RCC_GetClocksFreq+0x1a0>)
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	f003 030c 	and.w	r3, r3, #12
 8000760:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	2b0c      	cmp	r3, #12
 8000766:	d865      	bhi.n	8000834 <RCC_GetClocksFreq+0xfc>
 8000768:	a201      	add	r2, pc, #4	; (adr r2, 8000770 <RCC_GetClocksFreq+0x38>)
 800076a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800076e:	bf00      	nop
 8000770:	080007a5 	.word	0x080007a5
 8000774:	08000835 	.word	0x08000835
 8000778:	08000835 	.word	0x08000835
 800077c:	08000835 	.word	0x08000835
 8000780:	080007c5 	.word	0x080007c5
 8000784:	08000835 	.word	0x08000835
 8000788:	08000835 	.word	0x08000835
 800078c:	08000835 	.word	0x08000835
 8000790:	080007cd 	.word	0x080007cd
 8000794:	08000835 	.word	0x08000835
 8000798:	08000835 	.word	0x08000835
 800079c:	08000835 	.word	0x08000835
 80007a0:	080007d5 	.word	0x080007d5
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 80007a4:	4b4c      	ldr	r3, [pc, #304]	; (80008d8 <RCC_GetClocksFreq+0x1a0>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80007ac:	0b5b      	lsrs	r3, r3, #13
 80007ae:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	3301      	adds	r3, #1
 80007b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007b8:	fa02 f303 	lsl.w	r3, r2, r3
 80007bc:	461a      	mov	r2, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	601a      	str	r2, [r3, #0]
      break;
 80007c2:	e047      	b.n	8000854 <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a45      	ldr	r2, [pc, #276]	; (80008dc <RCC_GetClocksFreq+0x1a4>)
 80007c8:	601a      	str	r2, [r3, #0]
      break;
 80007ca:	e043      	b.n	8000854 <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a44      	ldr	r2, [pc, #272]	; (80008e0 <RCC_GetClocksFreq+0x1a8>)
 80007d0:	601a      	str	r2, [r3, #0]
      break;
 80007d2:	e03f      	b.n	8000854 <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80007d4:	4b40      	ldr	r3, [pc, #256]	; (80008d8 <RCC_GetClocksFreq+0x1a0>)
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80007dc:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 80007de:	4b3e      	ldr	r3, [pc, #248]	; (80008d8 <RCC_GetClocksFreq+0x1a0>)
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80007e6:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 80007e8:	69bb      	ldr	r3, [r7, #24]
 80007ea:	0c9b      	lsrs	r3, r3, #18
 80007ec:	4a3d      	ldr	r2, [pc, #244]	; (80008e4 <RCC_GetClocksFreq+0x1ac>)
 80007ee:	5cd3      	ldrb	r3, [r2, r3]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	0d9b      	lsrs	r3, r3, #22
 80007f8:	3301      	adds	r3, #1
 80007fa:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80007fc:	4b36      	ldr	r3, [pc, #216]	; (80008d8 <RCC_GetClocksFreq+0x1a0>)
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000804:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d109      	bne.n	8000820 <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	4a33      	ldr	r2, [pc, #204]	; (80008dc <RCC_GetClocksFreq+0x1a4>)
 8000810:	fb02 f203 	mul.w	r2, r2, r3
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	fbb2 f2f3 	udiv	r2, r2, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 800081e:	e019      	b.n	8000854 <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 8000820:	69bb      	ldr	r3, [r7, #24]
 8000822:	4a2f      	ldr	r2, [pc, #188]	; (80008e0 <RCC_GetClocksFreq+0x1a8>)
 8000824:	fb02 f203 	mul.w	r2, r2, r3
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	fbb2 f2f3 	udiv	r2, r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	601a      	str	r2, [r3, #0]
      }
      break;
 8000832:	e00f      	b.n	8000854 <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8000834:	4b28      	ldr	r3, [pc, #160]	; (80008d8 <RCC_GetClocksFreq+0x1a0>)
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800083c:	0b5b      	lsrs	r3, r3, #13
 800083e:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	3301      	adds	r3, #1
 8000844:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000848:	fa02 f303 	lsl.w	r3, r2, r3
 800084c:	461a      	mov	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	601a      	str	r2, [r3, #0]
      break;
 8000852:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000854:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <RCC_GetClocksFreq+0x1a0>)
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800085c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	091b      	lsrs	r3, r3, #4
 8000862:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 8000864:	4a20      	ldr	r2, [pc, #128]	; (80008e8 <RCC_GetClocksFreq+0x1b0>)
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	4413      	add	r3, r2
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	40da      	lsrs	r2, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800087c:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <RCC_GetClocksFreq+0x1a0>)
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000884:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	0a1b      	lsrs	r3, r3, #8
 800088a:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 800088c:	4a16      	ldr	r2, [pc, #88]	; (80008e8 <RCC_GetClocksFreq+0x1b0>)
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	4413      	add	r3, r2
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	b2db      	uxtb	r3, r3
 8000896:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	685a      	ldr	r2, [r3, #4]
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	40da      	lsrs	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <RCC_GetClocksFreq+0x1a0>)
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80008ac:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	0adb      	lsrs	r3, r3, #11
 80008b2:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80008b4:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <RCC_GetClocksFreq+0x1b0>)
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	4413      	add	r3, r2
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	685a      	ldr	r2, [r3, #4]
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	40da      	lsrs	r2, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	60da      	str	r2, [r3, #12]
}
 80008cc:	3724      	adds	r7, #36	; 0x24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	00f42400 	.word	0x00f42400
 80008e0:	007a1200 	.word	0x007a1200
 80008e4:	20000008 	.word	0x20000008
 80008e8:	20000014 	.word	0x20000014

080008ec <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	460b      	mov	r3, r1
 80008f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80008f8:	78fb      	ldrb	r3, [r7, #3]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d006      	beq.n	800090c <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <RCC_AHBPeriphClockCmd+0x38>)
 8000900:	4a08      	ldr	r2, [pc, #32]	; (8000924 <RCC_AHBPeriphClockCmd+0x38>)
 8000902:	69d1      	ldr	r1, [r2, #28]
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	430a      	orrs	r2, r1
 8000908:	61da      	str	r2, [r3, #28]
 800090a:	e006      	b.n	800091a <RCC_AHBPeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <RCC_AHBPeriphClockCmd+0x38>)
 800090e:	4a05      	ldr	r2, [pc, #20]	; (8000924 <RCC_AHBPeriphClockCmd+0x38>)
 8000910:	69d1      	ldr	r1, [r2, #28]
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	43d2      	mvns	r2, r2
 8000916:	400a      	ands	r2, r1
 8000918:	61da      	str	r2, [r3, #28]
  }
}
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	40023800 	.word	0x40023800

08000928 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	460b      	mov	r3, r1
 8000932:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000934:	78fb      	ldrb	r3, [r7, #3]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d006      	beq.n	8000948 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <RCC_APB2PeriphClockCmd+0x38>)
 800093c:	4a08      	ldr	r2, [pc, #32]	; (8000960 <RCC_APB2PeriphClockCmd+0x38>)
 800093e:	6a11      	ldr	r1, [r2, #32]
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	430a      	orrs	r2, r1
 8000944:	621a      	str	r2, [r3, #32]
 8000946:	e006      	b.n	8000956 <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <RCC_APB2PeriphClockCmd+0x38>)
 800094a:	4a05      	ldr	r2, [pc, #20]	; (8000960 <RCC_APB2PeriphClockCmd+0x38>)
 800094c:	6a11      	ldr	r1, [r2, #32]
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	43d2      	mvns	r2, r2
 8000952:	400a      	ands	r2, r1
 8000954:	621a      	str	r2, [r3, #32]
  }
}
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	40023800 	.word	0x40023800

08000964 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000964:	b480      	push	{r7}
 8000966:	b087      	sub	sp, #28
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	e07c      	b.n	8000a7a <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	2201      	movs	r2, #1
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	4013      	ands	r3, r2
 8000992:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	429a      	cmp	r2, r3
 800099a:	d16b      	bne.n	8000a74 <GPIO_Init+0x110>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	2103      	movs	r1, #3
 80009a6:	fa01 f303 	lsl.w	r3, r1, r3
 80009aa:	43db      	mvns	r3, r3
 80009ac:	401a      	ands	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	791b      	ldrb	r3, [r3, #4]
 80009ba:	4619      	mov	r1, r3
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	fa01 f303 	lsl.w	r3, r1, r3
 80009c4:	431a      	orrs	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	791b      	ldrb	r3, [r3, #4]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d003      	beq.n	80009da <GPIO_Init+0x76>
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	791b      	ldrb	r3, [r3, #4]
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d134      	bne.n	8000a44 <GPIO_Init+0xe0>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	689a      	ldr	r2, [r3, #8]
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	2103      	movs	r1, #3
 80009e4:	fa01 f303 	lsl.w	r3, r1, r3
 80009e8:	43db      	mvns	r3, r3
 80009ea:	401a      	ands	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	689a      	ldr	r2, [r3, #8]
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	795b      	ldrb	r3, [r3, #5]
 80009f8:	4619      	mov	r1, r3
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000a02:	431a      	orrs	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	889b      	ldrh	r3, [r3, #4]
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	2101      	movs	r1, #1
 8000a14:	fa01 f303 	lsl.w	r3, r1, r3
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	4013      	ands	r3, r2
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	889b      	ldrh	r3, [r3, #4]
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	799b      	ldrb	r3, [r3, #6]
 8000a30:	4619      	mov	r1, r3
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	68da      	ldr	r2, [r3, #12]
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	2103      	movs	r1, #3
 8000a50:	fa01 f303 	lsl.w	r3, r1, r3
 8000a54:	43db      	mvns	r3, r3
 8000a56:	401a      	ands	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	68da      	ldr	r2, [r3, #12]
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	79db      	ldrb	r3, [r3, #7]
 8000a64:	4619      	mov	r1, r3
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6e:	431a      	orrs	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	3301      	adds	r3, #1
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	2b0f      	cmp	r3, #15
 8000a7e:	f67f af7f 	bls.w	8000980 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000a82:	371c      	adds	r7, #28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *   that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000a98:	4b32      	ldr	r3, [pc, #200]	; (8000b64 <EXTI_Init+0xd8>)
 8000a9a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	799b      	ldrb	r3, [r3, #6]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d04d      	beq.n	8000b40 <EXTI_Init+0xb4>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000aa4:	4b2f      	ldr	r3, [pc, #188]	; (8000b64 <EXTI_Init+0xd8>)
 8000aa6:	4a2f      	ldr	r2, [pc, #188]	; (8000b64 <EXTI_Init+0xd8>)
 8000aa8:	6811      	ldr	r1, [r2, #0]
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	6812      	ldr	r2, [r2, #0]
 8000aae:	43d2      	mvns	r2, r2
 8000ab0:	400a      	ands	r2, r1
 8000ab2:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000ab4:	4b2b      	ldr	r3, [pc, #172]	; (8000b64 <EXTI_Init+0xd8>)
 8000ab6:	4a2b      	ldr	r2, [pc, #172]	; (8000b64 <EXTI_Init+0xd8>)
 8000ab8:	6851      	ldr	r1, [r2, #4]
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	6812      	ldr	r2, [r2, #0]
 8000abe:	43d2      	mvns	r2, r2
 8000ac0:	400a      	ands	r2, r1
 8000ac2:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	791b      	ldrb	r3, [r3, #4]
 8000ac8:	68fa      	ldr	r2, [r7, #12]
 8000aca:	4413      	add	r3, r2
 8000acc:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	68fa      	ldr	r2, [r7, #12]
 8000ad2:	6811      	ldr	r1, [r2, #0]
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	6812      	ldr	r2, [r2, #0]
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000adc:	4b21      	ldr	r3, [pc, #132]	; (8000b64 <EXTI_Init+0xd8>)
 8000ade:	4a21      	ldr	r2, [pc, #132]	; (8000b64 <EXTI_Init+0xd8>)
 8000ae0:	6891      	ldr	r1, [r2, #8]
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	6812      	ldr	r2, [r2, #0]
 8000ae6:	43d2      	mvns	r2, r2
 8000ae8:	400a      	ands	r2, r1
 8000aea:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000aec:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <EXTI_Init+0xd8>)
 8000aee:	4a1d      	ldr	r2, [pc, #116]	; (8000b64 <EXTI_Init+0xd8>)
 8000af0:	68d1      	ldr	r1, [r2, #12]
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	6812      	ldr	r2, [r2, #0]
 8000af6:	43d2      	mvns	r2, r2
 8000af8:	400a      	ands	r2, r1
 8000afa:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	795b      	ldrb	r3, [r3, #5]
 8000b00:	2b10      	cmp	r3, #16
 8000b02:	d10e      	bne.n	8000b22 <EXTI_Init+0x96>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000b04:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <EXTI_Init+0xd8>)
 8000b06:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <EXTI_Init+0xd8>)
 8000b08:	6891      	ldr	r1, [r2, #8]
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	6812      	ldr	r2, [r2, #0]
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000b12:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <EXTI_Init+0xd8>)
 8000b14:	4a13      	ldr	r2, [pc, #76]	; (8000b64 <EXTI_Init+0xd8>)
 8000b16:	68d1      	ldr	r1, [r2, #12]
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	6812      	ldr	r2, [r2, #0]
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	e01b      	b.n	8000b5a <EXTI_Init+0xce>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <EXTI_Init+0xd8>)
 8000b24:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	795b      	ldrb	r3, [r3, #5]
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	6811      	ldr	r1, [r2, #0]
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	6812      	ldr	r2, [r2, #0]
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	e00c      	b.n	8000b5a <EXTI_Init+0xce>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	791b      	ldrb	r3, [r3, #4]
 8000b44:	68fa      	ldr	r2, [r7, #12]
 8000b46:	4413      	add	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	6811      	ldr	r1, [r2, #0]
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	6812      	ldr	r2, [r2, #0]
 8000b54:	43d2      	mvns	r2, r2
 8000b56:	400a      	ands	r2, r1
 8000b58:	601a      	str	r2, [r3, #0]
  }
}
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	40010400 	.word	0x40010400

08000b68 <EXTI_GetITStatus>:
  *   This parameter can be:
  *   EXTI_Linex: External interrupt line x where x(0..23).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000b70:	2300      	movs	r3, #0
 8000b72:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <EXTI_GetITStatus+0x44>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <EXTI_GetITStatus+0x44>)
 8000b84:	695a      	ldr	r2, [r3, #20]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d005      	beq.n	8000b9a <EXTI_GetITStatus+0x32>
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d002      	beq.n	8000b9a <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000b94:	2301      	movs	r3, #1
 8000b96:	73fb      	strb	r3, [r7, #15]
 8000b98:	e001      	b.n	8000b9e <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	40010400 	.word	0x40010400

08000bb0 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..23).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <EXTI_ClearITPendingBit+0x18>)
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	615a      	str	r2, [r3, #20]
}
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	40010400 	.word	0x40010400

08000bcc <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	73fb      	strb	r3, [r7, #15]
 8000bd8:	2300      	movs	r3, #0
 8000bda:	73bb      	strb	r3, [r7, #14]
 8000bdc:	230f      	movs	r3, #15
 8000bde:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	78db      	ldrb	r3, [r3, #3]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d037      	beq.n	8000c58 <NVIC_Init+0x8c>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000be8:	4b25      	ldr	r3, [pc, #148]	; (8000c80 <NVIC_Init+0xb4>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	43db      	mvns	r3, r3
 8000bee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000bf2:	0a1b      	lsrs	r3, r3, #8
 8000bf4:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	f1c3 0304 	rsb	r3, r3, #4
 8000bfc:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000bfe:	7b7a      	ldrb	r2, [r7, #13]
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	fa42 f303 	asr.w	r3, r2, r3
 8000c06:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	785b      	ldrb	r3, [r3, #1]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	7bbb      	ldrb	r3, [r7, #14]
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	789a      	ldrb	r2, [r3, #2]
 8000c1a:	7b7b      	ldrb	r3, [r7, #13]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	011b      	lsls	r3, r3, #4
 8000c2a:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000c2c:	4a15      	ldr	r2, [pc, #84]	; (8000c84 <NVIC_Init+0xb8>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	7bfa      	ldrb	r2, [r7, #15]
 8000c36:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c3a:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <NVIC_Init+0xb8>)
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	7812      	ldrb	r2, [r2, #0]
 8000c40:	0952      	lsrs	r2, r2, #5
 8000c42:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	7809      	ldrb	r1, [r1, #0]
 8000c48:	f001 011f 	and.w	r1, r1, #31
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000c56:	e00e      	b.n	8000c76 <NVIC_Init+0xaa>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <NVIC_Init+0xb8>)
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	7812      	ldrb	r2, [r2, #0]
 8000c5e:	0952      	lsrs	r2, r2, #5
 8000c60:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	7809      	ldrb	r1, [r1, #0]
 8000c66:	f001 011f 	and.w	r1, r1, #31
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c70:	3220      	adds	r2, #32
 8000c72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00
 8000c84:	e000e100 	.word	0xe000e100

08000c88 <__libc_init_array>:
 8000c88:	b570      	push	{r4, r5, r6, lr}
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <__libc_init_array+0x3c>)
 8000c8c:	4d0e      	ldr	r5, [pc, #56]	; (8000cc8 <__libc_init_array+0x40>)
 8000c8e:	2400      	movs	r4, #0
 8000c90:	1aed      	subs	r5, r5, r3
 8000c92:	10ad      	asrs	r5, r5, #2
 8000c94:	461e      	mov	r6, r3
 8000c96:	42ac      	cmp	r4, r5
 8000c98:	d004      	beq.n	8000ca4 <__libc_init_array+0x1c>
 8000c9a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8000c9e:	4790      	blx	r2
 8000ca0:	3401      	adds	r4, #1
 8000ca2:	e7f8      	b.n	8000c96 <__libc_init_array+0xe>
 8000ca4:	f000 f816 	bl	8000cd4 <_init>
 8000ca8:	4d08      	ldr	r5, [pc, #32]	; (8000ccc <__libc_init_array+0x44>)
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <__libc_init_array+0x48>)
 8000cac:	2400      	movs	r4, #0
 8000cae:	1aed      	subs	r5, r5, r3
 8000cb0:	10ad      	asrs	r5, r5, #2
 8000cb2:	461e      	mov	r6, r3
 8000cb4:	42ac      	cmp	r4, r5
 8000cb6:	d004      	beq.n	8000cc2 <__libc_init_array+0x3a>
 8000cb8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8000cbc:	4790      	blx	r2
 8000cbe:	3401      	adds	r4, #1
 8000cc0:	e7f8      	b.n	8000cb4 <__libc_init_array+0x2c>
 8000cc2:	bd70      	pop	{r4, r5, r6, pc}
 8000cc4:	08000cec 	.word	0x08000cec
 8000cc8:	08000cec 	.word	0x08000cec
 8000ccc:	08000cf0 	.word	0x08000cf0
 8000cd0:	08000cec 	.word	0x08000cec

08000cd4 <_init>:
 8000cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cd6:	bf00      	nop
 8000cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cda:	bc08      	pop	{r3}
 8000cdc:	469e      	mov	lr, r3
 8000cde:	4770      	bx	lr

08000ce0 <_fini>:
 8000ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ce2:	bf00      	nop
 8000ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ce6:	bc08      	pop	{r3}
 8000ce8:	469e      	mov	lr, r3
 8000cea:	4770      	bx	lr

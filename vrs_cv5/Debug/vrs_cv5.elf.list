
vrs_cv5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e54  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08004f98  08004f98  00014f98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005114  08005114  00015114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800511c  0800511c  0001511c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005120  08005120  00015120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000055c  20000000  08005124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000007c  2000055c  08005680  0002055c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200005d8  08005680  000205d8  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  0002055c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000043fd  00000000  00000000  00020585  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000ccc  00000000  00000000  00024982  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000005a8  00000000  00000000  00025650  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000510  00000000  00000000  00025bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001e8b  00000000  00000000  00026108  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001cb3  00000000  00000000  00027f93  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00029c46  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001e78  00000000  00000000  00029cc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000055c 	.word	0x2000055c
 800015c:	00000000 	.word	0x00000000
 8000160:	08004f7c 	.word	0x08004f7c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000560 	.word	0x20000560
 800017c:	08004f7c 	.word	0x08004f7c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ce:	f1a4 0401 	sub.w	r4, r4, #1
 80002d2:	d1e9      	bne.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f092 0f00 	teq	r2, #0
 800047a:	bf14      	ite	ne
 800047c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e720      	b.n	80002d4 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aedc 	beq.w	8000282 <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6c1      	b.n	8000282 <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmpun>:
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	d102      	bne.n	8000a44 <__aeabi_dcmpun+0x10>
 8000a3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a42:	d10a      	bne.n	8000a5a <__aeabi_dcmpun+0x26>
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d102      	bne.n	8000a54 <__aeabi_dcmpun+0x20>
 8000a4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a52:	d102      	bne.n	8000a5a <__aeabi_dcmpun+0x26>
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	f04f 0001 	mov.w	r0, #1
 8000a5e:	4770      	bx	lr

08000a60 <__aeabi_d2iz>:
 8000a60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a68:	d215      	bcs.n	8000a96 <__aeabi_d2iz+0x36>
 8000a6a:	d511      	bpl.n	8000a90 <__aeabi_d2iz+0x30>
 8000a6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a74:	d912      	bls.n	8000a9c <__aeabi_d2iz+0x3c>
 8000a76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a86:	fa23 f002 	lsr.w	r0, r3, r2
 8000a8a:	bf18      	it	ne
 8000a8c:	4240      	negne	r0, r0
 8000a8e:	4770      	bx	lr
 8000a90:	f04f 0000 	mov.w	r0, #0
 8000a94:	4770      	bx	lr
 8000a96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9a:	d105      	bne.n	8000aa8 <__aeabi_d2iz+0x48>
 8000a9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	bf08      	it	eq
 8000aa2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aa6:	4770      	bx	lr
 8000aa8:	f04f 0000 	mov.w	r0, #0
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b982 	b.w	8000e6c <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b84:	468c      	mov	ip, r1
 8000b86:	460c      	mov	r4, r1
 8000b88:	4605      	mov	r5, r0
 8000b8a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d14f      	bne.n	8000c30 <__udivmoddi4+0xb0>
 8000b90:	428a      	cmp	r2, r1
 8000b92:	4617      	mov	r7, r2
 8000b94:	d96b      	bls.n	8000c6e <__udivmoddi4+0xee>
 8000b96:	fab2 fe82 	clz	lr, r2
 8000b9a:	f1be 0f00 	cmp.w	lr, #0
 8000b9e:	d00b      	beq.n	8000bb8 <__udivmoddi4+0x38>
 8000ba0:	f1ce 0520 	rsb	r5, lr, #32
 8000ba4:	fa20 f505 	lsr.w	r5, r0, r5
 8000ba8:	fa01 f30e 	lsl.w	r3, r1, lr
 8000bac:	ea45 0c03 	orr.w	ip, r5, r3
 8000bb0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000bb4:	fa00 f50e 	lsl.w	r5, r0, lr
 8000bb8:	0c39      	lsrs	r1, r7, #16
 8000bba:	fbbc f0f1 	udiv	r0, ip, r1
 8000bbe:	b2ba      	uxth	r2, r7
 8000bc0:	fb01 c310 	mls	r3, r1, r0, ip
 8000bc4:	fb00 f802 	mul.w	r8, r0, r2
 8000bc8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8000bcc:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 8000bd0:	45a0      	cmp	r8, r4
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x68>
 8000bd4:	19e4      	adds	r4, r4, r7
 8000bd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bda:	f080 8128 	bcs.w	8000e2e <__udivmoddi4+0x2ae>
 8000bde:	45a0      	cmp	r8, r4
 8000be0:	f240 8125 	bls.w	8000e2e <__udivmoddi4+0x2ae>
 8000be4:	3802      	subs	r0, #2
 8000be6:	443c      	add	r4, r7
 8000be8:	ebc8 0404 	rsb	r4, r8, r4
 8000bec:	fbb4 f3f1 	udiv	r3, r4, r1
 8000bf0:	fb01 4c13 	mls	ip, r1, r3, r4
 8000bf4:	fb03 f202 	mul.w	r2, r3, r2
 8000bf8:	b2ac      	uxth	r4, r5
 8000bfa:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 8000bfe:	428a      	cmp	r2, r1
 8000c00:	d909      	bls.n	8000c16 <__udivmoddi4+0x96>
 8000c02:	19c9      	adds	r1, r1, r7
 8000c04:	f103 34ff 	add.w	r4, r3, #4294967295
 8000c08:	f080 810f 	bcs.w	8000e2a <__udivmoddi4+0x2aa>
 8000c0c:	428a      	cmp	r2, r1
 8000c0e:	f240 810c 	bls.w	8000e2a <__udivmoddi4+0x2aa>
 8000c12:	3b02      	subs	r3, #2
 8000c14:	4439      	add	r1, r7
 8000c16:	1a8a      	subs	r2, r1, r2
 8000c18:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d063      	beq.n	8000cea <__udivmoddi4+0x16a>
 8000c22:	fa22 f20e 	lsr.w	r2, r2, lr
 8000c26:	2300      	movs	r3, #0
 8000c28:	e886 000c 	stmia.w	r6, {r2, r3}
 8000c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c30:	428b      	cmp	r3, r1
 8000c32:	d907      	bls.n	8000c44 <__udivmoddi4+0xc4>
 8000c34:	2e00      	cmp	r6, #0
 8000c36:	d056      	beq.n	8000ce6 <__udivmoddi4+0x166>
 8000c38:	2100      	movs	r1, #0
 8000c3a:	e886 0011 	stmia.w	r6, {r0, r4}
 8000c3e:	4608      	mov	r0, r1
 8000c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c44:	fab3 f183 	clz	r1, r3
 8000c48:	2900      	cmp	r1, #0
 8000c4a:	f040 8093 	bne.w	8000d74 <__udivmoddi4+0x1f4>
 8000c4e:	42a3      	cmp	r3, r4
 8000c50:	d302      	bcc.n	8000c58 <__udivmoddi4+0xd8>
 8000c52:	4282      	cmp	r2, r0
 8000c54:	f200 80fe 	bhi.w	8000e54 <__udivmoddi4+0x2d4>
 8000c58:	1a85      	subs	r5, r0, r2
 8000c5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c5e:	469c      	mov	ip, r3
 8000c60:	2001      	movs	r0, #1
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	d041      	beq.n	8000cea <__udivmoddi4+0x16a>
 8000c66:	e886 1020 	stmia.w	r6, {r5, ip}
 8000c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c6e:	b912      	cbnz	r2, 8000c76 <__udivmoddi4+0xf6>
 8000c70:	2701      	movs	r7, #1
 8000c72:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c76:	fab7 fe87 	clz	lr, r7
 8000c7a:	f1be 0f00 	cmp.w	lr, #0
 8000c7e:	d136      	bne.n	8000cee <__udivmoddi4+0x16e>
 8000c80:	1be4      	subs	r4, r4, r7
 8000c82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c86:	fa1f f987 	uxth.w	r9, r7
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	fbb4 f3f8 	udiv	r3, r4, r8
 8000c90:	fb08 4413 	mls	r4, r8, r3, r4
 8000c94:	fb09 f203 	mul.w	r2, r9, r3
 8000c98:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8000c9c:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 8000ca0:	42a2      	cmp	r2, r4
 8000ca2:	d907      	bls.n	8000cb4 <__udivmoddi4+0x134>
 8000ca4:	19e4      	adds	r4, r4, r7
 8000ca6:	f103 30ff 	add.w	r0, r3, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x132>
 8000cac:	42a2      	cmp	r2, r4
 8000cae:	f200 80d3 	bhi.w	8000e58 <__udivmoddi4+0x2d8>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	1aa4      	subs	r4, r4, r2
 8000cb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cba:	fb08 4810 	mls	r8, r8, r0, r4
 8000cbe:	fb09 f900 	mul.w	r9, r9, r0
 8000cc2:	b2ac      	uxth	r4, r5
 8000cc4:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 8000cc8:	4591      	cmp	r9, r2
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0x15c>
 8000ccc:	19d2      	adds	r2, r2, r7
 8000cce:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x15a>
 8000cd4:	4591      	cmp	r9, r2
 8000cd6:	f200 80ba 	bhi.w	8000e4e <__udivmoddi4+0x2ce>
 8000cda:	4620      	mov	r0, r4
 8000cdc:	ebc9 0202 	rsb	r2, r9, r2
 8000ce0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ce4:	e79b      	b.n	8000c1e <__udivmoddi4+0x9e>
 8000ce6:	4631      	mov	r1, r6
 8000ce8:	4630      	mov	r0, r6
 8000cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cee:	fa07 f70e 	lsl.w	r7, r7, lr
 8000cf2:	f1ce 0c20 	rsb	ip, lr, #32
 8000cf6:	fa24 f30c 	lsr.w	r3, r4, ip
 8000cfa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfe:	fbb3 faf8 	udiv	sl, r3, r8
 8000d02:	fa1f f987 	uxth.w	r9, r7
 8000d06:	fb08 351a 	mls	r5, r8, sl, r3
 8000d0a:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000d0e:	fa04 f40e 	lsl.w	r4, r4, lr
 8000d12:	fb0a fb09 	mul.w	fp, sl, r9
 8000d16:	ea4c 0c04 	orr.w	ip, ip, r4
 8000d1a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d1e:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 8000d22:	459b      	cmp	fp, r3
 8000d24:	fa00 f50e 	lsl.w	r5, r0, lr
 8000d28:	d90a      	bls.n	8000d40 <__udivmoddi4+0x1c0>
 8000d2a:	19db      	adds	r3, r3, r7
 8000d2c:	f10a 32ff 	add.w	r2, sl, #4294967295
 8000d30:	f080 808b 	bcs.w	8000e4a <__udivmoddi4+0x2ca>
 8000d34:	459b      	cmp	fp, r3
 8000d36:	f240 8088 	bls.w	8000e4a <__udivmoddi4+0x2ca>
 8000d3a:	f1aa 0a02 	sub.w	sl, sl, #2
 8000d3e:	443b      	add	r3, r7
 8000d40:	ebcb 0303 	rsb	r3, fp, r3
 8000d44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d48:	fb08 3310 	mls	r3, r8, r0, r3
 8000d4c:	fb00 f409 	mul.w	r4, r0, r9
 8000d50:	fa1f fc8c 	uxth.w	ip, ip
 8000d54:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x1ec>
 8000d5c:	19db      	adds	r3, r3, r7
 8000d5e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d62:	d26e      	bcs.n	8000e42 <__udivmoddi4+0x2c2>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	d96c      	bls.n	8000e42 <__udivmoddi4+0x2c2>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	443b      	add	r3, r7
 8000d6c:	1b1c      	subs	r4, r3, r4
 8000d6e:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 8000d72:	e78b      	b.n	8000c8c <__udivmoddi4+0x10c>
 8000d74:	f1c1 0e20 	rsb	lr, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 fc0e 	lsr.w	ip, r2, lr
 8000d7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d82:	fa24 f70e 	lsr.w	r7, r4, lr
 8000d86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8a:	fbb7 faf9 	udiv	sl, r7, r9
 8000d8e:	fa1f f38c 	uxth.w	r3, ip
 8000d92:	fb09 771a 	mls	r7, r9, sl, r7
 8000d96:	fa20 f80e 	lsr.w	r8, r0, lr
 8000d9a:	408c      	lsls	r4, r1
 8000d9c:	fb0a f503 	mul.w	r5, sl, r3
 8000da0:	ea48 0404 	orr.w	r4, r8, r4
 8000da4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8000da8:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8000dac:	42bd      	cmp	r5, r7
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	fa00 fb01 	lsl.w	fp, r0, r1
 8000db6:	d909      	bls.n	8000dcc <__udivmoddi4+0x24c>
 8000db8:	eb17 070c 	adds.w	r7, r7, ip
 8000dbc:	f10a 30ff 	add.w	r0, sl, #4294967295
 8000dc0:	d241      	bcs.n	8000e46 <__udivmoddi4+0x2c6>
 8000dc2:	42bd      	cmp	r5, r7
 8000dc4:	d93f      	bls.n	8000e46 <__udivmoddi4+0x2c6>
 8000dc6:	f1aa 0a02 	sub.w	sl, sl, #2
 8000dca:	4467      	add	r7, ip
 8000dcc:	1b7f      	subs	r7, r7, r5
 8000dce:	fbb7 f5f9 	udiv	r5, r7, r9
 8000dd2:	fb09 7715 	mls	r7, r9, r5, r7
 8000dd6:	fb05 f303 	mul.w	r3, r5, r3
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8000de0:	42bb      	cmp	r3, r7
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x276>
 8000de4:	eb17 070c 	adds.w	r7, r7, ip
 8000de8:	f105 30ff 	add.w	r0, r5, #4294967295
 8000dec:	d227      	bcs.n	8000e3e <__udivmoddi4+0x2be>
 8000dee:	42bb      	cmp	r3, r7
 8000df0:	d925      	bls.n	8000e3e <__udivmoddi4+0x2be>
 8000df2:	3d02      	subs	r5, #2
 8000df4:	4467      	add	r7, ip
 8000df6:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 8000dfa:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfe:	1aff      	subs	r7, r7, r3
 8000e00:	454f      	cmp	r7, r9
 8000e02:	4645      	mov	r5, r8
 8000e04:	464c      	mov	r4, r9
 8000e06:	d314      	bcc.n	8000e32 <__udivmoddi4+0x2b2>
 8000e08:	d029      	beq.n	8000e5e <__udivmoddi4+0x2de>
 8000e0a:	b366      	cbz	r6, 8000e66 <__udivmoddi4+0x2e6>
 8000e0c:	ebbb 0305 	subs.w	r3, fp, r5
 8000e10:	eb67 0704 	sbc.w	r7, r7, r4
 8000e14:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000e18:	40cb      	lsrs	r3, r1
 8000e1a:	40cf      	lsrs	r7, r1
 8000e1c:	ea4e 0303 	orr.w	r3, lr, r3
 8000e20:	e886 0088 	stmia.w	r6, {r3, r7}
 8000e24:	2100      	movs	r1, #0
 8000e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e2a:	4623      	mov	r3, r4
 8000e2c:	e6f3      	b.n	8000c16 <__udivmoddi4+0x96>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	e6da      	b.n	8000be8 <__udivmoddi4+0x68>
 8000e32:	ebb8 0502 	subs.w	r5, r8, r2
 8000e36:	eb69 040c 	sbc.w	r4, r9, ip
 8000e3a:	3801      	subs	r0, #1
 8000e3c:	e7e5      	b.n	8000e0a <__udivmoddi4+0x28a>
 8000e3e:	4605      	mov	r5, r0
 8000e40:	e7d9      	b.n	8000df6 <__udivmoddi4+0x276>
 8000e42:	4610      	mov	r0, r2
 8000e44:	e792      	b.n	8000d6c <__udivmoddi4+0x1ec>
 8000e46:	4682      	mov	sl, r0
 8000e48:	e7c0      	b.n	8000dcc <__udivmoddi4+0x24c>
 8000e4a:	4692      	mov	sl, r2
 8000e4c:	e778      	b.n	8000d40 <__udivmoddi4+0x1c0>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	443a      	add	r2, r7
 8000e52:	e743      	b.n	8000cdc <__udivmoddi4+0x15c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e704      	b.n	8000c62 <__udivmoddi4+0xe2>
 8000e58:	3b02      	subs	r3, #2
 8000e5a:	443c      	add	r4, r7
 8000e5c:	e72a      	b.n	8000cb4 <__udivmoddi4+0x134>
 8000e5e:	45c3      	cmp	fp, r8
 8000e60:	d3e7      	bcc.n	8000e32 <__udivmoddi4+0x2b2>
 8000e62:	463c      	mov	r4, r7
 8000e64:	e7d1      	b.n	8000e0a <__udivmoddi4+0x28a>
 8000e66:	4631      	mov	r1, r6
 8000e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e6c <__aeabi_idiv0>:
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for preemption priority.
  *                                0 bits for subpriority.
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000e78:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <NVIC_PriorityGroupConfig+0x20>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e84:	60d3      	str	r3, [r2, #12]
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	73fb      	strb	r3, [r7, #15]
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	73bb      	strb	r3, [r7, #14]
 8000ea4:	230f      	movs	r3, #15
 8000ea6:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	78db      	ldrb	r3, [r3, #3]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d038      	beq.n	8000f22 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000eb0:	4b26      	ldr	r3, [pc, #152]	; (8000f4c <NVIC_Init+0xb8>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000eba:	0a1b      	lsrs	r3, r3, #8
 8000ebc:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	f1c3 0304 	rsb	r3, r3, #4
 8000ec4:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000ec6:	7b7a      	ldrb	r2, [r7, #13]
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	fa42 f303 	asr.w	r3, r2, r3
 8000ece:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	785b      	ldrb	r3, [r3, #1]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	7bbb      	ldrb	r3, [r7, #14]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	789a      	ldrb	r2, [r3, #2]
 8000ee2:	7b7b      	ldrb	r3, [r7, #13]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	011b      	lsls	r3, r3, #4
 8000ef2:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000ef4:	4a16      	ldr	r2, [pc, #88]	; (8000f50 <NVIC_Init+0xbc>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	7bfa      	ldrb	r2, [r7, #15]
 8000efe:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f02:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <NVIC_Init+0xbc>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	095b      	lsrs	r3, r3, #5
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	f003 031f 	and.w	r3, r3, #31
 8000f16:	2101      	movs	r1, #1
 8000f18:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f1c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000f20:	e00f      	b.n	8000f42 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f22:	490b      	ldr	r1, [pc, #44]	; (8000f50 <NVIC_Init+0xbc>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	095b      	lsrs	r3, r3, #5
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	f003 031f 	and.w	r3, r3, #31
 8000f36:	2201      	movs	r2, #1
 8000f38:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f3a:	f100 0320 	add.w	r3, r0, #32
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000f42:	bf00      	nop
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00
 8000f50:	e000e100 	.word	0xe000e100

08000f54 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains 
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)               
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	60fb      	str	r3, [r7, #12]
  /* Clear RES and SCAN bits */ 
  tmpreg1 &= CR1_CLEAR_MASK;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000f72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f76:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | ADC_InitStruct->ADC_Resolution);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	791b      	ldrb	r3, [r3, #4]
 8000f7c:	021a      	lsls	r2, r3, #8
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68fa      	ldr	r2, [r7, #12]
 8000f8e:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <ADC_Init+0xa4>)
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	691a      	ldr	r2, [r3, #16]
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	689b      	ldr	r3, [r3, #8]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 8000fac:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	795b      	ldrb	r3, [r3, #5]
 8000fb2:	005b      	lsls	r3, r3, #1
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	60fb      	str	r3, [r7, #12]
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f023 73f8 	bic.w	r3, r3, #32505856	; 0x1f00000
 8000fce:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */ 
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	7d1b      	ldrb	r3, [r3, #20]
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	7afb      	ldrb	r3, [r7, #11]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000fde:	7afb      	ldrb	r3, [r7, #11]
 8000fe0:	051b      	lsls	r3, r3, #20
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000fee:	bf00      	nop
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	c0fff7fd 	.word	0xc0fff7fd

08000ffc <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)                            
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Resolution member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]

  /* Initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_CC2;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8001022:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2201      	movs	r2, #1
 800102e:	751a      	strb	r2, [r3, #20]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001048:	78fb      	ldrb	r3, [r7, #3]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d006      	beq.n	800105c <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f043 0201 	orr.w	r2, r3, #1
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 800105a:	e005      	b.n	8001068 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f023 0201 	bic.w	r2, r3, #1
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	609a      	str	r2, [r3, #8]
  }
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_192Cycles: Sample time equal to 192 cycles	
  *     @arg ADC_SampleTime_384Cycles: Sample time equal to 384 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	4608      	mov	r0, r1
 800107e:	4611      	mov	r1, r2
 8001080:	461a      	mov	r2, r3
 8001082:	4603      	mov	r3, r0
 8001084:	70fb      	strb	r3, [r7, #3]
 8001086:	460b      	mov	r3, r1
 8001088:	70bb      	strb	r3, [r7, #2]
 800108a:	4613      	mov	r3, r2
 800108c:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* If ADC_Channel_30 or ADC_Channel_31 is selected */
  if (ADC_Channel > ADC_Channel_29)
 8001096:	78fb      	ldrb	r3, [r7, #3]
 8001098:	2b1d      	cmp	r3, #29
 800109a:	d923      	bls.n	80010e4 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR0;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR0_SMP_SET << (3 * (ADC_Channel - 30));
 80010a2:	78fb      	ldrb	r3, [r7, #3]
 80010a4:	f1a3 021e 	sub.w	r2, r3, #30
 80010a8:	4613      	mov	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4413      	add	r3, r2
 80010ae:	2207      	movs	r2, #7
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	4013      	ands	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 30));
 80010c0:	7879      	ldrb	r1, [r7, #1]
 80010c2:	78fb      	ldrb	r3, [r7, #3]
 80010c4:	f1a3 021e 	sub.w	r2, r3, #30
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	4313      	orrs	r3, r2
 80010da:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR0 = tmpreg1;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80010e2:	e06c      	b.n	80011be <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_20 ... ADC_Channel_29 is selected */
  else if (ADC_Channel > ADC_Channel_19)
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	2b13      	cmp	r3, #19
 80010e8:	d923      	bls.n	8001132 <ADC_RegularChannelConfig+0xbe>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 20));
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	f1a3 0214 	sub.w	r2, r3, #20
 80010f6:	4613      	mov	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	4413      	add	r3, r2
 80010fc:	2207      	movs	r2, #7
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	43db      	mvns	r3, r3
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	4013      	ands	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 20));
 800110e:	7879      	ldrb	r1, [r7, #1]
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	f1a3 0214 	sub.w	r2, r3, #20
 8001116:	4613      	mov	r3, r2
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4413      	add	r3, r2
 800111c:	fa01 f303 	lsl.w	r3, r1, r3
 8001120:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	4313      	orrs	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	e045      	b.n	80011be <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_10 ... ADC_Channel_19 is selected */
  else if (ADC_Channel > ADC_Channel_9)
 8001132:	78fb      	ldrb	r3, [r7, #3]
 8001134:	2b09      	cmp	r3, #9
 8001136:	d923      	bls.n	8001180 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * (ADC_Channel - 10));
 800113e:	78fb      	ldrb	r3, [r7, #3]
 8001140:	f1a3 020a 	sub.w	r2, r3, #10
 8001144:	4613      	mov	r3, r2
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4413      	add	r3, r2
 800114a:	2207      	movs	r2, #7
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	43db      	mvns	r3, r3
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	4013      	ands	r3, r2
 800115a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 800115c:	7879      	ldrb	r1, [r7, #1]
 800115e:	78fb      	ldrb	r3, [r7, #3]
 8001160:	f1a3 020a 	sub.w	r2, r3, #10
 8001164:	4613      	mov	r3, r2
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	4413      	add	r3, r2
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	4313      	orrs	r3, r2
 8001176:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	611a      	str	r2, [r3, #16]
 800117e:	e01e      	b.n	80011be <ADC_RegularChannelConfig+0x14a>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR3;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR3_SMP_SET << (3 * ADC_Channel);
 8001186:	78fa      	ldrb	r2, [r7, #3]
 8001188:	4613      	mov	r3, r2
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	4413      	add	r3, r2
 800118e:	2207      	movs	r2, #7
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	43db      	mvns	r3, r3
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	4013      	ands	r3, r2
 800119e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80011a0:	7879      	ldrb	r1, [r7, #1]
 80011a2:	78fa      	ldrb	r2, [r7, #3]
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR3 = tmpreg1;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	615a      	str	r2, [r3, #20]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80011be:	78bb      	ldrb	r3, [r7, #2]
 80011c0:	2b06      	cmp	r3, #6
 80011c2:	d821      	bhi.n	8001208 <ADC_RegularChannelConfig+0x194>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR5;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR5_SQ_SET << (5 * (Rank - 1));
 80011ca:	78bb      	ldrb	r3, [r7, #2]
 80011cc:	1e5a      	subs	r2, r3, #1
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	221f      	movs	r2, #31
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	43db      	mvns	r3, r3
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	4013      	ands	r3, r2
 80011e4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80011e6:	78f9      	ldrb	r1, [r7, #3]
 80011e8:	78bb      	ldrb	r3, [r7, #2]
 80011ea:	1e5a      	subs	r2, r3, #1
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8001206:	e095      	b.n	8001334 <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8001208:	78bb      	ldrb	r3, [r7, #2]
 800120a:	2b0c      	cmp	r3, #12
 800120c:	d821      	bhi.n	8001252 <ADC_RegularChannelConfig+0x1de>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001212:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR4_SQ_SET << (5 * (Rank - 7));
 8001214:	78bb      	ldrb	r3, [r7, #2]
 8001216:	1fda      	subs	r2, r3, #7
 8001218:	4613      	mov	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	221f      	movs	r2, #31
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	43db      	mvns	r3, r3
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	4013      	ands	r3, r2
 800122e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8001230:	78f9      	ldrb	r1, [r7, #3]
 8001232:	78bb      	ldrb	r3, [r7, #2]
 8001234:	1fda      	subs	r2, r3, #7
 8001236:	4613      	mov	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	fa01 f303 	lsl.w	r3, r1, r3
 8001240:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	4313      	orrs	r3, r2
 8001248:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8001250:	e070      	b.n	8001334 <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
  }  
  /* For Rank 13 to 18 */
  else if (Rank < 19)
 8001252:	78bb      	ldrb	r3, [r7, #2]
 8001254:	2b12      	cmp	r3, #18
 8001256:	d823      	bhi.n	80012a0 <ADC_RegularChannelConfig+0x22c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800125c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 13));
 800125e:	78bb      	ldrb	r3, [r7, #2]
 8001260:	f1a3 020d 	sub.w	r2, r3, #13
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	221f      	movs	r2, #31
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	43db      	mvns	r3, r3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	4013      	ands	r3, r2
 800127a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 800127c:	78f9      	ldrb	r1, [r7, #3]
 800127e:	78bb      	ldrb	r3, [r7, #2]
 8001280:	f1a3 020d 	sub.w	r2, r3, #13
 8001284:	4613      	mov	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	fa01 f303 	lsl.w	r3, r1, r3
 800128e:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	4313      	orrs	r3, r2
 8001296:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800129e:	e049      	b.n	8001334 <ADC_RegularChannelConfig+0x2c0>
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
    
  /* For Rank 19 to 24 */
  else if (Rank < 25)
 80012a0:	78bb      	ldrb	r3, [r7, #2]
 80012a2:	2b18      	cmp	r3, #24
 80012a4:	d823      	bhi.n	80012ee <ADC_RegularChannelConfig+0x27a>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012aa:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 19));
 80012ac:	78bb      	ldrb	r3, [r7, #2]
 80012ae:	f1a3 0213 	sub.w	r2, r3, #19
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	221f      	movs	r2, #31
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	4013      	ands	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 19));
 80012ca:	78f9      	ldrb	r1, [r7, #3]
 80012cc:	78bb      	ldrb	r3, [r7, #2]
 80012ce:	f1a3 0213 	sub.w	r2, r3, #19
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	fa01 f303 	lsl.w	r3, r1, r3
 80012dc:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80012ec:	e022      	b.n	8001334 <ADC_RegularChannelConfig+0x2c0>
  
  /* For Rank 25 to 28 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 25));
 80012f4:	78bb      	ldrb	r3, [r7, #2]
 80012f6:	f1a3 0219 	sub.w	r2, r3, #25
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	221f      	movs	r2, #31
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	43db      	mvns	r3, r3
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	4013      	ands	r3, r2
 8001310:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 25));
 8001312:	78f9      	ldrb	r1, [r7, #3]
 8001314:	78bb      	ldrb	r3, [r7, #2]
 8001316:	f1a3 0219 	sub.w	r2, r3, #25
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	fa01 f303 	lsl.w	r3, r1, r3
 8001324:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	4313      	orrs	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop

08001340 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	609a      	str	r2, [r3, #8]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop

08001360 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136c:	b29b      	uxth	r3, r3
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	807b      	strh	r3, [r7, #2]
 8001384:	4613      	mov	r3, r2
 8001386:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 8001392:	2201      	movs	r2, #1
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 800139c:	787b      	ldrb	r3, [r7, #1]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d006      	beq.n	80013b0 <ADC_ITConfig+0x38>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	431a      	orrs	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
  }
}
 80013ae:	e006      	b.n	80013be <ADC_ITConfig+0x46>
    ADCx->CR1 |= itmask;
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	401a      	ands	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	605a      	str	r2, [r3, #4]
  }
}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_RCNR: Regular channel not ready
  *     @arg ADC_FLAG_JCNR: Injected channel not ready
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint16_t ADC_FLAG)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80013d4:	2300      	movs	r3, #0
 80013d6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	887b      	ldrh	r3, [r7, #2]
 80013de:	4013      	ands	r3, r2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d002      	beq.n	80013ea <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80013e4:	2301      	movs	r3, #1
 80013e6:	73fb      	strb	r3, [r7, #15]
 80013e8:	e001      	b.n	80013ee <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80013ea:	2300      	movs	r3, #0
 80013ec:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop

080013fc <ADC_ClearFlag>:
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *     @arg ADC_FLAG_OVR: overrun flag
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint16_t ADC_FLAG)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 8001408:	887b      	ldrh	r3, [r7, #2]
 800140a:	43da      	mvns	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	601a      	str	r2, [r3, #0]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop

0800141c <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800141c:	b480      	push	{r7}
 800141e:	b087      	sub	sp, #28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	e07e      	b.n	8001536 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001438:	2201      	movs	r2, #1
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	429a      	cmp	r2, r3
 8001452:	d16d      	bne.n	8001530 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	2103      	movs	r1, #3
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	401a      	ands	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	791b      	ldrb	r3, [r3, #4]
 8001472:	4619      	mov	r1, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	fa01 f303 	lsl.w	r3, r1, r3
 800147c:	431a      	orrs	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	791b      	ldrb	r3, [r3, #4]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d003      	beq.n	8001492 <GPIO_Init+0x76>
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	791b      	ldrb	r3, [r3, #4]
 800148e:	2b02      	cmp	r3, #2
 8001490:	d136      	bne.n	8001500 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	2103      	movs	r1, #3
 800149c:	fa01 f303 	lsl.w	r3, r1, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	401a      	ands	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	795b      	ldrb	r3, [r3, #5]
 80014b0:	4619      	mov	r1, r3
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	889b      	ldrh	r3, [r3, #4]
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	2101      	movs	r1, #1
 80014cc:	fa01 f303 	lsl.w	r3, r1, r3
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	4013      	ands	r3, r2
 80014d8:	b29a      	uxth	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	889b      	ldrh	r3, [r3, #4]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	b21a      	sxth	r2, r3
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	799b      	ldrb	r3, [r3, #6]
 80014ea:	4619      	mov	r1, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	fa01 f303 	lsl.w	r3, r1, r3
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	4313      	orrs	r3, r2
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	b29b      	uxth	r3, r3
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	2103      	movs	r1, #3
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	401a      	ands	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	79db      	ldrb	r3, [r3, #7]
 8001520:	4619      	mov	r1, r3
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	3301      	adds	r3, #1
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	2b0f      	cmp	r3, #15
 800153a:	f67f af7d 	bls.w	8001438 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800153e:	bf00      	nop
 8001540:	371c      	adds	r7, #28
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	807b      	strh	r3, [r7, #2]
 8001554:	4613      	mov	r3, r2
 8001556:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001560:	787a      	ldrb	r2, [r7, #1]
 8001562:	887b      	ldrh	r3, [r7, #2]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001570:	887b      	ldrh	r3, [r7, #2]
 8001572:	08db      	lsrs	r3, r3, #3
 8001574:	b29b      	uxth	r3, r3
 8001576:	4618      	mov	r0, r3
 8001578:	887b      	ldrh	r3, [r7, #2]
 800157a:	08db      	lsrs	r3, r3, #3
 800157c:	b29b      	uxth	r3, r3
 800157e:	461a      	mov	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3208      	adds	r2, #8
 8001584:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001588:	887b      	ldrh	r3, [r7, #2]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	210f      	movs	r1, #15
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	ea02 0103 	and.w	r1, r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f100 0208 	add.w	r2, r0, #8
 80015a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80015a6:	887b      	ldrh	r3, [r7, #2]
 80015a8:	08db      	lsrs	r3, r3, #3
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	461a      	mov	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3208      	adds	r2, #8
 80015b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80015bc:	887b      	ldrh	r3, [r7, #2]
 80015be:	08db      	lsrs	r3, r3, #3
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	461a      	mov	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3208      	adds	r2, #8
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80015e2:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <RCC_HSICmd+0x1c>)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	42470000 	.word	0x42470000

080015f8 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b089      	sub	sp, #36	; 0x24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
 8001604:	2300      	movs	r3, #0
 8001606:	61bb      	str	r3, [r7, #24]
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	2300      	movs	r3, #0
 8001616:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001618:	4b5f      	ldr	r3, [pc, #380]	; (8001798 <RCC_GetClocksFreq+0x1a0>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 030c 	and.w	r3, r3, #12
 8001620:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	2b0c      	cmp	r3, #12
 8001626:	d865      	bhi.n	80016f4 <RCC_GetClocksFreq+0xfc>
 8001628:	a201      	add	r2, pc, #4	; (adr r2, 8001630 <RCC_GetClocksFreq+0x38>)
 800162a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162e:	bf00      	nop
 8001630:	08001665 	.word	0x08001665
 8001634:	080016f5 	.word	0x080016f5
 8001638:	080016f5 	.word	0x080016f5
 800163c:	080016f5 	.word	0x080016f5
 8001640:	08001685 	.word	0x08001685
 8001644:	080016f5 	.word	0x080016f5
 8001648:	080016f5 	.word	0x080016f5
 800164c:	080016f5 	.word	0x080016f5
 8001650:	0800168d 	.word	0x0800168d
 8001654:	080016f5 	.word	0x080016f5
 8001658:	080016f5 	.word	0x080016f5
 800165c:	080016f5 	.word	0x080016f5
 8001660:	08001695 	.word	0x08001695
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8001664:	4b4c      	ldr	r3, [pc, #304]	; (8001798 <RCC_GetClocksFreq+0x1a0>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800166c:	0b5b      	lsrs	r3, r3, #13
 800166e:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	3301      	adds	r3, #1
 8001674:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	461a      	mov	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	601a      	str	r2, [r3, #0]
      break;
 8001682:	e047      	b.n	8001714 <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a45      	ldr	r2, [pc, #276]	; (800179c <RCC_GetClocksFreq+0x1a4>)
 8001688:	601a      	str	r2, [r3, #0]
      break;
 800168a:	e043      	b.n	8001714 <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a44      	ldr	r2, [pc, #272]	; (80017a0 <RCC_GetClocksFreq+0x1a8>)
 8001690:	601a      	str	r2, [r3, #0]
      break;
 8001692:	e03f      	b.n	8001714 <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8001694:	4b40      	ldr	r3, [pc, #256]	; (8001798 <RCC_GetClocksFreq+0x1a0>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800169c:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 800169e:	4b3e      	ldr	r3, [pc, #248]	; (8001798 <RCC_GetClocksFreq+0x1a0>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80016a6:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	0c9b      	lsrs	r3, r3, #18
 80016ac:	4a3d      	ldr	r2, [pc, #244]	; (80017a4 <RCC_GetClocksFreq+0x1ac>)
 80016ae:	5cd3      	ldrb	r3, [r2, r3]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	0d9b      	lsrs	r3, r3, #22
 80016b8:	3301      	adds	r3, #1
 80016ba:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80016bc:	4b36      	ldr	r3, [pc, #216]	; (8001798 <RCC_GetClocksFreq+0x1a0>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c4:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d109      	bne.n	80016e0 <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	4a33      	ldr	r2, [pc, #204]	; (800179c <RCC_GetClocksFreq+0x1a4>)
 80016d0:	fb02 f203 	mul.w	r2, r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 80016de:	e019      	b.n	8001714 <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	4a2f      	ldr	r2, [pc, #188]	; (80017a0 <RCC_GetClocksFreq+0x1a8>)
 80016e4:	fb02 f203 	mul.w	r2, r2, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	601a      	str	r2, [r3, #0]
      }
      break;
 80016f2:	e00f      	b.n	8001714 <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 80016f4:	4b28      	ldr	r3, [pc, #160]	; (8001798 <RCC_GetClocksFreq+0x1a0>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80016fc:	0b5b      	lsrs	r3, r3, #13
 80016fe:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	3301      	adds	r3, #1
 8001704:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	461a      	mov	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	601a      	str	r2, [r3, #0]
      break;
 8001712:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001714:	4b20      	ldr	r3, [pc, #128]	; (8001798 <RCC_GetClocksFreq+0x1a0>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800171c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	091b      	lsrs	r3, r3, #4
 8001722:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 8001724:	4a20      	ldr	r2, [pc, #128]	; (80017a8 <RCC_GetClocksFreq+0x1b0>)
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	4413      	add	r3, r2
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	40da      	lsrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800173c:	4b16      	ldr	r3, [pc, #88]	; (8001798 <RCC_GetClocksFreq+0x1a0>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001744:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	0a1b      	lsrs	r3, r3, #8
 800174a:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 800174c:	4a16      	ldr	r2, [pc, #88]	; (80017a8 <RCC_GetClocksFreq+0x1b0>)
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	4413      	add	r3, r2
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	40da      	lsrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <RCC_GetClocksFreq+0x1a0>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800176c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	0adb      	lsrs	r3, r3, #11
 8001772:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8001774:	4a0c      	ldr	r2, [pc, #48]	; (80017a8 <RCC_GetClocksFreq+0x1b0>)
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	4413      	add	r3, r2
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	40da      	lsrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	60da      	str	r2, [r3, #12]
}
 800178c:	bf00      	nop
 800178e:	3724      	adds	r7, #36	; 0x24
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	00f42400 	.word	0x00f42400
 80017a0:	007a1200 	.word	0x007a1200
 80017a4:	20000000 	.word	0x20000000
 80017a8:	2000000c 	.word	0x2000000c

080017ac <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d006      	beq.n	80017cc <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80017be:	4909      	ldr	r1, [pc, #36]	; (80017e4 <RCC_AHBPeriphClockCmd+0x38>)
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <RCC_AHBPeriphClockCmd+0x38>)
 80017c2:	69da      	ldr	r2, [r3, #28]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80017ca:	e006      	b.n	80017da <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80017cc:	4905      	ldr	r1, [pc, #20]	; (80017e4 <RCC_AHBPeriphClockCmd+0x38>)
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <RCC_AHBPeriphClockCmd+0x38>)
 80017d0:	69da      	ldr	r2, [r3, #28]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	4013      	ands	r3, r2
 80017d8:	61cb      	str	r3, [r1, #28]
  }
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	40023800 	.word	0x40023800

080017e8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d006      	beq.n	8001808 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80017fa:	4909      	ldr	r1, [pc, #36]	; (8001820 <RCC_APB2PeriphClockCmd+0x38>)
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <RCC_APB2PeriphClockCmd+0x38>)
 80017fe:	6a1a      	ldr	r2, [r3, #32]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4313      	orrs	r3, r2
 8001804:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001806:	e006      	b.n	8001816 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001808:	4905      	ldr	r1, [pc, #20]	; (8001820 <RCC_APB2PeriphClockCmd+0x38>)
 800180a:	4b05      	ldr	r3, [pc, #20]	; (8001820 <RCC_APB2PeriphClockCmd+0x38>)
 800180c:	6a1a      	ldr	r2, [r3, #32]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	43db      	mvns	r3, r3
 8001812:	4013      	ands	r3, r2
 8001814:	620b      	str	r3, [r1, #32]
  }
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr
 8001820:	40023800 	.word	0x40023800

08001824 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8001824:	b480      	push	{r7}
 8001826:	b087      	sub	sp, #28
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8001836:	2300      	movs	r3, #0
 8001838:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	095b      	lsrs	r3, r3, #5
 800183e:	b2db      	uxtb	r3, r3
 8001840:	60fb      	str	r3, [r7, #12]

  if (tmp == 1)               /* The flag to check is in CR register */
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d103      	bne.n	8001850 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8001848:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <RCC_GetFlagStatus+0x60>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	e002      	b.n	8001856 <RCC_GetFlagStatus+0x32>
  }
  else          /* The flag to check is in CSR register (tmp == 2) */
  {
    statusreg = RCC->CSR;
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <RCC_GetFlagStatus+0x60>)
 8001852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001854:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	f003 031f 	and.w	r3, r3, #31
 800185c:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	fa22 f303 	lsr.w	r3, r2, r3
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <RCC_GetFlagStatus+0x50>
  {
    bitstatus = SET;
 800186e:	2301      	movs	r3, #1
 8001870:	74fb      	strb	r3, [r7, #19]
 8001872:	e001      	b.n	8001878 <RCC_GetFlagStatus+0x54>
  }
  else
  {
    bitstatus = RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8001878:	7cfb      	ldrb	r3, [r7, #19]
}
 800187a:	4618      	mov	r0, r3
 800187c:	371c      	adds	r7, #28
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	40023800 	.word	0x40023800

08001888 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that 
  *        contains the configuration information for the specified USART peripheral.
  * @retval None.
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	; 0x28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800189e:	2300      	movs	r3, #0
 80018a0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }
   
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	8a1b      	ldrh	r3, [r3, #16]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	88db      	ldrh	r3, [r3, #6]
 80018b6:	461a      	mov	r2, r3
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	4313      	orrs	r3, r2
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	899b      	ldrh	r3, [r3, #12]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80018d4:	f023 030c 	bic.w	r3, r3, #12
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	889a      	ldrh	r2, [r3, #4]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	891b      	ldrh	r3, [r3, #8]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80018ea:	4313      	orrs	r3, r2
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	461a      	mov	r2, r3
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	4313      	orrs	r3, r2
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	8a9b      	ldrh	r3, [r3, #20]
 8001902:	b29b      	uxth	r3, r3
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800190c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	899b      	ldrh	r3, [r3, #12]
 8001912:	461a      	mov	r2, r3
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	4313      	orrs	r3, r2
 8001918:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	b29a      	uxth	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001922:	f107 0308 	add.w	r3, r7, #8
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fe66 	bl	80015f8 <RCC_GetClocksFreq>
  if (USARTx == USART1) 
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a2e      	ldr	r2, [pc, #184]	; (80019e8 <USART_Init+0x160>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d102      	bne.n	800193a <USART_Init+0xb2>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	623b      	str	r3, [r7, #32]
 8001938:	e001      	b.n	800193e <USART_Init+0xb6>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	623b      	str	r3, [r7, #32]
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	899b      	ldrh	r3, [r3, #12]
 8001942:	b29b      	uxth	r3, r3
 8001944:	b21b      	sxth	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	da0c      	bge.n	8001964 <USART_Init+0xdc>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800194a:	6a3a      	ldr	r2, [r7, #32]
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	009a      	lsls	r2, r3, #2
 8001954:	441a      	add	r2, r3
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	e00b      	b.n	800197c <USART_Init+0xf4>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001964:	6a3a      	ldr	r2, [r7, #32]
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	009a      	lsls	r2, r3, #2
 800196e:	441a      	add	r2, r3
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	fbb2 f3f3 	udiv	r3, r2, r3
 800197a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	4a1b      	ldr	r2, [pc, #108]	; (80019ec <USART_Init+0x164>)
 8001980:	fba2 2303 	umull	r2, r3, r2, r3
 8001984:	095b      	lsrs	r3, r3, #5
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	091b      	lsrs	r3, r3, #4
 800198e:	2264      	movs	r2, #100	; 0x64
 8001990:	fb02 f303 	mul.w	r3, r2, r3
 8001994:	69fa      	ldr	r2, [r7, #28]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	899b      	ldrh	r3, [r3, #12]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	b21b      	sxth	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	da0c      	bge.n	80019c0 <USART_Init+0x138>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	3332      	adds	r3, #50	; 0x32
 80019ac:	4a0f      	ldr	r2, [pc, #60]	; (80019ec <USART_Init+0x164>)
 80019ae:	fba2 2303 	umull	r2, r3, r2, r3
 80019b2:	095b      	lsrs	r3, r3, #5
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ba:	4313      	orrs	r3, r2
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
 80019be:	e00b      	b.n	80019d8 <USART_Init+0x150>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	3332      	adds	r3, #50	; 0x32
 80019c6:	4a09      	ldr	r2, [pc, #36]	; (80019ec <USART_Init+0x164>)
 80019c8:	fba2 2303 	umull	r2, r3, r2, r3
 80019cc:	095b      	lsrs	r3, r3, #5
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d4:	4313      	orrs	r3, r2
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
  }
 
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	b29a      	uxth	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	811a      	strh	r2, [r3, #8]
}
 80019e0:	bf00      	nop
 80019e2:	3728      	adds	r7, #40	; 0x28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40013800 	.word	0x40013800
 80019ec:	51eb851f 	.word	0x51eb851f

080019f0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d008      	beq.n	8001a14 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	899b      	ldrh	r3, [r3, #12]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8001a12:	e007      	b.n	8001a24 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	899b      	ldrh	r3, [r3, #12]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	819a      	strh	r2, [r3, #12]
  }
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop

08001a30 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None.
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001a3c:	887b      	ldrh	r3, [r7, #2]
 8001a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	809a      	strh	r2, [r3, #4]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop

08001a54 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	889b      	ldrh	r3, [r3, #4]
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a66:	b29b      	uxth	r3, r3
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop

08001a74 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
 8001a80:	4613      	mov	r3, r2
 8001a82:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001a84:	2300      	movs	r3, #0
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001a98:	887b      	ldrh	r3, [r7, #2]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	095b      	lsrs	r3, r3, #5
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001aa2:	887b      	ldrh	r3, [r7, #2]
 8001aa4:	f003 031f 	and.w	r3, r3, #31
 8001aa8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001aaa:	2201      	movs	r2, #1
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d103      	bne.n	8001ac2 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	330c      	adds	r3, #12
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	e009      	b.n	8001ad6 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d103      	bne.n	8001ad0 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	3310      	adds	r3, #16
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	e002      	b.n	8001ad6 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	3314      	adds	r3, #20
 8001ad4:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8001ad6:	787b      	ldrb	r3, [r7, #1]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d006      	beq.n	8001aea <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	6811      	ldr	r1, [r2, #0]
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001ae8:	e006      	b.n	8001af8 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	6811      	ldr	r1, [r2, #0]
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	43d2      	mvns	r2, r2
 8001af4:	400a      	ands	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]
  }
}
 8001af8:	bf00      	nop
 8001afa:	371c      	adds	r7, #28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop

08001b04 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag.
  *     @arg USART_FLAG_PE:   Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001b10:	2300      	movs	r3, #0
 8001b12:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	887b      	ldrh	r3, [r7, #2]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d002      	beq.n	8001b2a <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
 8001b28:	e001      	b.n	8001b2e <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop

08001b3c <USART_ClearFlag>:
  * @note TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8001b48:	887b      	ldrh	r3, [r7, #2]
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	801a      	strh	r2, [r3, #0]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	6039      	str	r1, [r7, #0]
 8001b66:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	da0b      	bge.n	8001b88 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001b70:	490d      	ldr	r1, [pc, #52]	; (8001ba8 <NVIC_SetPriority+0x4c>)
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	f003 030f 	and.w	r3, r3, #15
 8001b78:	3b04      	subs	r3, #4
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	0112      	lsls	r2, r2, #4
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	440b      	add	r3, r1
 8001b84:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001b86:	e009      	b.n	8001b9c <NVIC_SetPriority+0x40>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001b88:	4908      	ldr	r1, [pc, #32]	; (8001bac <NVIC_SetPriority+0x50>)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	0112      	lsls	r2, r2, #4
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	440b      	add	r3, r1
 8001b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000ed00 	.word	0xe000ed00
 8001bac:	e000e100 	.word	0xe000e100

08001bb0 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bbe:	d301      	bcc.n	8001bc4 <SysTick_Config+0x14>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e011      	b.n	8001be8 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <SysTick_Config+0x40>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8001bd0:	210f      	movs	r1, #15
 8001bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd6:	f7ff ffc1 	bl	8001b5c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <SysTick_Config+0x40>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <SysTick_Config+0x40>)
 8001be2:	2207      	movs	r2, #7
 8001be4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	e000e010 	.word	0xe000e010

08001bf4 <main>:
**
**===========================================================================
*/

int main(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0


  /* SysTick end of count event each 1ms */
  RCC_GetClocksFreq(&RCC_Clocks);
 8001bfa:	4809      	ldr	r0, [pc, #36]	; (8001c20 <main+0x2c>)
 8001bfc:	f7ff fcfc 	bl	80015f8 <RCC_GetClocksFreq>
  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 8001c00:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <main+0x2c>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	4a07      	ldr	r2, [pc, #28]	; (8001c24 <main+0x30>)
 8001c06:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0a:	099b      	lsrs	r3, r3, #6
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ffcf 	bl	8001bb0 <SysTick_Config>
  *  To reconfigure the default setting of SystemInit() function, refer to
  *  system_stm32l1xx.c file
  */


  uint16_t AD_value = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	80fb      	strh	r3, [r7, #6]


  UART1_init();
 8001c16:	f000 f971 	bl	8001efc <UART1_init>

  adc_init();
 8001c1a:	f000 f9cb 	bl	8001fb4 <adc_init>


  /* Infinite loop */
  while (1)
  {
  }
 8001c1e:	e7fe      	b.n	8001c1e <main+0x2a>
 8001c20:	200005c4 	.word	0x200005c4
 8001c24:	10624dd3 	.word	0x10624dd3

08001c28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c2c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c2e:	e003      	b.n	8001c38 <LoopCopyDataInit>

08001c30 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8001c32:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c34:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c36:	3104      	adds	r1, #4

08001c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c38:	480b      	ldr	r0, [pc, #44]	; (8001c68 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8001c3c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c3e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c40:	d3f6      	bcc.n	8001c30 <CopyDataInit>
  ldr r2, =_sbss
 8001c42:	4a0b      	ldr	r2, [pc, #44]	; (8001c70 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8001c44:	e002      	b.n	8001c4c <LoopFillZerobss>

08001c46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c46:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001c48:	f842 3b04 	str.w	r3, [r2], #4

08001c4c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <LoopFillZerobss+0x28>)
  cmp r2, r3
 8001c4e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c50:	d3f9      	bcc.n	8001c46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c52:	f000 f841 	bl	8001cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c56:	f000 faa3 	bl	80021a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c5a:	f7ff ffcb 	bl	8001bf4 <main>
  bx lr
 8001c5e:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c60:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8001c64:	08005124 	.word	0x08005124
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c68:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c6c:	2000055c 	.word	0x2000055c
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8001c70:	2000055c 	.word	0x2000055c
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8001c74:	200005d8 	.word	0x200005d8

08001c78 <AES_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c78:	e7fe      	b.n	8001c78 <AES_IRQHandler>
	...

08001c7c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8001c8c:	e7fe      	b.n	8001c8c <HardFault_Handler+0x4>
 8001c8e:	bf00      	nop

08001c90 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001c94:	e7fe      	b.n	8001c94 <MemManage_Handler+0x4>
 8001c96:	bf00      	nop

08001c98 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001c9c:	e7fe      	b.n	8001c9c <BusFault_Handler+0x4>
 8001c9e:	bf00      	nop

08001ca0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001ca4:	e7fe      	b.n	8001ca4 <UsageFault_Handler+0x4>
 8001ca6:	bf00      	nop

08001ca8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001cdc:	4a15      	ldr	r2, [pc, #84]	; (8001d34 <SystemInit+0x5c>)
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <SystemInit+0x5c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce6:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001ce8:	4912      	ldr	r1, [pc, #72]	; (8001d34 <SystemInit+0x5c>)
 8001cea:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <SystemInit+0x5c>)
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <SystemInit+0x60>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001cf4:	4a0f      	ldr	r2, [pc, #60]	; (8001d34 <SystemInit+0x5c>)
 8001cf6:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <SystemInit+0x5c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001cfe:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8001d02:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001d04:	4a0b      	ldr	r2, [pc, #44]	; (8001d34 <SystemInit+0x5c>)
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <SystemInit+0x5c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d0e:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001d10:	4a08      	ldr	r2, [pc, #32]	; (8001d34 <SystemInit+0x5c>)
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <SystemInit+0x5c>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001d1a:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <SystemInit+0x5c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8001d22:	f000 f80d 	bl	8001d40 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <SystemInit+0x64>)
 8001d28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d2c:	609a      	str	r2, [r3, #8]
#endif
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40023800 	.word	0x40023800
 8001d38:	88ffc00c 	.word	0x88ffc00c
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001d4e:	4a41      	ldr	r2, [pc, #260]	; (8001e54 <SetSysClock+0x114>)
 8001d50:	4b40      	ldr	r3, [pc, #256]	; (8001e54 <SetSysClock+0x114>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d58:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001d5a:	4b3e      	ldr	r3, [pc, #248]	; (8001e54 <SetSysClock+0x114>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3301      	adds	r3, #1
 8001d68:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d103      	bne.n	8001d78 <SetSysClock+0x38>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001d76:	d1f0      	bne.n	8001d5a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001d78:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <SetSysClock+0x114>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001d84:	2301      	movs	r3, #1
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	e001      	b.n	8001d8e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d15a      	bne.n	8001e4a <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8001d94:	4a30      	ldr	r2, [pc, #192]	; (8001e58 <SetSysClock+0x118>)
 8001d96:	4b30      	ldr	r3, [pc, #192]	; (8001e58 <SetSysClock+0x118>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f043 0304 	orr.w	r3, r3, #4
 8001d9e:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8001da0:	4a2d      	ldr	r2, [pc, #180]	; (8001e58 <SetSysClock+0x118>)
 8001da2:	4b2d      	ldr	r3, [pc, #180]	; (8001e58 <SetSysClock+0x118>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f043 0302 	orr.w	r3, r3, #2
 8001daa:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8001dac:	4a2a      	ldr	r2, [pc, #168]	; (8001e58 <SetSysClock+0x118>)
 8001dae:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <SetSysClock+0x118>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001db8:	4a26      	ldr	r2, [pc, #152]	; (8001e54 <SetSysClock+0x114>)
 8001dba:	4b26      	ldr	r3, [pc, #152]	; (8001e54 <SetSysClock+0x114>)
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8001dc4:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <SetSysClock+0x11c>)
 8001dc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dca:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8001dcc:	bf00      	nop
 8001dce:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <SetSysClock+0x11c>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f9      	bne.n	8001dce <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001dda:	4a1e      	ldr	r2, [pc, #120]	; (8001e54 <SetSysClock+0x114>)
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <SetSysClock+0x114>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001de2:	4a1c      	ldr	r2, [pc, #112]	; (8001e54 <SetSysClock+0x114>)
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <SetSysClock+0x114>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8001dea:	4a1a      	ldr	r2, [pc, #104]	; (8001e54 <SetSysClock+0x114>)
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <SetSysClock+0x114>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8001df2:	4a18      	ldr	r2, [pc, #96]	; (8001e54 <SetSysClock+0x114>)
 8001df4:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <SetSysClock+0x114>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001dfc:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8001dfe:	4a15      	ldr	r2, [pc, #84]	; (8001e54 <SetSysClock+0x114>)
 8001e00:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <SetSysClock+0x114>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8001e08:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001e0a:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <SetSysClock+0x114>)
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <SetSysClock+0x114>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e14:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001e16:	bf00      	nop
 8001e18:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <SetSysClock+0x114>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0f9      	beq.n	8001e18 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001e24:	4a0b      	ldr	r2, [pc, #44]	; (8001e54 <SetSysClock+0x114>)
 8001e26:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <SetSysClock+0x114>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f023 0303 	bic.w	r3, r3, #3
 8001e2e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001e30:	4a08      	ldr	r2, [pc, #32]	; (8001e54 <SetSysClock+0x114>)
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <SetSysClock+0x114>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f043 0303 	orr.w	r3, r3, #3
 8001e3a:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001e3c:	bf00      	nop
 8001e3e:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <SetSysClock+0x114>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b0c      	cmp	r3, #12
 8001e48:	d1f9      	bne.n	8001e3e <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40023c00 	.word	0x40023c00
 8001e5c:	40007000 	.word	0x40007000

08001e60 <ADC1_IRQHandler>:
uint16_t ADC1_value = 0;
float voltage = 0;
uint8_t sending_format = 0;

void ADC1_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
	if(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) != RESET)
 8001e64:	2102      	movs	r1, #2
 8001e66:	4809      	ldr	r0, [pc, #36]	; (8001e8c <ADC1_IRQHandler+0x2c>)
 8001e68:	f7ff faae 	bl	80013c8 <ADC_GetFlagStatus>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00a      	beq.n	8001e88 <ADC1_IRQHandler+0x28>
	{
		ADC1_value = ADC_GetConversionValue(ADC1);
 8001e72:	4806      	ldr	r0, [pc, #24]	; (8001e8c <ADC1_IRQHandler+0x2c>)
 8001e74:	f7ff fa74 	bl	8001360 <ADC_GetConversionValue>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <ADC1_IRQHandler+0x30>)
 8001e7e:	801a      	strh	r2, [r3, #0]
		ADC_ClearFlag(ADC1, ADC_FLAG_EOC);
 8001e80:	2102      	movs	r1, #2
 8001e82:	4802      	ldr	r0, [pc, #8]	; (8001e8c <ADC1_IRQHandler+0x2c>)
 8001e84:	f7ff faba 	bl	80013fc <ADC_ClearFlag>

	}
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40012400 	.word	0x40012400
 8001e90:	20000582 	.word	0x20000582

08001e94 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
	if(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) != RESET)
 8001e98:	2120      	movs	r1, #32
 8001e9a:	4815      	ldr	r0, [pc, #84]	; (8001ef0 <USART1_IRQHandler+0x5c>)
 8001e9c:	f7ff fe32 	bl	8001b04 <USART_GetFlagStatus>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d015      	beq.n	8001ed2 <USART1_IRQHandler+0x3e>
	{
		USART_ClearFlag(USART1, USART_FLAG_RXNE);
 8001ea6:	2120      	movs	r1, #32
 8001ea8:	4811      	ldr	r0, [pc, #68]	; (8001ef0 <USART1_IRQHandler+0x5c>)
 8001eaa:	f7ff fe47 	bl	8001b3c <USART_ClearFlag>
		received_data = USART_ReceiveData(USART1);
 8001eae:	4810      	ldr	r0, [pc, #64]	; (8001ef0 <USART1_IRQHandler+0x5c>)
 8001eb0:	f7ff fdd0 	bl	8001a54 <USART_ReceiveData>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <USART1_IRQHandler+0x60>)
 8001eba:	801a      	strh	r2, [r3, #0]

        if(received_data == (uint16_t)'m')
 8001ebc:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <USART1_IRQHandler+0x60>)
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	2b6d      	cmp	r3, #109	; 0x6d
 8001ec2:	d106      	bne.n	8001ed2 <USART1_IRQHandler+0x3e>
        {
        	sending_format^=1;
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <USART1_IRQHandler+0x64>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	f083 0301 	eor.w	r3, r3, #1
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <USART1_IRQHandler+0x64>)
 8001ed0:	701a      	strb	r2, [r3, #0]
        }
	}

	if((USART_GetFlagStatus(USART1, USART_FLAG_TC) != RESET) )
 8001ed2:	2140      	movs	r1, #64	; 0x40
 8001ed4:	4806      	ldr	r0, [pc, #24]	; (8001ef0 <USART1_IRQHandler+0x5c>)
 8001ed6:	f7ff fe15 	bl	8001b04 <USART_GetFlagStatus>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <USART1_IRQHandler+0x58>
	{
		send_data();
 8001ee0:	f000 f8da 	bl	8002098 <send_data>

		USART_ClearFlag(USART1, USART_FLAG_TC);
 8001ee4:	2140      	movs	r1, #64	; 0x40
 8001ee6:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <USART1_IRQHandler+0x5c>)
 8001ee8:	f7ff fe28 	bl	8001b3c <USART_ClearFlag>
	}
}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40013800 	.word	0x40013800
 8001ef4:	20000580 	.word	0x20000580
 8001ef8:	20000588 	.word	0x20000588

08001efc <UART1_init>:

void UART1_init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af00      	add	r7, sp, #0
  USART_InitTypeDef USART_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIO clock */       //turning on the needed peripherals
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001f02:	2101      	movs	r1, #1
 8001f04:	2001      	movs	r0, #1
 8001f06:	f7ff fc51 	bl	80017ac <RCC_AHBPeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f10:	f7ff fc6a 	bl	80017e8 <RCC_APB2PeriphClockCmd>

  //choosing peripherals for selected pins
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
 8001f14:	2207      	movs	r2, #7
 8001f16:	2109      	movs	r1, #9
 8001f18:	4824      	ldr	r0, [pc, #144]	; (8001fac <UART1_init+0xb0>)
 8001f1a:	f7ff fb15 	bl	8001548 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);
 8001f1e:	2207      	movs	r2, #7
 8001f20:	210a      	movs	r1, #10
 8001f22:	4822      	ldr	r0, [pc, #136]	; (8001fac <UART1_init+0xb0>)
 8001f24:	f7ff fb10 	bl	8001548 <GPIO_PinAFConfig>

   /* Configure USART Tx and Rx pins */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	727b      	strb	r3, [r7, #9]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001f30:	2300      	movs	r3, #0
 8001f32:	72bb      	strb	r3, [r7, #10]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	72fb      	strb	r3, [r7, #11]
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
 8001f38:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f3c:	607b      	str	r3, [r7, #4]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	4619      	mov	r1, r3
 8001f42:	481a      	ldr	r0, [pc, #104]	; (8001fac <UART1_init+0xb0>)
 8001f44:	f7ff fa6a 	bl	800141c <GPIO_Init>
  //usart configuration
  USART_InitStructure.USART_BaudRate = 9600;
 8001f48:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001f4c:	613b      	str	r3, [r7, #16]
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	82bb      	strh	r3, [r7, #20]
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8001f52:	2300      	movs	r3, #0
 8001f54:	82fb      	strh	r3, [r7, #22]
  USART_InitStructure.USART_Parity = USART_Parity_No;
 8001f56:	2300      	movs	r3, #0
 8001f58:	833b      	strh	r3, [r7, #24]
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	83bb      	strh	r3, [r7, #28]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001f5e:	230c      	movs	r3, #12
 8001f60:	837b      	strh	r3, [r7, #26]
  USART_Init(USART1, &USART_InitStructure);
 8001f62:	f107 0310 	add.w	r3, r7, #16
 8001f66:	4619      	mov	r1, r3
 8001f68:	4811      	ldr	r0, [pc, #68]	; (8001fb0 <UART1_init+0xb4>)
 8001f6a:	f7ff fc8d 	bl	8001888 <USART_Init>

   //configuring interrupts
  /* NVIC configuration */
  /* Configure the Priority Group to 2 bits */
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8001f6e:	f44f 7040 	mov.w	r0, #768	; 0x300
 8001f72:	f7fe ff7d 	bl	8000e70 <NVIC_PriorityGroupConfig>

  /* Enable the USARTx Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 8001f76:	2325      	movs	r3, #37	; 0x25
 8001f78:	733b      	strb	r3, [r7, #12]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 14;
 8001f7a:	230e      	movs	r3, #14
 8001f7c:	737b      	strb	r3, [r7, #13]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	73bb      	strb	r3, [r7, #14]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001f82:	2301      	movs	r3, #1
 8001f84:	73fb      	strb	r3, [r7, #15]
  NVIC_Init(&NVIC_InitStructure);
 8001f86:	f107 030c 	add.w	r3, r7, #12
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe ff82 	bl	8000e94 <NVIC_Init>
  //choosing which event should cause interrupt

  USART_ITConfig(USART1, USART_IT_RXNE | USART_IT_TC, ENABLE);
 8001f90:	2201      	movs	r2, #1
 8001f92:	f240 7127 	movw	r1, #1831	; 0x727
 8001f96:	4806      	ldr	r0, [pc, #24]	; (8001fb0 <UART1_init+0xb4>)
 8001f98:	f7ff fd6c 	bl	8001a74 <USART_ITConfig>
  /* Enable USART */
  USART_Cmd(USART1, ENABLE);
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	4804      	ldr	r0, [pc, #16]	; (8001fb0 <UART1_init+0xb4>)
 8001fa0:	f7ff fd26 	bl	80019f0 <USART_Cmd>
}
 8001fa4:	bf00      	nop
 8001fa6:	3720      	adds	r7, #32
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40020000 	.word	0x40020000
 8001fb0:	40013800 	.word	0x40013800

08001fb4 <adc_init>:

void adc_init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	; 0x28
 8001fb8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	ADC_InitTypeDef ADC_InitStructure;
	/* Enable GPIO clock */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001fba:	2101      	movs	r1, #1
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	f7ff fbf5 	bl	80017ac <RCC_AHBPeriphClockCmd>
	/* Configure ADCx Channel 2 as analog input */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 ;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001fd2:	f107 0320 	add.w	r3, r7, #32
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	482d      	ldr	r0, [pc, #180]	; (8002090 <adc_init+0xdc>)
 8001fda:	f7ff fa1f 	bl	800141c <GPIO_Init>
	/* Enable the HSI oscillator */
	RCC_HSICmd(ENABLE);
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f7ff fafa 	bl	80015d8 <RCC_HSICmd>
	/* Check that HSI oscillator is ready */
	while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
 8001fe4:	bf00      	nop
 8001fe6:	2021      	movs	r0, #33	; 0x21
 8001fe8:	f7ff fc1c 	bl	8001824 <RCC_GetFlagStatus>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f9      	beq.n	8001fe6 <adc_init+0x32>
	/* Enable ADC clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ff8:	f7ff fbf6 	bl	80017e8 <RCC_APB2PeriphClockCmd>
	/* Initialize ADC structure */
	ADC_StructInit(&ADC_InitStructure);
 8001ffc:	f107 0308 	add.w	r3, r7, #8
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe fffb 	bl	8000ffc <ADC_StructInit>
	/* ADC1 configuration */
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8002006:	2300      	movs	r3, #0
 8002008:	60bb      	str	r3, [r7, #8]
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 800200a:	2301      	movs	r3, #1
 800200c:	737b      	strb	r3, [r7, #13]
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
	ADC_InitStructure.ADC_NbrOfConversion = 1;
 8002016:	2301      	movs	r3, #1
 8002018:	773b      	strb	r3, [r7, #28]
	ADC_Init(ADC1, &ADC_InitStructure);
 800201a:	f107 0308 	add.w	r3, r7, #8
 800201e:	4619      	mov	r1, r3
 8002020:	481c      	ldr	r0, [pc, #112]	; (8002094 <adc_init+0xe0>)
 8002022:	f7fe ff97 	bl	8000f54 <ADC_Init>

	/* Enable interrupt */
	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 8002026:	2201      	movs	r2, #1
 8002028:	f240 2105 	movw	r1, #517	; 0x205
 800202c:	4819      	ldr	r0, [pc, #100]	; (8002094 <adc_init+0xe0>)
 800202e:	f7ff f9a3 	bl	8001378 <ADC_ITConfig>
	ADC_ITConfig(ADC1, ADC_IT_OVR, ENABLE);
 8002032:	2201      	movs	r2, #1
 8002034:	f242 011a 	movw	r1, #8218	; 0x201a
 8002038:	4816      	ldr	r0, [pc, #88]	; (8002094 <adc_init+0xe0>)
 800203a:	f7ff f99d 	bl	8001378 <ADC_ITConfig>

	/* ADCx regular channel8 configuration */
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_16Cycles);
 800203e:	2302      	movs	r3, #2
 8002040:	2201      	movs	r2, #1
 8002042:	2101      	movs	r1, #1
 8002044:	4813      	ldr	r0, [pc, #76]	; (8002094 <adc_init+0xe0>)
 8002046:	f7ff f815 	bl	8001074 <ADC_RegularChannelConfig>
	/* Enable the ADC */
	ADC_Cmd(ADC1, ENABLE);
 800204a:	2101      	movs	r1, #1
 800204c:	4811      	ldr	r0, [pc, #68]	; (8002094 <adc_init+0xe0>)
 800204e:	f7fe fff5 	bl	800103c <ADC_Cmd>
	/* Wait until the ADC1 is ready */
	while(ADC_GetFlagStatus(ADC1, ADC_FLAG_ADONS) == RESET)
 8002052:	bf00      	nop
 8002054:	2140      	movs	r1, #64	; 0x40
 8002056:	480f      	ldr	r0, [pc, #60]	; (8002094 <adc_init+0xe0>)
 8002058:	f7ff f9b6 	bl	80013c8 <ADC_GetFlagStatus>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f8      	beq.n	8002054 <adc_init+0xa0>
	{
	}
	/* Start ADC Software Conversion */
	ADC_SoftwareStartConv(ADC1);
 8002062:	480c      	ldr	r0, [pc, #48]	; (8002094 <adc_init+0xe0>)
 8002064:	f7ff f96c 	bl	8001340 <ADC_SoftwareStartConv>

	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8002068:	f44f 7040 	mov.w	r0, #768	; 0x300
 800206c:	f7fe ff00 	bl	8000e70 <NVIC_PriorityGroupConfig>
	NVIC_InitStructure.NVIC_IRQChannel = ADC1_IRQn;
 8002070:	2312      	movs	r3, #18
 8002072:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 15;
 8002074:	230f      	movs	r3, #15
 8002076:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800207c:	2301      	movs	r3, #1
 800207e:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8002080:	1d3b      	adds	r3, r7, #4
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe ff06 	bl	8000e94 <NVIC_Init>
}
 8002088:	bf00      	nop
 800208a:	3728      	adds	r7, #40	; 0x28
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40020000 	.word	0x40020000
 8002094:	40012400 	.word	0x40012400

08002098 <send_data>:

void send_data(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
		if(sending_format)
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <send_data+0x54>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d009      	beq.n	80020b8 <send_data+0x20>
		{
			if(j>=6)
 80020a4:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <send_data+0x58>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b05      	cmp	r3, #5
 80020aa:	dd0e      	ble.n	80020ca <send_data+0x32>
			{
				//buffer with data was sent
				fill_buffer();
 80020ac:	f000 f828 	bl	8002100 <fill_buffer>
				j=0;
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <send_data+0x58>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	e008      	b.n	80020ca <send_data+0x32>
			}
		}
		else
		{
			if(j>=7)
 80020b8:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <send_data+0x58>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b06      	cmp	r3, #6
 80020be:	dd04      	ble.n	80020ca <send_data+0x32>
			{
				//buffer with data was sent
				fill_buffer();
 80020c0:	f000 f81e 	bl	8002100 <fill_buffer>
				j=0;
 80020c4:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <send_data+0x58>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
			}
		}
		USART_SendData(USART1, (uint8_t)Buffer_Data_to_send[j]);
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <send_data+0x58>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a09      	ldr	r2, [pc, #36]	; (80020f4 <send_data+0x5c>)
 80020d0:	5cd3      	ldrb	r3, [r2, r3]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	4619      	mov	r1, r3
 80020d6:	4808      	ldr	r0, [pc, #32]	; (80020f8 <send_data+0x60>)
 80020d8:	f7ff fcaa 	bl	8001a30 <USART_SendData>

		j+=1;
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <send_data+0x58>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	3301      	adds	r3, #1
 80020e2:	4a03      	ldr	r2, [pc, #12]	; (80020f0 <send_data+0x58>)
 80020e4:	6013      	str	r3, [r2, #0]

}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000588 	.word	0x20000588
 80020f0:	2000001c 	.word	0x2000001c
 80020f4:	20000578 	.word	0x20000578
 80020f8:	40013800 	.word	0x40013800
 80020fc:	00000000 	.word	0x00000000

08002100 <fill_buffer>:

void fill_buffer(void)
{
 8002100:	b598      	push	{r3, r4, r7, lr}
 8002102:	af00      	add	r7, sp, #0
	if(sending_format)
 8002104:	4b20      	ldr	r3, [pc, #128]	; (8002188 <fill_buffer+0x88>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d007      	beq.n	800211c <fill_buffer+0x1c>
	{
		sprintf(Buffer_Data_to_send,"%d\r\n",ADC1_value );
 800210c:	4b1f      	ldr	r3, [pc, #124]	; (800218c <fill_buffer+0x8c>)
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	491f      	ldr	r1, [pc, #124]	; (8002190 <fill_buffer+0x90>)
 8002114:	481f      	ldr	r0, [pc, #124]	; (8002194 <fill_buffer+0x94>)
 8002116:	f000 f869 	bl	80021ec <sprintf>
	else
	{
		voltage = ADC1_value/4095.0*3.3;
		sprintf(Buffer_Data_to_send,"%.2fV\r\n",voltage);
	}
}
 800211a:	e028      	b.n	800216e <fill_buffer+0x6e>
	{
		sprintf(Buffer_Data_to_send,"%d\r\n",ADC1_value );
	}
	else
	{
		voltage = ADC1_value/4095.0*3.3;
 800211c:	4b1b      	ldr	r3, [pc, #108]	; (800218c <fill_buffer+0x8c>)
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe f987 	bl	8000434 <__aeabi_i2d>
 8002126:	a314      	add	r3, pc, #80	; (adr r3, 8002178 <fill_buffer+0x78>)
 8002128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212c:	f7fe fb12 	bl	8000754 <__aeabi_ddiv>
 8002130:	4603      	mov	r3, r0
 8002132:	460c      	mov	r4, r1
 8002134:	4618      	mov	r0, r3
 8002136:	4621      	mov	r1, r4
 8002138:	a311      	add	r3, pc, #68	; (adr r3, 8002180 <fill_buffer+0x80>)
 800213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213e:	f7fe f9df 	bl	8000500 <__aeabi_dmul>
 8002142:	4603      	mov	r3, r0
 8002144:	460c      	mov	r4, r1
 8002146:	4618      	mov	r0, r3
 8002148:	4621      	mov	r1, r4
 800214a:	f7fe fcb1 	bl	8000ab0 <__aeabi_d2f>
 800214e:	4602      	mov	r2, r0
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <fill_buffer+0x98>)
 8002152:	601a      	str	r2, [r3, #0]
		sprintf(Buffer_Data_to_send,"%.2fV\r\n",voltage);
 8002154:	4b10      	ldr	r3, [pc, #64]	; (8002198 <fill_buffer+0x98>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe f97d 	bl	8000458 <__aeabi_f2d>
 800215e:	4603      	mov	r3, r0
 8002160:	460c      	mov	r4, r1
 8002162:	461a      	mov	r2, r3
 8002164:	4623      	mov	r3, r4
 8002166:	490d      	ldr	r1, [pc, #52]	; (800219c <fill_buffer+0x9c>)
 8002168:	480a      	ldr	r0, [pc, #40]	; (8002194 <fill_buffer+0x94>)
 800216a:	f000 f83f 	bl	80021ec <sprintf>
	}
}
 800216e:	bf00      	nop
 8002170:	bd98      	pop	{r3, r4, r7, pc}
 8002172:	bf00      	nop
 8002174:	f3af 8000 	nop.w
 8002178:	00000000 	.word	0x00000000
 800217c:	40affe00 	.word	0x40affe00
 8002180:	66666666 	.word	0x66666666
 8002184:	400a6666 	.word	0x400a6666
 8002188:	20000588 	.word	0x20000588
 800218c:	20000582 	.word	0x20000582
 8002190:	08004f98 	.word	0x08004f98
 8002194:	20000578 	.word	0x20000578
 8002198:	20000584 	.word	0x20000584
 800219c:	08004fa0 	.word	0x08004fa0

080021a0 <__libc_init_array>:
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <__libc_init_array+0x3c>)
 80021a2:	b570      	push	{r4, r5, r6, lr}
 80021a4:	461e      	mov	r6, r3
 80021a6:	4c0e      	ldr	r4, [pc, #56]	; (80021e0 <__libc_init_array+0x40>)
 80021a8:	2500      	movs	r5, #0
 80021aa:	1ae4      	subs	r4, r4, r3
 80021ac:	10a4      	asrs	r4, r4, #2
 80021ae:	42a5      	cmp	r5, r4
 80021b0:	d004      	beq.n	80021bc <__libc_init_array+0x1c>
 80021b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021b6:	4798      	blx	r3
 80021b8:	3501      	adds	r5, #1
 80021ba:	e7f8      	b.n	80021ae <__libc_init_array+0xe>
 80021bc:	f002 fede 	bl	8004f7c <_init>
 80021c0:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <__libc_init_array+0x44>)
 80021c2:	4c09      	ldr	r4, [pc, #36]	; (80021e8 <__libc_init_array+0x48>)
 80021c4:	461e      	mov	r6, r3
 80021c6:	1ae4      	subs	r4, r4, r3
 80021c8:	10a4      	asrs	r4, r4, #2
 80021ca:	2500      	movs	r5, #0
 80021cc:	42a5      	cmp	r5, r4
 80021ce:	d004      	beq.n	80021da <__libc_init_array+0x3a>
 80021d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021d4:	4798      	blx	r3
 80021d6:	3501      	adds	r5, #1
 80021d8:	e7f8      	b.n	80021cc <__libc_init_array+0x2c>
 80021da:	bd70      	pop	{r4, r5, r6, pc}
 80021dc:	0800511c 	.word	0x0800511c
 80021e0:	0800511c 	.word	0x0800511c
 80021e4:	0800511c 	.word	0x0800511c
 80021e8:	08005120 	.word	0x08005120

080021ec <sprintf>:
 80021ec:	b40e      	push	{r1, r2, r3}
 80021ee:	b500      	push	{lr}
 80021f0:	f44f 7102 	mov.w	r1, #520	; 0x208
 80021f4:	b09c      	sub	sp, #112	; 0x70
 80021f6:	f8ad 1014 	strh.w	r1, [sp, #20]
 80021fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80021fe:	9104      	str	r1, [sp, #16]
 8002200:	9107      	str	r1, [sp, #28]
 8002202:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002206:	ab1d      	add	r3, sp, #116	; 0x74
 8002208:	9002      	str	r0, [sp, #8]
 800220a:	9006      	str	r0, [sp, #24]
 800220c:	4808      	ldr	r0, [pc, #32]	; (8002230 <sprintf+0x44>)
 800220e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002212:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002216:	6800      	ldr	r0, [r0, #0]
 8002218:	a902      	add	r1, sp, #8
 800221a:	9301      	str	r3, [sp, #4]
 800221c:	f000 f80a 	bl	8002234 <_svfprintf_r>
 8002220:	9b02      	ldr	r3, [sp, #8]
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	b01c      	add	sp, #112	; 0x70
 8002228:	f85d eb04 	ldr.w	lr, [sp], #4
 800222c:	b003      	add	sp, #12
 800222e:	4770      	bx	lr
 8002230:	20000110 	.word	0x20000110

08002234 <_svfprintf_r>:
 8002234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002238:	b0bd      	sub	sp, #244	; 0xf4
 800223a:	468b      	mov	fp, r1
 800223c:	9209      	str	r2, [sp, #36]	; 0x24
 800223e:	461f      	mov	r7, r3
 8002240:	4681      	mov	r9, r0
 8002242:	f001 fdd5 	bl	8003df0 <_localeconv_r>
 8002246:	6803      	ldr	r3, [r0, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	9311      	str	r3, [sp, #68]	; 0x44
 800224c:	f7fd ff98 	bl	8000180 <strlen>
 8002250:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8002254:	900a      	str	r0, [sp, #40]	; 0x28
 8002256:	0619      	lsls	r1, r3, #24
 8002258:	d515      	bpl.n	8002286 <_svfprintf_r+0x52>
 800225a:	f8db 3010 	ldr.w	r3, [fp, #16]
 800225e:	b993      	cbnz	r3, 8002286 <_svfprintf_r+0x52>
 8002260:	2140      	movs	r1, #64	; 0x40
 8002262:	4648      	mov	r0, r9
 8002264:	f001 fdd0 	bl	8003e08 <_malloc_r>
 8002268:	f8cb 0000 	str.w	r0, [fp]
 800226c:	f8cb 0010 	str.w	r0, [fp, #16]
 8002270:	b930      	cbnz	r0, 8002280 <_svfprintf_r+0x4c>
 8002272:	230c      	movs	r3, #12
 8002274:	f8c9 3000 	str.w	r3, [r9]
 8002278:	f04f 30ff 	mov.w	r0, #4294967295
 800227c:	f000 bf8b 	b.w	8003196 <_svfprintf_r+0xf62>
 8002280:	2340      	movs	r3, #64	; 0x40
 8002282:	f8cb 3014 	str.w	r3, [fp, #20]
 8002286:	2300      	movs	r3, #0
 8002288:	ac2c      	add	r4, sp, #176	; 0xb0
 800228a:	941f      	str	r4, [sp, #124]	; 0x7c
 800228c:	9321      	str	r3, [sp, #132]	; 0x84
 800228e:	9320      	str	r3, [sp, #128]	; 0x80
 8002290:	9308      	str	r3, [sp, #32]
 8002292:	930c      	str	r3, [sp, #48]	; 0x30
 8002294:	930d      	str	r3, [sp, #52]	; 0x34
 8002296:	9313      	str	r3, [sp, #76]	; 0x4c
 8002298:	9312      	str	r3, [sp, #72]	; 0x48
 800229a:	930e      	str	r3, [sp, #56]	; 0x38
 800229c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800229e:	462b      	mov	r3, r5
 80022a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80022a4:	b11a      	cbz	r2, 80022ae <_svfprintf_r+0x7a>
 80022a6:	2a25      	cmp	r2, #37	; 0x25
 80022a8:	d001      	beq.n	80022ae <_svfprintf_r+0x7a>
 80022aa:	461d      	mov	r5, r3
 80022ac:	e7f7      	b.n	800229e <_svfprintf_r+0x6a>
 80022ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022b0:	1aee      	subs	r6, r5, r3
 80022b2:	d017      	beq.n	80022e4 <_svfprintf_r+0xb0>
 80022b4:	e884 0048 	stmia.w	r4, {r3, r6}
 80022b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80022ba:	4433      	add	r3, r6
 80022bc:	9321      	str	r3, [sp, #132]	; 0x84
 80022be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80022c0:	3301      	adds	r3, #1
 80022c2:	2b07      	cmp	r3, #7
 80022c4:	9320      	str	r3, [sp, #128]	; 0x80
 80022c6:	dc01      	bgt.n	80022cc <_svfprintf_r+0x98>
 80022c8:	3408      	adds	r4, #8
 80022ca:	e008      	b.n	80022de <_svfprintf_r+0xaa>
 80022cc:	aa1f      	add	r2, sp, #124	; 0x7c
 80022ce:	4659      	mov	r1, fp
 80022d0:	4648      	mov	r0, r9
 80022d2:	f002 fab5 	bl	8004840 <__ssprint_r>
 80022d6:	2800      	cmp	r0, #0
 80022d8:	f040 8622 	bne.w	8002f20 <_svfprintf_r+0xcec>
 80022dc:	ac2c      	add	r4, sp, #176	; 0xb0
 80022de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80022e0:	4433      	add	r3, r6
 80022e2:	930e      	str	r3, [sp, #56]	; 0x38
 80022e4:	782b      	ldrb	r3, [r5, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 8613 	beq.w	8002f12 <_svfprintf_r+0xcde>
 80022ec:	2200      	movs	r2, #0
 80022ee:	1c6b      	adds	r3, r5, #1
 80022f0:	4611      	mov	r1, r2
 80022f2:	4615      	mov	r5, r2
 80022f4:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80022f8:	f04f 3aff 	mov.w	sl, #4294967295
 80022fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80022fe:	200a      	movs	r0, #10
 8002300:	1c5e      	adds	r6, r3, #1
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	9609      	str	r6, [sp, #36]	; 0x24
 8002306:	9306      	str	r3, [sp, #24]
 8002308:	9b06      	ldr	r3, [sp, #24]
 800230a:	3b20      	subs	r3, #32
 800230c:	2b58      	cmp	r3, #88	; 0x58
 800230e:	f200 8259 	bhi.w	80027c4 <_svfprintf_r+0x590>
 8002312:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002316:	005c      	.short	0x005c
 8002318:	02570257 	.word	0x02570257
 800231c:	0257006b 	.word	0x0257006b
 8002320:	02570257 	.word	0x02570257
 8002324:	02570257 	.word	0x02570257
 8002328:	006e0257 	.word	0x006e0257
 800232c:	02570059 	.word	0x02570059
 8002330:	007b0078 	.word	0x007b0078
 8002334:	009f0257 	.word	0x009f0257
 8002338:	00a200a2 	.word	0x00a200a2
 800233c:	00a200a2 	.word	0x00a200a2
 8002340:	00a200a2 	.word	0x00a200a2
 8002344:	00a200a2 	.word	0x00a200a2
 8002348:	025700a2 	.word	0x025700a2
 800234c:	02570257 	.word	0x02570257
 8002350:	02570257 	.word	0x02570257
 8002354:	02570257 	.word	0x02570257
 8002358:	02570257 	.word	0x02570257
 800235c:	00d20257 	.word	0x00d20257
 8002360:	025700fe 	.word	0x025700fe
 8002364:	025700fe 	.word	0x025700fe
 8002368:	02570257 	.word	0x02570257
 800236c:	00b50257 	.word	0x00b50257
 8002370:	02570257 	.word	0x02570257
 8002374:	02570143 	.word	0x02570143
 8002378:	02570257 	.word	0x02570257
 800237c:	02570257 	.word	0x02570257
 8002380:	0257018a 	.word	0x0257018a
 8002384:	00660257 	.word	0x00660257
 8002388:	02570257 	.word	0x02570257
 800238c:	02570257 	.word	0x02570257
 8002390:	02570257 	.word	0x02570257
 8002394:	02570257 	.word	0x02570257
 8002398:	02570257 	.word	0x02570257
 800239c:	006100c9 	.word	0x006100c9
 80023a0:	00fe00fe 	.word	0x00fe00fe
 80023a4:	00b800fe 	.word	0x00b800fe
 80023a8:	02570061 	.word	0x02570061
 80023ac:	00bb0257 	.word	0x00bb0257
 80023b0:	01250257 	.word	0x01250257
 80023b4:	01600145 	.word	0x01600145
 80023b8:	025700c6 	.word	0x025700c6
 80023bc:	02570171 	.word	0x02570171
 80023c0:	0257018c 	.word	0x0257018c
 80023c4:	01a40257 	.word	0x01a40257
 80023c8:	2201      	movs	r2, #1
 80023ca:	212b      	movs	r1, #43	; 0x2b
 80023cc:	e002      	b.n	80023d4 <_svfprintf_r+0x1a0>
 80023ce:	b909      	cbnz	r1, 80023d4 <_svfprintf_r+0x1a0>
 80023d0:	2201      	movs	r2, #1
 80023d2:	2120      	movs	r1, #32
 80023d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023d6:	e793      	b.n	8002300 <_svfprintf_r+0xcc>
 80023d8:	2a00      	cmp	r2, #0
 80023da:	d073      	beq.n	80024c4 <_svfprintf_r+0x290>
 80023dc:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80023e0:	e070      	b.n	80024c4 <_svfprintf_r+0x290>
 80023e2:	b10a      	cbz	r2, 80023e8 <_svfprintf_r+0x1b4>
 80023e4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80023e8:	4ba9      	ldr	r3, [pc, #676]	; (8002690 <_svfprintf_r+0x45c>)
 80023ea:	e13c      	b.n	8002666 <_svfprintf_r+0x432>
 80023ec:	f045 0501 	orr.w	r5, r5, #1
 80023f0:	e7f0      	b.n	80023d4 <_svfprintf_r+0x1a0>
 80023f2:	683e      	ldr	r6, [r7, #0]
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	2e00      	cmp	r6, #0
 80023f8:	960b      	str	r6, [sp, #44]	; 0x2c
 80023fa:	db01      	blt.n	8002400 <_svfprintf_r+0x1cc>
 80023fc:	461f      	mov	r7, r3
 80023fe:	e7e9      	b.n	80023d4 <_svfprintf_r+0x1a0>
 8002400:	461f      	mov	r7, r3
 8002402:	4276      	negs	r6, r6
 8002404:	960b      	str	r6, [sp, #44]	; 0x2c
 8002406:	f045 0504 	orr.w	r5, r5, #4
 800240a:	e7e3      	b.n	80023d4 <_svfprintf_r+0x1a0>
 800240c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800240e:	1c5e      	adds	r6, r3, #1
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b2a      	cmp	r3, #42	; 0x2a
 8002414:	9306      	str	r3, [sp, #24]
 8002416:	d001      	beq.n	800241c <_svfprintf_r+0x1e8>
 8002418:	2300      	movs	r3, #0
 800241a:	e00a      	b.n	8002432 <_svfprintf_r+0x1fe>
 800241c:	f8d7 a000 	ldr.w	sl, [r7]
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	f1ba 0f00 	cmp.w	sl, #0
 8002426:	461f      	mov	r7, r3
 8002428:	9609      	str	r6, [sp, #36]	; 0x24
 800242a:	dad3      	bge.n	80023d4 <_svfprintf_r+0x1a0>
 800242c:	f04f 3aff 	mov.w	sl, #4294967295
 8002430:	e7d0      	b.n	80023d4 <_svfprintf_r+0x1a0>
 8002432:	9609      	str	r6, [sp, #36]	; 0x24
 8002434:	9e06      	ldr	r6, [sp, #24]
 8002436:	3e30      	subs	r6, #48	; 0x30
 8002438:	2e09      	cmp	r6, #9
 800243a:	d808      	bhi.n	800244e <_svfprintf_r+0x21a>
 800243c:	fb00 6303 	mla	r3, r0, r3, r6
 8002440:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002442:	46b6      	mov	lr, r6
 8002444:	f81e 6b01 	ldrb.w	r6, [lr], #1
 8002448:	9606      	str	r6, [sp, #24]
 800244a:	4676      	mov	r6, lr
 800244c:	e7f1      	b.n	8002432 <_svfprintf_r+0x1fe>
 800244e:	ea43 7ae3 	orr.w	sl, r3, r3, asr #31
 8002452:	e759      	b.n	8002308 <_svfprintf_r+0xd4>
 8002454:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002458:	e7bc      	b.n	80023d4 <_svfprintf_r+0x1a0>
 800245a:	2300      	movs	r3, #0
 800245c:	930b      	str	r3, [sp, #44]	; 0x2c
 800245e:	9b06      	ldr	r3, [sp, #24]
 8002460:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8002462:	3b30      	subs	r3, #48	; 0x30
 8002464:	fb00 3306 	mla	r3, r0, r6, r3
 8002468:	930b      	str	r3, [sp, #44]	; 0x2c
 800246a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800246c:	461e      	mov	r6, r3
 800246e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8002472:	9306      	str	r3, [sp, #24]
 8002474:	9b06      	ldr	r3, [sp, #24]
 8002476:	9609      	str	r6, [sp, #36]	; 0x24
 8002478:	3b30      	subs	r3, #48	; 0x30
 800247a:	2b09      	cmp	r3, #9
 800247c:	d9ef      	bls.n	800245e <_svfprintf_r+0x22a>
 800247e:	e743      	b.n	8002308 <_svfprintf_r+0xd4>
 8002480:	f045 0508 	orr.w	r5, r5, #8
 8002484:	e7a6      	b.n	80023d4 <_svfprintf_r+0x1a0>
 8002486:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800248a:	e7a3      	b.n	80023d4 <_svfprintf_r+0x1a0>
 800248c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b6c      	cmp	r3, #108	; 0x6c
 8002492:	d103      	bne.n	800249c <_svfprintf_r+0x268>
 8002494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002496:	3301      	adds	r3, #1
 8002498:	9309      	str	r3, [sp, #36]	; 0x24
 800249a:	e002      	b.n	80024a2 <_svfprintf_r+0x26e>
 800249c:	f045 0510 	orr.w	r5, r5, #16
 80024a0:	e798      	b.n	80023d4 <_svfprintf_r+0x1a0>
 80024a2:	f045 0520 	orr.w	r5, r5, #32
 80024a6:	e795      	b.n	80023d4 <_svfprintf_r+0x1a0>
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	9307      	str	r3, [sp, #28]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	2600      	movs	r6, #0
 80024b0:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80024b4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80024b8:	e193      	b.n	80027e2 <_svfprintf_r+0x5ae>
 80024ba:	b10a      	cbz	r2, 80024c0 <_svfprintf_r+0x28c>
 80024bc:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80024c0:	f045 0510 	orr.w	r5, r5, #16
 80024c4:	06aa      	lsls	r2, r5, #26
 80024c6:	d508      	bpl.n	80024da <_svfprintf_r+0x2a6>
 80024c8:	3707      	adds	r7, #7
 80024ca:	f027 0707 	bic.w	r7, r7, #7
 80024ce:	f107 0308 	add.w	r3, r7, #8
 80024d2:	9307      	str	r3, [sp, #28]
 80024d4:	e9d7 6700 	ldrd	r6, r7, [r7]
 80024d8:	e00e      	b.n	80024f8 <_svfprintf_r+0x2c4>
 80024da:	f015 0f10 	tst.w	r5, #16
 80024de:	f107 0304 	add.w	r3, r7, #4
 80024e2:	d002      	beq.n	80024ea <_svfprintf_r+0x2b6>
 80024e4:	9307      	str	r3, [sp, #28]
 80024e6:	683e      	ldr	r6, [r7, #0]
 80024e8:	e005      	b.n	80024f6 <_svfprintf_r+0x2c2>
 80024ea:	683e      	ldr	r6, [r7, #0]
 80024ec:	f015 0f40 	tst.w	r5, #64	; 0x40
 80024f0:	9307      	str	r3, [sp, #28]
 80024f2:	bf18      	it	ne
 80024f4:	b236      	sxthne	r6, r6
 80024f6:	17f7      	asrs	r7, r6, #31
 80024f8:	2e00      	cmp	r6, #0
 80024fa:	f177 0300 	sbcs.w	r3, r7, #0
 80024fe:	f280 80e2 	bge.w	80026c6 <_svfprintf_r+0x492>
 8002502:	4276      	negs	r6, r6
 8002504:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8002508:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800250c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002510:	e0d9      	b.n	80026c6 <_svfprintf_r+0x492>
 8002512:	b10a      	cbz	r2, 8002518 <_svfprintf_r+0x2e4>
 8002514:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8002518:	3707      	adds	r7, #7
 800251a:	f027 0707 	bic.w	r7, r7, #7
 800251e:	f107 0308 	add.w	r3, r7, #8
 8002522:	9307      	str	r3, [sp, #28]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	f04f 32ff 	mov.w	r2, #4294967295
 800252a:	930c      	str	r3, [sp, #48]	; 0x30
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8002530:	930d      	str	r3, [sp, #52]	; 0x34
 8002532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002534:	4638      	mov	r0, r7
 8002536:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 800253a:	4631      	mov	r1, r6
 800253c:	4b55      	ldr	r3, [pc, #340]	; (8002694 <_svfprintf_r+0x460>)
 800253e:	f7fe fa79 	bl	8000a34 <__aeabi_dcmpun>
 8002542:	2800      	cmp	r0, #0
 8002544:	f040 84f6 	bne.w	8002f34 <_svfprintf_r+0xd00>
 8002548:	f04f 32ff 	mov.w	r2, #4294967295
 800254c:	4b51      	ldr	r3, [pc, #324]	; (8002694 <_svfprintf_r+0x460>)
 800254e:	4638      	mov	r0, r7
 8002550:	4631      	mov	r1, r6
 8002552:	f7fe fa51 	bl	80009f8 <__aeabi_dcmple>
 8002556:	2800      	cmp	r0, #0
 8002558:	f040 84ec 	bne.w	8002f34 <_svfprintf_r+0xd00>
 800255c:	f000 be04 	b.w	8003168 <_svfprintf_r+0xf34>
 8002560:	b10a      	cbz	r2, 8002566 <_svfprintf_r+0x332>
 8002562:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8002566:	f015 0f20 	tst.w	r5, #32
 800256a:	f107 0304 	add.w	r3, r7, #4
 800256e:	d007      	beq.n	8002580 <_svfprintf_r+0x34c>
 8002570:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	17ce      	asrs	r6, r1, #31
 8002576:	4608      	mov	r0, r1
 8002578:	4631      	mov	r1, r6
 800257a:	e9c2 0100 	strd	r0, r1, [r2]
 800257e:	e00b      	b.n	8002598 <_svfprintf_r+0x364>
 8002580:	06e9      	lsls	r1, r5, #27
 8002582:	d406      	bmi.n	8002592 <_svfprintf_r+0x35e>
 8002584:	066a      	lsls	r2, r5, #25
 8002586:	d504      	bpl.n	8002592 <_svfprintf_r+0x35e>
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 800258e:	8011      	strh	r1, [r2, #0]
 8002590:	e002      	b.n	8002598 <_svfprintf_r+0x364>
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002596:	6011      	str	r1, [r2, #0]
 8002598:	461f      	mov	r7, r3
 800259a:	e67f      	b.n	800229c <_svfprintf_r+0x68>
 800259c:	f045 0510 	orr.w	r5, r5, #16
 80025a0:	f015 0320 	ands.w	r3, r5, #32
 80025a4:	d009      	beq.n	80025ba <_svfprintf_r+0x386>
 80025a6:	3707      	adds	r7, #7
 80025a8:	f027 0707 	bic.w	r7, r7, #7
 80025ac:	f107 0308 	add.w	r3, r7, #8
 80025b0:	9307      	str	r3, [sp, #28]
 80025b2:	e9d7 6700 	ldrd	r6, r7, [r7]
 80025b6:	2300      	movs	r3, #0
 80025b8:	e081      	b.n	80026be <_svfprintf_r+0x48a>
 80025ba:	1d3a      	adds	r2, r7, #4
 80025bc:	f015 0110 	ands.w	r1, r5, #16
 80025c0:	9207      	str	r2, [sp, #28]
 80025c2:	d105      	bne.n	80025d0 <_svfprintf_r+0x39c>
 80025c4:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80025c8:	d002      	beq.n	80025d0 <_svfprintf_r+0x39c>
 80025ca:	883e      	ldrh	r6, [r7, #0]
 80025cc:	2700      	movs	r7, #0
 80025ce:	e7f2      	b.n	80025b6 <_svfprintf_r+0x382>
 80025d0:	683e      	ldr	r6, [r7, #0]
 80025d2:	2700      	movs	r7, #0
 80025d4:	e073      	b.n	80026be <_svfprintf_r+0x48a>
 80025d6:	1d3b      	adds	r3, r7, #4
 80025d8:	9307      	str	r3, [sp, #28]
 80025da:	2330      	movs	r3, #48	; 0x30
 80025dc:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80025e0:	4b2d      	ldr	r3, [pc, #180]	; (8002698 <_svfprintf_r+0x464>)
 80025e2:	2278      	movs	r2, #120	; 0x78
 80025e4:	683e      	ldr	r6, [r7, #0]
 80025e6:	9313      	str	r3, [sp, #76]	; 0x4c
 80025e8:	2700      	movs	r7, #0
 80025ea:	f045 0502 	orr.w	r5, r5, #2
 80025ee:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 80025f2:	2302      	movs	r3, #2
 80025f4:	9206      	str	r2, [sp, #24]
 80025f6:	e062      	b.n	80026be <_svfprintf_r+0x48a>
 80025f8:	2600      	movs	r6, #0
 80025fa:	1d3b      	adds	r3, r7, #4
 80025fc:	45b2      	cmp	sl, r6
 80025fe:	9307      	str	r3, [sp, #28]
 8002600:	f8d7 8000 	ldr.w	r8, [r7]
 8002604:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8002608:	db0a      	blt.n	8002620 <_svfprintf_r+0x3ec>
 800260a:	4652      	mov	r2, sl
 800260c:	4631      	mov	r1, r6
 800260e:	4640      	mov	r0, r8
 8002610:	f001 fe16 	bl	8004240 <memchr>
 8002614:	2800      	cmp	r0, #0
 8002616:	f000 80ea 	beq.w	80027ee <_svfprintf_r+0x5ba>
 800261a:	ebc8 0a00 	rsb	sl, r8, r0
 800261e:	e0e7      	b.n	80027f0 <_svfprintf_r+0x5bc>
 8002620:	4640      	mov	r0, r8
 8002622:	f7fd fdad 	bl	8000180 <strlen>
 8002626:	4682      	mov	sl, r0
 8002628:	e0e2      	b.n	80027f0 <_svfprintf_r+0x5bc>
 800262a:	f045 0510 	orr.w	r5, r5, #16
 800262e:	06ae      	lsls	r6, r5, #26
 8002630:	d508      	bpl.n	8002644 <_svfprintf_r+0x410>
 8002632:	3707      	adds	r7, #7
 8002634:	f027 0707 	bic.w	r7, r7, #7
 8002638:	f107 0308 	add.w	r3, r7, #8
 800263c:	9307      	str	r3, [sp, #28]
 800263e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002642:	e00a      	b.n	800265a <_svfprintf_r+0x426>
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	f015 0f10 	tst.w	r5, #16
 800264a:	9307      	str	r3, [sp, #28]
 800264c:	d103      	bne.n	8002656 <_svfprintf_r+0x422>
 800264e:	0668      	lsls	r0, r5, #25
 8002650:	d501      	bpl.n	8002656 <_svfprintf_r+0x422>
 8002652:	883e      	ldrh	r6, [r7, #0]
 8002654:	e000      	b.n	8002658 <_svfprintf_r+0x424>
 8002656:	683e      	ldr	r6, [r7, #0]
 8002658:	2700      	movs	r7, #0
 800265a:	2301      	movs	r3, #1
 800265c:	e02f      	b.n	80026be <_svfprintf_r+0x48a>
 800265e:	b10a      	cbz	r2, 8002664 <_svfprintf_r+0x430>
 8002660:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <_svfprintf_r+0x464>)
 8002666:	06a9      	lsls	r1, r5, #26
 8002668:	9313      	str	r3, [sp, #76]	; 0x4c
 800266a:	d508      	bpl.n	800267e <_svfprintf_r+0x44a>
 800266c:	3707      	adds	r7, #7
 800266e:	f027 0707 	bic.w	r7, r7, #7
 8002672:	f107 0308 	add.w	r3, r7, #8
 8002676:	9307      	str	r3, [sp, #28]
 8002678:	e9d7 6700 	ldrd	r6, r7, [r7]
 800267c:	e010      	b.n	80026a0 <_svfprintf_r+0x46c>
 800267e:	1d3b      	adds	r3, r7, #4
 8002680:	f015 0f10 	tst.w	r5, #16
 8002684:	9307      	str	r3, [sp, #28]
 8002686:	d109      	bne.n	800269c <_svfprintf_r+0x468>
 8002688:	066a      	lsls	r2, r5, #25
 800268a:	d507      	bpl.n	800269c <_svfprintf_r+0x468>
 800268c:	883e      	ldrh	r6, [r7, #0]
 800268e:	e006      	b.n	800269e <_svfprintf_r+0x46a>
 8002690:	08004fc8 	.word	0x08004fc8
 8002694:	7fefffff 	.word	0x7fefffff
 8002698:	08004fd9 	.word	0x08004fd9
 800269c:	683e      	ldr	r6, [r7, #0]
 800269e:	2700      	movs	r7, #0
 80026a0:	07eb      	lsls	r3, r5, #31
 80026a2:	d50b      	bpl.n	80026bc <_svfprintf_r+0x488>
 80026a4:	ea56 0307 	orrs.w	r3, r6, r7
 80026a8:	d008      	beq.n	80026bc <_svfprintf_r+0x488>
 80026aa:	2330      	movs	r3, #48	; 0x30
 80026ac:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80026b0:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80026b4:	f045 0502 	orr.w	r5, r5, #2
 80026b8:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 80026bc:	2302      	movs	r3, #2
 80026be:	2200      	movs	r2, #0
 80026c0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80026c4:	e000      	b.n	80026c8 <_svfprintf_r+0x494>
 80026c6:	2301      	movs	r3, #1
 80026c8:	f1ba 0f00 	cmp.w	sl, #0
 80026cc:	f2c0 855d 	blt.w	800318a <_svfprintf_r+0xf56>
 80026d0:	ea56 0207 	orrs.w	r2, r6, r7
 80026d4:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 80026d8:	d103      	bne.n	80026e2 <_svfprintf_r+0x4ae>
 80026da:	f1ba 0f00 	cmp.w	sl, #0
 80026de:	d05f      	beq.n	80027a0 <_svfprintf_r+0x56c>
 80026e0:	e006      	b.n	80026f0 <_svfprintf_r+0x4bc>
 80026e2:	460d      	mov	r5, r1
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d025      	beq.n	8002734 <_svfprintf_r+0x500>
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d046      	beq.n	800277a <_svfprintf_r+0x546>
 80026ec:	4629      	mov	r1, r5
 80026ee:	e007      	b.n	8002700 <_svfprintf_r+0x4cc>
 80026f0:	460d      	mov	r5, r1
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d022      	beq.n	800273c <_svfprintf_r+0x508>
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d03d      	beq.n	8002776 <_svfprintf_r+0x542>
 80026fa:	4629      	mov	r1, r5
 80026fc:	2600      	movs	r6, #0
 80026fe:	2700      	movs	r7, #0
 8002700:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8002704:	08f2      	lsrs	r2, r6, #3
 8002706:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 800270a:	08f8      	lsrs	r0, r7, #3
 800270c:	f006 0307 	and.w	r3, r6, #7
 8002710:	4607      	mov	r7, r0
 8002712:	4616      	mov	r6, r2
 8002714:	3330      	adds	r3, #48	; 0x30
 8002716:	ea56 0207 	orrs.w	r2, r6, r7
 800271a:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800271e:	d1f1      	bne.n	8002704 <_svfprintf_r+0x4d0>
 8002720:	07e8      	lsls	r0, r5, #31
 8002722:	d548      	bpl.n	80027b6 <_svfprintf_r+0x582>
 8002724:	2b30      	cmp	r3, #48	; 0x30
 8002726:	d046      	beq.n	80027b6 <_svfprintf_r+0x582>
 8002728:	2330      	movs	r3, #48	; 0x30
 800272a:	f808 3c01 	strb.w	r3, [r8, #-1]
 800272e:	f108 38ff 	add.w	r8, r8, #4294967295
 8002732:	e040      	b.n	80027b6 <_svfprintf_r+0x582>
 8002734:	2f00      	cmp	r7, #0
 8002736:	bf08      	it	eq
 8002738:	2e0a      	cmpeq	r6, #10
 800273a:	d205      	bcs.n	8002748 <_svfprintf_r+0x514>
 800273c:	3630      	adds	r6, #48	; 0x30
 800273e:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8002742:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8002746:	e029      	b.n	800279c <_svfprintf_r+0x568>
 8002748:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800274c:	4630      	mov	r0, r6
 800274e:	4639      	mov	r1, r7
 8002750:	220a      	movs	r2, #10
 8002752:	2300      	movs	r3, #0
 8002754:	f7fe f9fc 	bl	8000b50 <__aeabi_uldivmod>
 8002758:	3230      	adds	r2, #48	; 0x30
 800275a:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800275e:	2300      	movs	r3, #0
 8002760:	4630      	mov	r0, r6
 8002762:	4639      	mov	r1, r7
 8002764:	220a      	movs	r2, #10
 8002766:	f7fe f9f3 	bl	8000b50 <__aeabi_uldivmod>
 800276a:	4606      	mov	r6, r0
 800276c:	460f      	mov	r7, r1
 800276e:	ea56 0307 	orrs.w	r3, r6, r7
 8002772:	d1eb      	bne.n	800274c <_svfprintf_r+0x518>
 8002774:	e012      	b.n	800279c <_svfprintf_r+0x568>
 8002776:	2600      	movs	r6, #0
 8002778:	2700      	movs	r7, #0
 800277a:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800277e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8002780:	f006 030f 	and.w	r3, r6, #15
 8002784:	5cd3      	ldrb	r3, [r2, r3]
 8002786:	093a      	lsrs	r2, r7, #4
 8002788:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800278c:	0933      	lsrs	r3, r6, #4
 800278e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8002792:	461e      	mov	r6, r3
 8002794:	4617      	mov	r7, r2
 8002796:	ea56 0307 	orrs.w	r3, r6, r7
 800279a:	d1f0      	bne.n	800277e <_svfprintf_r+0x54a>
 800279c:	4629      	mov	r1, r5
 800279e:	e00a      	b.n	80027b6 <_svfprintf_r+0x582>
 80027a0:	b93b      	cbnz	r3, 80027b2 <_svfprintf_r+0x57e>
 80027a2:	07ea      	lsls	r2, r5, #31
 80027a4:	d505      	bpl.n	80027b2 <_svfprintf_r+0x57e>
 80027a6:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80027aa:	2330      	movs	r3, #48	; 0x30
 80027ac:	f808 3d41 	strb.w	r3, [r8, #-65]!
 80027b0:	e001      	b.n	80027b6 <_svfprintf_r+0x582>
 80027b2:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80027b6:	ab2c      	add	r3, sp, #176	; 0xb0
 80027b8:	4656      	mov	r6, sl
 80027ba:	460d      	mov	r5, r1
 80027bc:	ebc8 0a03 	rsb	sl, r8, r3
 80027c0:	2700      	movs	r7, #0
 80027c2:	e016      	b.n	80027f2 <_svfprintf_r+0x5be>
 80027c4:	b10a      	cbz	r2, 80027ca <_svfprintf_r+0x596>
 80027c6:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80027ca:	9b06      	ldr	r3, [sp, #24]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 83a0 	beq.w	8002f12 <_svfprintf_r+0xcde>
 80027d2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80027d6:	2600      	movs	r6, #0
 80027d8:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80027dc:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80027e0:	9707      	str	r7, [sp, #28]
 80027e2:	f04f 0a01 	mov.w	sl, #1
 80027e6:	4637      	mov	r7, r6
 80027e8:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 80027ec:	e001      	b.n	80027f2 <_svfprintf_r+0x5be>
 80027ee:	4606      	mov	r6, r0
 80027f0:	4637      	mov	r7, r6
 80027f2:	4556      	cmp	r6, sl
 80027f4:	4633      	mov	r3, r6
 80027f6:	bfb8      	it	lt
 80027f8:	4653      	movlt	r3, sl
 80027fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80027fc:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8002800:	b113      	cbz	r3, 8002808 <_svfprintf_r+0x5d4>
 8002802:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002804:	3301      	adds	r3, #1
 8002806:	930f      	str	r3, [sp, #60]	; 0x3c
 8002808:	f015 0302 	ands.w	r3, r5, #2
 800280c:	9314      	str	r3, [sp, #80]	; 0x50
 800280e:	bf1e      	ittt	ne
 8002810:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 8002812:	3302      	addne	r3, #2
 8002814:	930f      	strne	r3, [sp, #60]	; 0x3c
 8002816:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800281a:	9315      	str	r3, [sp, #84]	; 0x54
 800281c:	d139      	bne.n	8002892 <_svfprintf_r+0x65e>
 800281e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002820:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002822:	1a9b      	subs	r3, r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	9310      	str	r3, [sp, #64]	; 0x40
 8002828:	dd33      	ble.n	8002892 <_svfprintf_r+0x65e>
 800282a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800282c:	2b10      	cmp	r3, #16
 800282e:	4ba3      	ldr	r3, [pc, #652]	; (8002abc <_svfprintf_r+0x888>)
 8002830:	6023      	str	r3, [r4, #0]
 8002832:	dd18      	ble.n	8002866 <_svfprintf_r+0x632>
 8002834:	2310      	movs	r3, #16
 8002836:	6063      	str	r3, [r4, #4]
 8002838:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800283a:	3310      	adds	r3, #16
 800283c:	9321      	str	r3, [sp, #132]	; 0x84
 800283e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002840:	3301      	adds	r3, #1
 8002842:	2b07      	cmp	r3, #7
 8002844:	9320      	str	r3, [sp, #128]	; 0x80
 8002846:	dc01      	bgt.n	800284c <_svfprintf_r+0x618>
 8002848:	3408      	adds	r4, #8
 800284a:	e008      	b.n	800285e <_svfprintf_r+0x62a>
 800284c:	aa1f      	add	r2, sp, #124	; 0x7c
 800284e:	4659      	mov	r1, fp
 8002850:	4648      	mov	r0, r9
 8002852:	f001 fff5 	bl	8004840 <__ssprint_r>
 8002856:	2800      	cmp	r0, #0
 8002858:	f040 8362 	bne.w	8002f20 <_svfprintf_r+0xcec>
 800285c:	ac2c      	add	r4, sp, #176	; 0xb0
 800285e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002860:	3b10      	subs	r3, #16
 8002862:	9310      	str	r3, [sp, #64]	; 0x40
 8002864:	e7e1      	b.n	800282a <_svfprintf_r+0x5f6>
 8002866:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002868:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800286a:	6063      	str	r3, [r4, #4]
 800286c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800286e:	4413      	add	r3, r2
 8002870:	9321      	str	r3, [sp, #132]	; 0x84
 8002872:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002874:	3301      	adds	r3, #1
 8002876:	2b07      	cmp	r3, #7
 8002878:	9320      	str	r3, [sp, #128]	; 0x80
 800287a:	dc01      	bgt.n	8002880 <_svfprintf_r+0x64c>
 800287c:	3408      	adds	r4, #8
 800287e:	e008      	b.n	8002892 <_svfprintf_r+0x65e>
 8002880:	aa1f      	add	r2, sp, #124	; 0x7c
 8002882:	4659      	mov	r1, fp
 8002884:	4648      	mov	r0, r9
 8002886:	f001 ffdb 	bl	8004840 <__ssprint_r>
 800288a:	2800      	cmp	r0, #0
 800288c:	f040 8348 	bne.w	8002f20 <_svfprintf_r+0xcec>
 8002890:	ac2c      	add	r4, sp, #176	; 0xb0
 8002892:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8002896:	b1bb      	cbz	r3, 80028c8 <_svfprintf_r+0x694>
 8002898:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 800289c:	6023      	str	r3, [r4, #0]
 800289e:	2301      	movs	r3, #1
 80028a0:	6063      	str	r3, [r4, #4]
 80028a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80028a4:	3301      	adds	r3, #1
 80028a6:	9321      	str	r3, [sp, #132]	; 0x84
 80028a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80028aa:	3301      	adds	r3, #1
 80028ac:	2b07      	cmp	r3, #7
 80028ae:	9320      	str	r3, [sp, #128]	; 0x80
 80028b0:	dc01      	bgt.n	80028b6 <_svfprintf_r+0x682>
 80028b2:	3408      	adds	r4, #8
 80028b4:	e008      	b.n	80028c8 <_svfprintf_r+0x694>
 80028b6:	aa1f      	add	r2, sp, #124	; 0x7c
 80028b8:	4659      	mov	r1, fp
 80028ba:	4648      	mov	r0, r9
 80028bc:	f001 ffc0 	bl	8004840 <__ssprint_r>
 80028c0:	2800      	cmp	r0, #0
 80028c2:	f040 832d 	bne.w	8002f20 <_svfprintf_r+0xcec>
 80028c6:	ac2c      	add	r4, sp, #176	; 0xb0
 80028c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80028ca:	b1b3      	cbz	r3, 80028fa <_svfprintf_r+0x6c6>
 80028cc:	ab18      	add	r3, sp, #96	; 0x60
 80028ce:	6023      	str	r3, [r4, #0]
 80028d0:	2302      	movs	r3, #2
 80028d2:	6063      	str	r3, [r4, #4]
 80028d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80028d6:	3302      	adds	r3, #2
 80028d8:	9321      	str	r3, [sp, #132]	; 0x84
 80028da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80028dc:	3301      	adds	r3, #1
 80028de:	2b07      	cmp	r3, #7
 80028e0:	9320      	str	r3, [sp, #128]	; 0x80
 80028e2:	dc01      	bgt.n	80028e8 <_svfprintf_r+0x6b4>
 80028e4:	3408      	adds	r4, #8
 80028e6:	e008      	b.n	80028fa <_svfprintf_r+0x6c6>
 80028e8:	aa1f      	add	r2, sp, #124	; 0x7c
 80028ea:	4659      	mov	r1, fp
 80028ec:	4648      	mov	r0, r9
 80028ee:	f001 ffa7 	bl	8004840 <__ssprint_r>
 80028f2:	2800      	cmp	r0, #0
 80028f4:	f040 8314 	bne.w	8002f20 <_svfprintf_r+0xcec>
 80028f8:	ac2c      	add	r4, sp, #176	; 0xb0
 80028fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80028fc:	2b80      	cmp	r3, #128	; 0x80
 80028fe:	d139      	bne.n	8002974 <_svfprintf_r+0x740>
 8002900:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002902:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	2b00      	cmp	r3, #0
 8002908:	9310      	str	r3, [sp, #64]	; 0x40
 800290a:	dd33      	ble.n	8002974 <_svfprintf_r+0x740>
 800290c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800290e:	2b10      	cmp	r3, #16
 8002910:	4b6b      	ldr	r3, [pc, #428]	; (8002ac0 <_svfprintf_r+0x88c>)
 8002912:	6023      	str	r3, [r4, #0]
 8002914:	dd18      	ble.n	8002948 <_svfprintf_r+0x714>
 8002916:	2310      	movs	r3, #16
 8002918:	6063      	str	r3, [r4, #4]
 800291a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800291c:	3310      	adds	r3, #16
 800291e:	9321      	str	r3, [sp, #132]	; 0x84
 8002920:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002922:	3301      	adds	r3, #1
 8002924:	2b07      	cmp	r3, #7
 8002926:	9320      	str	r3, [sp, #128]	; 0x80
 8002928:	dc01      	bgt.n	800292e <_svfprintf_r+0x6fa>
 800292a:	3408      	adds	r4, #8
 800292c:	e008      	b.n	8002940 <_svfprintf_r+0x70c>
 800292e:	aa1f      	add	r2, sp, #124	; 0x7c
 8002930:	4659      	mov	r1, fp
 8002932:	4648      	mov	r0, r9
 8002934:	f001 ff84 	bl	8004840 <__ssprint_r>
 8002938:	2800      	cmp	r0, #0
 800293a:	f040 82f1 	bne.w	8002f20 <_svfprintf_r+0xcec>
 800293e:	ac2c      	add	r4, sp, #176	; 0xb0
 8002940:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002942:	3b10      	subs	r3, #16
 8002944:	9310      	str	r3, [sp, #64]	; 0x40
 8002946:	e7e1      	b.n	800290c <_svfprintf_r+0x6d8>
 8002948:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800294a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800294c:	6063      	str	r3, [r4, #4]
 800294e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002950:	4413      	add	r3, r2
 8002952:	9321      	str	r3, [sp, #132]	; 0x84
 8002954:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002956:	3301      	adds	r3, #1
 8002958:	2b07      	cmp	r3, #7
 800295a:	9320      	str	r3, [sp, #128]	; 0x80
 800295c:	dc01      	bgt.n	8002962 <_svfprintf_r+0x72e>
 800295e:	3408      	adds	r4, #8
 8002960:	e008      	b.n	8002974 <_svfprintf_r+0x740>
 8002962:	aa1f      	add	r2, sp, #124	; 0x7c
 8002964:	4659      	mov	r1, fp
 8002966:	4648      	mov	r0, r9
 8002968:	f001 ff6a 	bl	8004840 <__ssprint_r>
 800296c:	2800      	cmp	r0, #0
 800296e:	f040 82d7 	bne.w	8002f20 <_svfprintf_r+0xcec>
 8002972:	ac2c      	add	r4, sp, #176	; 0xb0
 8002974:	ebca 0606 	rsb	r6, sl, r6
 8002978:	2e00      	cmp	r6, #0
 800297a:	dd2e      	ble.n	80029da <_svfprintf_r+0x7a6>
 800297c:	4b50      	ldr	r3, [pc, #320]	; (8002ac0 <_svfprintf_r+0x88c>)
 800297e:	2e10      	cmp	r6, #16
 8002980:	6023      	str	r3, [r4, #0]
 8002982:	dd16      	ble.n	80029b2 <_svfprintf_r+0x77e>
 8002984:	2310      	movs	r3, #16
 8002986:	6063      	str	r3, [r4, #4]
 8002988:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800298a:	3310      	adds	r3, #16
 800298c:	9321      	str	r3, [sp, #132]	; 0x84
 800298e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002990:	3301      	adds	r3, #1
 8002992:	2b07      	cmp	r3, #7
 8002994:	9320      	str	r3, [sp, #128]	; 0x80
 8002996:	dc01      	bgt.n	800299c <_svfprintf_r+0x768>
 8002998:	3408      	adds	r4, #8
 800299a:	e008      	b.n	80029ae <_svfprintf_r+0x77a>
 800299c:	aa1f      	add	r2, sp, #124	; 0x7c
 800299e:	4659      	mov	r1, fp
 80029a0:	4648      	mov	r0, r9
 80029a2:	f001 ff4d 	bl	8004840 <__ssprint_r>
 80029a6:	2800      	cmp	r0, #0
 80029a8:	f040 82ba 	bne.w	8002f20 <_svfprintf_r+0xcec>
 80029ac:	ac2c      	add	r4, sp, #176	; 0xb0
 80029ae:	3e10      	subs	r6, #16
 80029b0:	e7e4      	b.n	800297c <_svfprintf_r+0x748>
 80029b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80029b4:	9821      	ldr	r0, [sp, #132]	; 0x84
 80029b6:	3301      	adds	r3, #1
 80029b8:	6066      	str	r6, [r4, #4]
 80029ba:	2b07      	cmp	r3, #7
 80029bc:	4406      	add	r6, r0
 80029be:	9621      	str	r6, [sp, #132]	; 0x84
 80029c0:	9320      	str	r3, [sp, #128]	; 0x80
 80029c2:	dc01      	bgt.n	80029c8 <_svfprintf_r+0x794>
 80029c4:	3408      	adds	r4, #8
 80029c6:	e008      	b.n	80029da <_svfprintf_r+0x7a6>
 80029c8:	aa1f      	add	r2, sp, #124	; 0x7c
 80029ca:	4659      	mov	r1, fp
 80029cc:	4648      	mov	r0, r9
 80029ce:	f001 ff37 	bl	8004840 <__ssprint_r>
 80029d2:	2800      	cmp	r0, #0
 80029d4:	f040 82a4 	bne.w	8002f20 <_svfprintf_r+0xcec>
 80029d8:	ac2c      	add	r4, sp, #176	; 0xb0
 80029da:	05eb      	lsls	r3, r5, #23
 80029dc:	d414      	bmi.n	8002a08 <_svfprintf_r+0x7d4>
 80029de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80029e0:	e884 0500 	stmia.w	r4, {r8, sl}
 80029e4:	4453      	add	r3, sl
 80029e6:	9321      	str	r3, [sp, #132]	; 0x84
 80029e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80029ea:	3301      	adds	r3, #1
 80029ec:	2b07      	cmp	r3, #7
 80029ee:	9320      	str	r3, [sp, #128]	; 0x80
 80029f0:	f340 8245 	ble.w	8002e7e <_svfprintf_r+0xc4a>
 80029f4:	aa1f      	add	r2, sp, #124	; 0x7c
 80029f6:	4659      	mov	r1, fp
 80029f8:	4648      	mov	r0, r9
 80029fa:	f001 ff21 	bl	8004840 <__ssprint_r>
 80029fe:	2800      	cmp	r0, #0
 8002a00:	f040 828e 	bne.w	8002f20 <_svfprintf_r+0xcec>
 8002a04:	ac2c      	add	r4, sp, #176	; 0xb0
 8002a06:	e23b      	b.n	8002e80 <_svfprintf_r+0xc4c>
 8002a08:	9b06      	ldr	r3, [sp, #24]
 8002a0a:	2b65      	cmp	r3, #101	; 0x65
 8002a0c:	f340 81ae 	ble.w	8002d6c <_svfprintf_r+0xb38>
 8002a10:	2200      	movs	r2, #0
 8002a12:	2300      	movs	r3, #0
 8002a14:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002a16:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002a18:	f7fd ffda 	bl	80009d0 <__aeabi_dcmpeq>
 8002a1c:	2800      	cmp	r0, #0
 8002a1e:	d05e      	beq.n	8002ade <_svfprintf_r+0x8aa>
 8002a20:	4b28      	ldr	r3, [pc, #160]	; (8002ac4 <_svfprintf_r+0x890>)
 8002a22:	6023      	str	r3, [r4, #0]
 8002a24:	2301      	movs	r3, #1
 8002a26:	6063      	str	r3, [r4, #4]
 8002a28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	9321      	str	r3, [sp, #132]	; 0x84
 8002a2e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002a30:	3301      	adds	r3, #1
 8002a32:	2b07      	cmp	r3, #7
 8002a34:	9320      	str	r3, [sp, #128]	; 0x80
 8002a36:	dc01      	bgt.n	8002a3c <_svfprintf_r+0x808>
 8002a38:	3408      	adds	r4, #8
 8002a3a:	e008      	b.n	8002a4e <_svfprintf_r+0x81a>
 8002a3c:	aa1f      	add	r2, sp, #124	; 0x7c
 8002a3e:	4659      	mov	r1, fp
 8002a40:	4648      	mov	r0, r9
 8002a42:	f001 fefd 	bl	8004840 <__ssprint_r>
 8002a46:	2800      	cmp	r0, #0
 8002a48:	f040 826a 	bne.w	8002f20 <_svfprintf_r+0xcec>
 8002a4c:	ac2c      	add	r4, sp, #176	; 0xb0
 8002a4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002a50:	9a08      	ldr	r2, [sp, #32]
 8002a52:	4293      	cmp	r3, r2
 8002a54:	db02      	blt.n	8002a5c <_svfprintf_r+0x828>
 8002a56:	07ee      	lsls	r6, r5, #31
 8002a58:	f140 8212 	bpl.w	8002e80 <_svfprintf_r+0xc4c>
 8002a5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002a5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002a60:	6023      	str	r3, [r4, #0]
 8002a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a64:	6063      	str	r3, [r4, #4]
 8002a66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002a68:	4413      	add	r3, r2
 8002a6a:	9321      	str	r3, [sp, #132]	; 0x84
 8002a6c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002a6e:	3301      	adds	r3, #1
 8002a70:	2b07      	cmp	r3, #7
 8002a72:	9320      	str	r3, [sp, #128]	; 0x80
 8002a74:	dc01      	bgt.n	8002a7a <_svfprintf_r+0x846>
 8002a76:	3408      	adds	r4, #8
 8002a78:	e008      	b.n	8002a8c <_svfprintf_r+0x858>
 8002a7a:	aa1f      	add	r2, sp, #124	; 0x7c
 8002a7c:	4659      	mov	r1, fp
 8002a7e:	4648      	mov	r0, r9
 8002a80:	f001 fede 	bl	8004840 <__ssprint_r>
 8002a84:	2800      	cmp	r0, #0
 8002a86:	f040 824b 	bne.w	8002f20 <_svfprintf_r+0xcec>
 8002a8a:	ac2c      	add	r4, sp, #176	; 0xb0
 8002a8c:	9b08      	ldr	r3, [sp, #32]
 8002a8e:	1e5e      	subs	r6, r3, #1
 8002a90:	2e00      	cmp	r6, #0
 8002a92:	f340 81f5 	ble.w	8002e80 <_svfprintf_r+0xc4c>
 8002a96:	4f0a      	ldr	r7, [pc, #40]	; (8002ac0 <_svfprintf_r+0x88c>)
 8002a98:	f04f 0810 	mov.w	r8, #16
 8002a9c:	2e10      	cmp	r6, #16
 8002a9e:	f340 8159 	ble.w	8002d54 <_svfprintf_r+0xb20>
 8002aa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002aa4:	e884 0180 	stmia.w	r4, {r7, r8}
 8002aa8:	3310      	adds	r3, #16
 8002aaa:	9321      	str	r3, [sp, #132]	; 0x84
 8002aac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002aae:	3301      	adds	r3, #1
 8002ab0:	2b07      	cmp	r3, #7
 8002ab2:	9320      	str	r3, [sp, #128]	; 0x80
 8002ab4:	dc08      	bgt.n	8002ac8 <_svfprintf_r+0x894>
 8002ab6:	3408      	adds	r4, #8
 8002ab8:	e00f      	b.n	8002ada <_svfprintf_r+0x8a6>
 8002aba:	bf00      	nop
 8002abc:	08004fec 	.word	0x08004fec
 8002ac0:	08004fa8 	.word	0x08004fa8
 8002ac4:	08004fea 	.word	0x08004fea
 8002ac8:	aa1f      	add	r2, sp, #124	; 0x7c
 8002aca:	4659      	mov	r1, fp
 8002acc:	4648      	mov	r0, r9
 8002ace:	f001 feb7 	bl	8004840 <__ssprint_r>
 8002ad2:	2800      	cmp	r0, #0
 8002ad4:	f040 8224 	bne.w	8002f20 <_svfprintf_r+0xcec>
 8002ad8:	ac2c      	add	r4, sp, #176	; 0xb0
 8002ada:	3e10      	subs	r6, #16
 8002adc:	e7de      	b.n	8002a9c <_svfprintf_r+0x868>
 8002ade:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	dc7c      	bgt.n	8002bde <_svfprintf_r+0x9aa>
 8002ae4:	4b9f      	ldr	r3, [pc, #636]	; (8002d64 <_svfprintf_r+0xb30>)
 8002ae6:	6023      	str	r3, [r4, #0]
 8002ae8:	2301      	movs	r3, #1
 8002aea:	6063      	str	r3, [r4, #4]
 8002aec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002aee:	3301      	adds	r3, #1
 8002af0:	9321      	str	r3, [sp, #132]	; 0x84
 8002af2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002af4:	3301      	adds	r3, #1
 8002af6:	2b07      	cmp	r3, #7
 8002af8:	9320      	str	r3, [sp, #128]	; 0x80
 8002afa:	dc01      	bgt.n	8002b00 <_svfprintf_r+0x8cc>
 8002afc:	3408      	adds	r4, #8
 8002afe:	e008      	b.n	8002b12 <_svfprintf_r+0x8de>
 8002b00:	aa1f      	add	r2, sp, #124	; 0x7c
 8002b02:	4659      	mov	r1, fp
 8002b04:	4648      	mov	r0, r9
 8002b06:	f001 fe9b 	bl	8004840 <__ssprint_r>
 8002b0a:	2800      	cmp	r0, #0
 8002b0c:	f040 8208 	bne.w	8002f20 <_svfprintf_r+0xcec>
 8002b10:	ac2c      	add	r4, sp, #176	; 0xb0
 8002b12:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002b14:	b923      	cbnz	r3, 8002b20 <_svfprintf_r+0x8ec>
 8002b16:	9b08      	ldr	r3, [sp, #32]
 8002b18:	b913      	cbnz	r3, 8002b20 <_svfprintf_r+0x8ec>
 8002b1a:	07e8      	lsls	r0, r5, #31
 8002b1c:	f140 81b0 	bpl.w	8002e80 <_svfprintf_r+0xc4c>
 8002b20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002b22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002b24:	6023      	str	r3, [r4, #0]
 8002b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b28:	6063      	str	r3, [r4, #4]
 8002b2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002b2c:	4413      	add	r3, r2
 8002b2e:	9321      	str	r3, [sp, #132]	; 0x84
 8002b30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002b32:	3301      	adds	r3, #1
 8002b34:	2b07      	cmp	r3, #7
 8002b36:	9320      	str	r3, [sp, #128]	; 0x80
 8002b38:	dc02      	bgt.n	8002b40 <_svfprintf_r+0x90c>
 8002b3a:	f104 0308 	add.w	r3, r4, #8
 8002b3e:	e008      	b.n	8002b52 <_svfprintf_r+0x91e>
 8002b40:	aa1f      	add	r2, sp, #124	; 0x7c
 8002b42:	4659      	mov	r1, fp
 8002b44:	4648      	mov	r0, r9
 8002b46:	f001 fe7b 	bl	8004840 <__ssprint_r>
 8002b4a:	2800      	cmp	r0, #0
 8002b4c:	f040 81e8 	bne.w	8002f20 <_svfprintf_r+0xcec>
 8002b50:	ab2c      	add	r3, sp, #176	; 0xb0
 8002b52:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8002b54:	4276      	negs	r6, r6
 8002b56:	2e00      	cmp	r6, #0
 8002b58:	dd30      	ble.n	8002bbc <_svfprintf_r+0x988>
 8002b5a:	4f83      	ldr	r7, [pc, #524]	; (8002d68 <_svfprintf_r+0xb34>)
 8002b5c:	2410      	movs	r4, #16
 8002b5e:	2e10      	cmp	r6, #16
 8002b60:	dd16      	ble.n	8002b90 <_svfprintf_r+0x95c>
 8002b62:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002b64:	601f      	str	r7, [r3, #0]
 8002b66:	3210      	adds	r2, #16
 8002b68:	9221      	str	r2, [sp, #132]	; 0x84
 8002b6a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002b6c:	605c      	str	r4, [r3, #4]
 8002b6e:	3201      	adds	r2, #1
 8002b70:	2a07      	cmp	r2, #7
 8002b72:	9220      	str	r2, [sp, #128]	; 0x80
 8002b74:	dc01      	bgt.n	8002b7a <_svfprintf_r+0x946>
 8002b76:	3308      	adds	r3, #8
 8002b78:	e008      	b.n	8002b8c <_svfprintf_r+0x958>
 8002b7a:	aa1f      	add	r2, sp, #124	; 0x7c
 8002b7c:	4659      	mov	r1, fp
 8002b7e:	4648      	mov	r0, r9
 8002b80:	f001 fe5e 	bl	8004840 <__ssprint_r>
 8002b84:	2800      	cmp	r0, #0
 8002b86:	f040 81cb 	bne.w	8002f20 <_svfprintf_r+0xcec>
 8002b8a:	ab2c      	add	r3, sp, #176	; 0xb0
 8002b8c:	3e10      	subs	r6, #16
 8002b8e:	e7e6      	b.n	8002b5e <_svfprintf_r+0x92a>
 8002b90:	4a75      	ldr	r2, [pc, #468]	; (8002d68 <_svfprintf_r+0xb34>)
 8002b92:	e883 0044 	stmia.w	r3, {r2, r6}
 8002b96:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002b98:	4416      	add	r6, r2
 8002b9a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002b9c:	9621      	str	r6, [sp, #132]	; 0x84
 8002b9e:	3201      	adds	r2, #1
 8002ba0:	2a07      	cmp	r2, #7
 8002ba2:	9220      	str	r2, [sp, #128]	; 0x80
 8002ba4:	dc01      	bgt.n	8002baa <_svfprintf_r+0x976>
 8002ba6:	3308      	adds	r3, #8
 8002ba8:	e008      	b.n	8002bbc <_svfprintf_r+0x988>
 8002baa:	aa1f      	add	r2, sp, #124	; 0x7c
 8002bac:	4659      	mov	r1, fp
 8002bae:	4648      	mov	r0, r9
 8002bb0:	f001 fe46 	bl	8004840 <__ssprint_r>
 8002bb4:	2800      	cmp	r0, #0
 8002bb6:	f040 81b3 	bne.w	8002f20 <_svfprintf_r+0xcec>
 8002bba:	ab2c      	add	r3, sp, #176	; 0xb0
 8002bbc:	9a08      	ldr	r2, [sp, #32]
 8002bbe:	9908      	ldr	r1, [sp, #32]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002bc4:	f8c3 8000 	str.w	r8, [r3]
 8002bc8:	440a      	add	r2, r1
 8002bca:	9221      	str	r2, [sp, #132]	; 0x84
 8002bcc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002bce:	3201      	adds	r2, #1
 8002bd0:	2a07      	cmp	r2, #7
 8002bd2:	9220      	str	r2, [sp, #128]	; 0x80
 8002bd4:	f73f af0e 	bgt.w	80029f4 <_svfprintf_r+0x7c0>
 8002bd8:	f103 0408 	add.w	r4, r3, #8
 8002bdc:	e150      	b.n	8002e80 <_svfprintf_r+0xc4c>
 8002bde:	9b08      	ldr	r3, [sp, #32]
 8002be0:	42bb      	cmp	r3, r7
 8002be2:	bfa8      	it	ge
 8002be4:	463b      	movge	r3, r7
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	461e      	mov	r6, r3
 8002bea:	dd15      	ble.n	8002c18 <_svfprintf_r+0x9e4>
 8002bec:	6063      	str	r3, [r4, #4]
 8002bee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002bf0:	f8c4 8000 	str.w	r8, [r4]
 8002bf4:	4433      	add	r3, r6
 8002bf6:	9321      	str	r3, [sp, #132]	; 0x84
 8002bf8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	2b07      	cmp	r3, #7
 8002bfe:	9320      	str	r3, [sp, #128]	; 0x80
 8002c00:	dc01      	bgt.n	8002c06 <_svfprintf_r+0x9d2>
 8002c02:	3408      	adds	r4, #8
 8002c04:	e008      	b.n	8002c18 <_svfprintf_r+0x9e4>
 8002c06:	aa1f      	add	r2, sp, #124	; 0x7c
 8002c08:	4659      	mov	r1, fp
 8002c0a:	4648      	mov	r0, r9
 8002c0c:	f001 fe18 	bl	8004840 <__ssprint_r>
 8002c10:	2800      	cmp	r0, #0
 8002c12:	f040 8185 	bne.w	8002f20 <_svfprintf_r+0xcec>
 8002c16:	ac2c      	add	r4, sp, #176	; 0xb0
 8002c18:	2e00      	cmp	r6, #0
 8002c1a:	bfb4      	ite	lt
 8002c1c:	463e      	movlt	r6, r7
 8002c1e:	1bbe      	subge	r6, r7, r6
 8002c20:	2e00      	cmp	r6, #0
 8002c22:	dd30      	ble.n	8002c86 <_svfprintf_r+0xa52>
 8002c24:	f04f 0a10 	mov.w	sl, #16
 8002c28:	4b4f      	ldr	r3, [pc, #316]	; (8002d68 <_svfprintf_r+0xb34>)
 8002c2a:	2e10      	cmp	r6, #16
 8002c2c:	6023      	str	r3, [r4, #0]
 8002c2e:	dd16      	ble.n	8002c5e <_svfprintf_r+0xa2a>
 8002c30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002c32:	f8c4 a004 	str.w	sl, [r4, #4]
 8002c36:	3310      	adds	r3, #16
 8002c38:	9321      	str	r3, [sp, #132]	; 0x84
 8002c3a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	2b07      	cmp	r3, #7
 8002c40:	9320      	str	r3, [sp, #128]	; 0x80
 8002c42:	dc01      	bgt.n	8002c48 <_svfprintf_r+0xa14>
 8002c44:	3408      	adds	r4, #8
 8002c46:	e008      	b.n	8002c5a <_svfprintf_r+0xa26>
 8002c48:	aa1f      	add	r2, sp, #124	; 0x7c
 8002c4a:	4659      	mov	r1, fp
 8002c4c:	4648      	mov	r0, r9
 8002c4e:	f001 fdf7 	bl	8004840 <__ssprint_r>
 8002c52:	2800      	cmp	r0, #0
 8002c54:	f040 8164 	bne.w	8002f20 <_svfprintf_r+0xcec>
 8002c58:	ac2c      	add	r4, sp, #176	; 0xb0
 8002c5a:	3e10      	subs	r6, #16
 8002c5c:	e7e4      	b.n	8002c28 <_svfprintf_r+0x9f4>
 8002c5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002c60:	6066      	str	r6, [r4, #4]
 8002c62:	441e      	add	r6, r3
 8002c64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002c66:	9621      	str	r6, [sp, #132]	; 0x84
 8002c68:	3301      	adds	r3, #1
 8002c6a:	2b07      	cmp	r3, #7
 8002c6c:	9320      	str	r3, [sp, #128]	; 0x80
 8002c6e:	dc01      	bgt.n	8002c74 <_svfprintf_r+0xa40>
 8002c70:	3408      	adds	r4, #8
 8002c72:	e008      	b.n	8002c86 <_svfprintf_r+0xa52>
 8002c74:	aa1f      	add	r2, sp, #124	; 0x7c
 8002c76:	4659      	mov	r1, fp
 8002c78:	4648      	mov	r0, r9
 8002c7a:	f001 fde1 	bl	8004840 <__ssprint_r>
 8002c7e:	2800      	cmp	r0, #0
 8002c80:	f040 814e 	bne.w	8002f20 <_svfprintf_r+0xcec>
 8002c84:	ac2c      	add	r4, sp, #176	; 0xb0
 8002c86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002c88:	9a08      	ldr	r2, [sp, #32]
 8002c8a:	4447      	add	r7, r8
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	db01      	blt.n	8002c94 <_svfprintf_r+0xa60>
 8002c90:	07e9      	lsls	r1, r5, #31
 8002c92:	d517      	bpl.n	8002cc4 <_svfprintf_r+0xa90>
 8002c94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002c96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002c98:	6023      	str	r3, [r4, #0]
 8002c9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c9c:	6063      	str	r3, [r4, #4]
 8002c9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002ca0:	4413      	add	r3, r2
 8002ca2:	9321      	str	r3, [sp, #132]	; 0x84
 8002ca4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	2b07      	cmp	r3, #7
 8002caa:	9320      	str	r3, [sp, #128]	; 0x80
 8002cac:	dc01      	bgt.n	8002cb2 <_svfprintf_r+0xa7e>
 8002cae:	3408      	adds	r4, #8
 8002cb0:	e008      	b.n	8002cc4 <_svfprintf_r+0xa90>
 8002cb2:	aa1f      	add	r2, sp, #124	; 0x7c
 8002cb4:	4659      	mov	r1, fp
 8002cb6:	4648      	mov	r0, r9
 8002cb8:	f001 fdc2 	bl	8004840 <__ssprint_r>
 8002cbc:	2800      	cmp	r0, #0
 8002cbe:	f040 812f 	bne.w	8002f20 <_svfprintf_r+0xcec>
 8002cc2:	ac2c      	add	r4, sp, #176	; 0xb0
 8002cc4:	9b08      	ldr	r3, [sp, #32]
 8002cc6:	9a08      	ldr	r2, [sp, #32]
 8002cc8:	eb08 0603 	add.w	r6, r8, r3
 8002ccc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002cce:	1bf6      	subs	r6, r6, r7
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	429e      	cmp	r6, r3
 8002cd4:	bfa8      	it	ge
 8002cd6:	461e      	movge	r6, r3
 8002cd8:	2e00      	cmp	r6, #0
 8002cda:	dd14      	ble.n	8002d06 <_svfprintf_r+0xad2>
 8002cdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002cde:	6027      	str	r7, [r4, #0]
 8002ce0:	4433      	add	r3, r6
 8002ce2:	9321      	str	r3, [sp, #132]	; 0x84
 8002ce4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002ce6:	6066      	str	r6, [r4, #4]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	2b07      	cmp	r3, #7
 8002cec:	9320      	str	r3, [sp, #128]	; 0x80
 8002cee:	dc01      	bgt.n	8002cf4 <_svfprintf_r+0xac0>
 8002cf0:	3408      	adds	r4, #8
 8002cf2:	e008      	b.n	8002d06 <_svfprintf_r+0xad2>
 8002cf4:	aa1f      	add	r2, sp, #124	; 0x7c
 8002cf6:	4659      	mov	r1, fp
 8002cf8:	4648      	mov	r0, r9
 8002cfa:	f001 fda1 	bl	8004840 <__ssprint_r>
 8002cfe:	2800      	cmp	r0, #0
 8002d00:	f040 810e 	bne.w	8002f20 <_svfprintf_r+0xcec>
 8002d04:	ac2c      	add	r4, sp, #176	; 0xb0
 8002d06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002d08:	9a08      	ldr	r2, [sp, #32]
 8002d0a:	2e00      	cmp	r6, #0
 8002d0c:	eba2 0303 	sub.w	r3, r2, r3
 8002d10:	bfb4      	ite	lt
 8002d12:	461e      	movlt	r6, r3
 8002d14:	1b9e      	subge	r6, r3, r6
 8002d16:	2e00      	cmp	r6, #0
 8002d18:	f340 80b2 	ble.w	8002e80 <_svfprintf_r+0xc4c>
 8002d1c:	4f12      	ldr	r7, [pc, #72]	; (8002d68 <_svfprintf_r+0xb34>)
 8002d1e:	f04f 0810 	mov.w	r8, #16
 8002d22:	2e10      	cmp	r6, #16
 8002d24:	dd16      	ble.n	8002d54 <_svfprintf_r+0xb20>
 8002d26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002d28:	e884 0180 	stmia.w	r4, {r7, r8}
 8002d2c:	3310      	adds	r3, #16
 8002d2e:	9321      	str	r3, [sp, #132]	; 0x84
 8002d30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002d32:	3301      	adds	r3, #1
 8002d34:	2b07      	cmp	r3, #7
 8002d36:	9320      	str	r3, [sp, #128]	; 0x80
 8002d38:	dc01      	bgt.n	8002d3e <_svfprintf_r+0xb0a>
 8002d3a:	3408      	adds	r4, #8
 8002d3c:	e008      	b.n	8002d50 <_svfprintf_r+0xb1c>
 8002d3e:	aa1f      	add	r2, sp, #124	; 0x7c
 8002d40:	4659      	mov	r1, fp
 8002d42:	4648      	mov	r0, r9
 8002d44:	f001 fd7c 	bl	8004840 <__ssprint_r>
 8002d48:	2800      	cmp	r0, #0
 8002d4a:	f040 80e9 	bne.w	8002f20 <_svfprintf_r+0xcec>
 8002d4e:	ac2c      	add	r4, sp, #176	; 0xb0
 8002d50:	3e10      	subs	r6, #16
 8002d52:	e7e6      	b.n	8002d22 <_svfprintf_r+0xaee>
 8002d54:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <_svfprintf_r+0xb34>)
 8002d56:	e884 0048 	stmia.w	r4, {r3, r6}
 8002d5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002d5c:	441e      	add	r6, r3
 8002d5e:	9621      	str	r6, [sp, #132]	; 0x84
 8002d60:	e642      	b.n	80029e8 <_svfprintf_r+0x7b4>
 8002d62:	bf00      	nop
 8002d64:	08004fea 	.word	0x08004fea
 8002d68:	08004fa8 	.word	0x08004fa8
 8002d6c:	9b08      	ldr	r3, [sp, #32]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	dc01      	bgt.n	8002d76 <_svfprintf_r+0xb42>
 8002d72:	07ea      	lsls	r2, r5, #31
 8002d74:	d573      	bpl.n	8002e5e <_svfprintf_r+0xc2a>
 8002d76:	2301      	movs	r3, #1
 8002d78:	6063      	str	r3, [r4, #4]
 8002d7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002d7c:	f8c4 8000 	str.w	r8, [r4]
 8002d80:	3301      	adds	r3, #1
 8002d82:	9321      	str	r3, [sp, #132]	; 0x84
 8002d84:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002d86:	3301      	adds	r3, #1
 8002d88:	2b07      	cmp	r3, #7
 8002d8a:	9320      	str	r3, [sp, #128]	; 0x80
 8002d8c:	dc01      	bgt.n	8002d92 <_svfprintf_r+0xb5e>
 8002d8e:	3408      	adds	r4, #8
 8002d90:	e008      	b.n	8002da4 <_svfprintf_r+0xb70>
 8002d92:	aa1f      	add	r2, sp, #124	; 0x7c
 8002d94:	4659      	mov	r1, fp
 8002d96:	4648      	mov	r0, r9
 8002d98:	f001 fd52 	bl	8004840 <__ssprint_r>
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	f040 80bf 	bne.w	8002f20 <_svfprintf_r+0xcec>
 8002da2:	ac2c      	add	r4, sp, #176	; 0xb0
 8002da4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002da6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002da8:	6023      	str	r3, [r4, #0]
 8002daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002dac:	6063      	str	r3, [r4, #4]
 8002dae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002db0:	4413      	add	r3, r2
 8002db2:	9321      	str	r3, [sp, #132]	; 0x84
 8002db4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002db6:	3301      	adds	r3, #1
 8002db8:	2b07      	cmp	r3, #7
 8002dba:	9320      	str	r3, [sp, #128]	; 0x80
 8002dbc:	dc01      	bgt.n	8002dc2 <_svfprintf_r+0xb8e>
 8002dbe:	3408      	adds	r4, #8
 8002dc0:	e008      	b.n	8002dd4 <_svfprintf_r+0xba0>
 8002dc2:	aa1f      	add	r2, sp, #124	; 0x7c
 8002dc4:	4659      	mov	r1, fp
 8002dc6:	4648      	mov	r0, r9
 8002dc8:	f001 fd3a 	bl	8004840 <__ssprint_r>
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	f040 80a7 	bne.w	8002f20 <_svfprintf_r+0xcec>
 8002dd2:	ac2c      	add	r4, sp, #176	; 0xb0
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002dda:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002ddc:	f7fd fdf8 	bl	80009d0 <__aeabi_dcmpeq>
 8002de0:	9b08      	ldr	r3, [sp, #32]
 8002de2:	1e5e      	subs	r6, r3, #1
 8002de4:	b9b8      	cbnz	r0, 8002e16 <_svfprintf_r+0xbe2>
 8002de6:	f108 0301 	add.w	r3, r8, #1
 8002dea:	e884 0048 	stmia.w	r4, {r3, r6}
 8002dee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002df0:	9a08      	ldr	r2, [sp, #32]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	4413      	add	r3, r2
 8002df6:	9321      	str	r3, [sp, #132]	; 0x84
 8002df8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	2b07      	cmp	r3, #7
 8002dfe:	9320      	str	r3, [sp, #128]	; 0x80
 8002e00:	dd34      	ble.n	8002e6c <_svfprintf_r+0xc38>
 8002e02:	aa1f      	add	r2, sp, #124	; 0x7c
 8002e04:	4659      	mov	r1, fp
 8002e06:	4648      	mov	r0, r9
 8002e08:	f001 fd1a 	bl	8004840 <__ssprint_r>
 8002e0c:	2800      	cmp	r0, #0
 8002e0e:	f040 8087 	bne.w	8002f20 <_svfprintf_r+0xcec>
 8002e12:	ac2c      	add	r4, sp, #176	; 0xb0
 8002e14:	e02b      	b.n	8002e6e <_svfprintf_r+0xc3a>
 8002e16:	2e00      	cmp	r6, #0
 8002e18:	dd29      	ble.n	8002e6e <_svfprintf_r+0xc3a>
 8002e1a:	4f8f      	ldr	r7, [pc, #572]	; (8003058 <_svfprintf_r+0xe24>)
 8002e1c:	f04f 0810 	mov.w	r8, #16
 8002e20:	2e10      	cmp	r6, #16
 8002e22:	dd15      	ble.n	8002e50 <_svfprintf_r+0xc1c>
 8002e24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002e26:	e884 0180 	stmia.w	r4, {r7, r8}
 8002e2a:	3310      	adds	r3, #16
 8002e2c:	9321      	str	r3, [sp, #132]	; 0x84
 8002e2e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002e30:	3301      	adds	r3, #1
 8002e32:	2b07      	cmp	r3, #7
 8002e34:	9320      	str	r3, [sp, #128]	; 0x80
 8002e36:	dc01      	bgt.n	8002e3c <_svfprintf_r+0xc08>
 8002e38:	3408      	adds	r4, #8
 8002e3a:	e007      	b.n	8002e4c <_svfprintf_r+0xc18>
 8002e3c:	aa1f      	add	r2, sp, #124	; 0x7c
 8002e3e:	4659      	mov	r1, fp
 8002e40:	4648      	mov	r0, r9
 8002e42:	f001 fcfd 	bl	8004840 <__ssprint_r>
 8002e46:	2800      	cmp	r0, #0
 8002e48:	d16a      	bne.n	8002f20 <_svfprintf_r+0xcec>
 8002e4a:	ac2c      	add	r4, sp, #176	; 0xb0
 8002e4c:	3e10      	subs	r6, #16
 8002e4e:	e7e7      	b.n	8002e20 <_svfprintf_r+0xbec>
 8002e50:	4b81      	ldr	r3, [pc, #516]	; (8003058 <_svfprintf_r+0xe24>)
 8002e52:	e884 0048 	stmia.w	r4, {r3, r6}
 8002e56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002e58:	441e      	add	r6, r3
 8002e5a:	9621      	str	r6, [sp, #132]	; 0x84
 8002e5c:	e7cc      	b.n	8002df8 <_svfprintf_r+0xbc4>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	6063      	str	r3, [r4, #4]
 8002e62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002e64:	f8c4 8000 	str.w	r8, [r4]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	e7c4      	b.n	8002df6 <_svfprintf_r+0xbc2>
 8002e6c:	3408      	adds	r4, #8
 8002e6e:	ab1b      	add	r3, sp, #108	; 0x6c
 8002e70:	6023      	str	r3, [r4, #0]
 8002e72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002e74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002e76:	6063      	str	r3, [r4, #4]
 8002e78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002e7a:	4413      	add	r3, r2
 8002e7c:	e5b3      	b.n	80029e6 <_svfprintf_r+0x7b2>
 8002e7e:	3408      	adds	r4, #8
 8002e80:	076b      	lsls	r3, r5, #29
 8002e82:	d40b      	bmi.n	8002e9c <_svfprintf_r+0xc68>
 8002e84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002e88:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002e8a:	428a      	cmp	r2, r1
 8002e8c:	bfac      	ite	ge
 8002e8e:	189b      	addge	r3, r3, r2
 8002e90:	185b      	addlt	r3, r3, r1
 8002e92:	930e      	str	r3, [sp, #56]	; 0x38
 8002e94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d035      	beq.n	8002f06 <_svfprintf_r+0xcd2>
 8002e9a:	e02e      	b.n	8002efa <_svfprintf_r+0xcc6>
 8002e9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002ea0:	1a9d      	subs	r5, r3, r2
 8002ea2:	2d00      	cmp	r5, #0
 8002ea4:	ddee      	ble.n	8002e84 <_svfprintf_r+0xc50>
 8002ea6:	2610      	movs	r6, #16
 8002ea8:	4b6c      	ldr	r3, [pc, #432]	; (800305c <_svfprintf_r+0xe28>)
 8002eaa:	2d10      	cmp	r5, #16
 8002eac:	6023      	str	r3, [r4, #0]
 8002eae:	dd13      	ble.n	8002ed8 <_svfprintf_r+0xca4>
 8002eb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002eb2:	6066      	str	r6, [r4, #4]
 8002eb4:	3310      	adds	r3, #16
 8002eb6:	9321      	str	r3, [sp, #132]	; 0x84
 8002eb8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002eba:	3301      	adds	r3, #1
 8002ebc:	2b07      	cmp	r3, #7
 8002ebe:	9320      	str	r3, [sp, #128]	; 0x80
 8002ec0:	dc01      	bgt.n	8002ec6 <_svfprintf_r+0xc92>
 8002ec2:	3408      	adds	r4, #8
 8002ec4:	e006      	b.n	8002ed4 <_svfprintf_r+0xca0>
 8002ec6:	aa1f      	add	r2, sp, #124	; 0x7c
 8002ec8:	4659      	mov	r1, fp
 8002eca:	4648      	mov	r0, r9
 8002ecc:	f001 fcb8 	bl	8004840 <__ssprint_r>
 8002ed0:	bb30      	cbnz	r0, 8002f20 <_svfprintf_r+0xcec>
 8002ed2:	ac2c      	add	r4, sp, #176	; 0xb0
 8002ed4:	3d10      	subs	r5, #16
 8002ed6:	e7e7      	b.n	8002ea8 <_svfprintf_r+0xc74>
 8002ed8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002eda:	6065      	str	r5, [r4, #4]
 8002edc:	441d      	add	r5, r3
 8002ede:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002ee0:	9521      	str	r5, [sp, #132]	; 0x84
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	2b07      	cmp	r3, #7
 8002ee6:	9320      	str	r3, [sp, #128]	; 0x80
 8002ee8:	ddcc      	ble.n	8002e84 <_svfprintf_r+0xc50>
 8002eea:	aa1f      	add	r2, sp, #124	; 0x7c
 8002eec:	4659      	mov	r1, fp
 8002eee:	4648      	mov	r0, r9
 8002ef0:	f001 fca6 	bl	8004840 <__ssprint_r>
 8002ef4:	2800      	cmp	r0, #0
 8002ef6:	d0c5      	beq.n	8002e84 <_svfprintf_r+0xc50>
 8002ef8:	e012      	b.n	8002f20 <_svfprintf_r+0xcec>
 8002efa:	aa1f      	add	r2, sp, #124	; 0x7c
 8002efc:	4659      	mov	r1, fp
 8002efe:	4648      	mov	r0, r9
 8002f00:	f001 fc9e 	bl	8004840 <__ssprint_r>
 8002f04:	b960      	cbnz	r0, 8002f20 <_svfprintf_r+0xcec>
 8002f06:	2300      	movs	r3, #0
 8002f08:	9320      	str	r3, [sp, #128]	; 0x80
 8002f0a:	9f07      	ldr	r7, [sp, #28]
 8002f0c:	ac2c      	add	r4, sp, #176	; 0xb0
 8002f0e:	f7ff b9c5 	b.w	800229c <_svfprintf_r+0x68>
 8002f12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002f14:	b123      	cbz	r3, 8002f20 <_svfprintf_r+0xcec>
 8002f16:	aa1f      	add	r2, sp, #124	; 0x7c
 8002f18:	4659      	mov	r1, fp
 8002f1a:	4648      	mov	r0, r9
 8002f1c:	f001 fc90 	bl	8004840 <__ssprint_r>
 8002f20:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8002f24:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002f28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f2a:	bf18      	it	ne
 8002f2c:	f04f 33ff 	movne.w	r3, #4294967295
 8002f30:	4618      	mov	r0, r3
 8002f32:	e130      	b.n	8003196 <_svfprintf_r+0xf62>
 8002f34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002f36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f38:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002f3a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002f3c:	f7fd fd7a 	bl	8000a34 <__aeabi_dcmpun>
 8002f40:	b160      	cbz	r0, 8002f5c <_svfprintf_r+0xd28>
 8002f42:	4b47      	ldr	r3, [pc, #284]	; (8003060 <_svfprintf_r+0xe2c>)
 8002f44:	4a47      	ldr	r2, [pc, #284]	; (8003064 <_svfprintf_r+0xe30>)
 8002f46:	9906      	ldr	r1, [sp, #24]
 8002f48:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8002f4c:	2947      	cmp	r1, #71	; 0x47
 8002f4e:	bfcc      	ite	gt
 8002f50:	4690      	movgt	r8, r2
 8002f52:	4698      	movle	r8, r3
 8002f54:	f04f 0a03 	mov.w	sl, #3
 8002f58:	2600      	movs	r6, #0
 8002f5a:	e449      	b.n	80027f0 <_svfprintf_r+0x5bc>
 8002f5c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8002f60:	d00a      	beq.n	8002f78 <_svfprintf_r+0xd44>
 8002f62:	9b06      	ldr	r3, [sp, #24]
 8002f64:	f023 0320 	bic.w	r3, r3, #32
 8002f68:	2b47      	cmp	r3, #71	; 0x47
 8002f6a:	d107      	bne.n	8002f7c <_svfprintf_r+0xd48>
 8002f6c:	f1ba 0f00 	cmp.w	sl, #0
 8002f70:	bf08      	it	eq
 8002f72:	f04f 0a01 	moveq.w	sl, #1
 8002f76:	e001      	b.n	8002f7c <_svfprintf_r+0xd48>
 8002f78:	f04f 0a06 	mov.w	sl, #6
 8002f7c:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8002f80:	9315      	str	r3, [sp, #84]	; 0x54
 8002f82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f84:	1e1f      	subs	r7, r3, #0
 8002f86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f88:	bfa8      	it	ge
 8002f8a:	9710      	strge	r7, [sp, #64]	; 0x40
 8002f8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8002f8e:	bfbd      	ittte	lt
 8002f90:	463b      	movlt	r3, r7
 8002f92:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002f96:	9310      	strlt	r3, [sp, #64]	; 0x40
 8002f98:	2300      	movge	r3, #0
 8002f9a:	bfb8      	it	lt
 8002f9c:	232d      	movlt	r3, #45	; 0x2d
 8002f9e:	9314      	str	r3, [sp, #80]	; 0x50
 8002fa0:	9b06      	ldr	r3, [sp, #24]
 8002fa2:	f023 0720 	bic.w	r7, r3, #32
 8002fa6:	2f46      	cmp	r7, #70	; 0x46
 8002fa8:	d004      	beq.n	8002fb4 <_svfprintf_r+0xd80>
 8002faa:	2f45      	cmp	r7, #69	; 0x45
 8002fac:	d105      	bne.n	8002fba <_svfprintf_r+0xd86>
 8002fae:	f10a 0601 	add.w	r6, sl, #1
 8002fb2:	e003      	b.n	8002fbc <_svfprintf_r+0xd88>
 8002fb4:	4656      	mov	r6, sl
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e001      	b.n	8002fbe <_svfprintf_r+0xd8a>
 8002fba:	4656      	mov	r6, sl
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	aa1d      	add	r2, sp, #116	; 0x74
 8002fc0:	9204      	str	r2, [sp, #16]
 8002fc2:	aa1a      	add	r2, sp, #104	; 0x68
 8002fc4:	9203      	str	r2, [sp, #12]
 8002fc6:	aa19      	add	r2, sp, #100	; 0x64
 8002fc8:	9202      	str	r2, [sp, #8]
 8002fca:	e88d 0048 	stmia.w	sp, {r3, r6}
 8002fce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002fd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002fd2:	4648      	mov	r0, r9
 8002fd4:	f000 f974 	bl	80032c0 <_dtoa_r>
 8002fd8:	2f47      	cmp	r7, #71	; 0x47
 8002fda:	4680      	mov	r8, r0
 8002fdc:	d102      	bne.n	8002fe4 <_svfprintf_r+0xdb0>
 8002fde:	07eb      	lsls	r3, r5, #31
 8002fe0:	f140 80cf 	bpl.w	8003182 <_svfprintf_r+0xf4e>
 8002fe4:	eb08 0306 	add.w	r3, r8, r6
 8002fe8:	2f46      	cmp	r7, #70	; 0x46
 8002fea:	9308      	str	r3, [sp, #32]
 8002fec:	d111      	bne.n	8003012 <_svfprintf_r+0xdde>
 8002fee:	f898 3000 	ldrb.w	r3, [r8]
 8002ff2:	2b30      	cmp	r3, #48	; 0x30
 8002ff4:	d109      	bne.n	800300a <_svfprintf_r+0xdd6>
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002ffc:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002ffe:	f7fd fce7 	bl	80009d0 <__aeabi_dcmpeq>
 8003002:	b910      	cbnz	r0, 800300a <_svfprintf_r+0xdd6>
 8003004:	f1c6 0601 	rsb	r6, r6, #1
 8003008:	9619      	str	r6, [sp, #100]	; 0x64
 800300a:	9a08      	ldr	r2, [sp, #32]
 800300c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800300e:	441a      	add	r2, r3
 8003010:	9208      	str	r2, [sp, #32]
 8003012:	2200      	movs	r2, #0
 8003014:	2300      	movs	r3, #0
 8003016:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003018:	9910      	ldr	r1, [sp, #64]	; 0x40
 800301a:	f7fd fcd9 	bl	80009d0 <__aeabi_dcmpeq>
 800301e:	b908      	cbnz	r0, 8003024 <_svfprintf_r+0xdf0>
 8003020:	2230      	movs	r2, #48	; 0x30
 8003022:	e002      	b.n	800302a <_svfprintf_r+0xdf6>
 8003024:	9b08      	ldr	r3, [sp, #32]
 8003026:	931d      	str	r3, [sp, #116]	; 0x74
 8003028:	e007      	b.n	800303a <_svfprintf_r+0xe06>
 800302a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800302c:	9908      	ldr	r1, [sp, #32]
 800302e:	4299      	cmp	r1, r3
 8003030:	d903      	bls.n	800303a <_svfprintf_r+0xe06>
 8003032:	1c59      	adds	r1, r3, #1
 8003034:	911d      	str	r1, [sp, #116]	; 0x74
 8003036:	701a      	strb	r2, [r3, #0]
 8003038:	e7f7      	b.n	800302a <_svfprintf_r+0xdf6>
 800303a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800303c:	2f47      	cmp	r7, #71	; 0x47
 800303e:	ebc8 0303 	rsb	r3, r8, r3
 8003042:	9308      	str	r3, [sp, #32]
 8003044:	d110      	bne.n	8003068 <_svfprintf_r+0xe34>
 8003046:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003048:	1cdf      	adds	r7, r3, #3
 800304a:	db01      	blt.n	8003050 <_svfprintf_r+0xe1c>
 800304c:	459a      	cmp	sl, r3
 800304e:	da6a      	bge.n	8003126 <_svfprintf_r+0xef2>
 8003050:	9b06      	ldr	r3, [sp, #24]
 8003052:	3b02      	subs	r3, #2
 8003054:	9306      	str	r3, [sp, #24]
 8003056:	e00a      	b.n	800306e <_svfprintf_r+0xe3a>
 8003058:	08004fa8 	.word	0x08004fa8
 800305c:	08004fec 	.word	0x08004fec
 8003060:	08004fc0 	.word	0x08004fc0
 8003064:	08004fc4 	.word	0x08004fc4
 8003068:	9b06      	ldr	r3, [sp, #24]
 800306a:	2b65      	cmp	r3, #101	; 0x65
 800306c:	dc44      	bgt.n	80030f8 <_svfprintf_r+0xec4>
 800306e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003070:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8003074:	3b01      	subs	r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	9319      	str	r3, [sp, #100]	; 0x64
 800307a:	bfb8      	it	lt
 800307c:	425b      	neglt	r3, r3
 800307e:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 8003082:	bfb4      	ite	lt
 8003084:	222d      	movlt	r2, #45	; 0x2d
 8003086:	222b      	movge	r2, #43	; 0x2b
 8003088:	2b09      	cmp	r3, #9
 800308a:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800308e:	dd1d      	ble.n	80030cc <_svfprintf_r+0xe98>
 8003090:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8003094:	200a      	movs	r0, #10
 8003096:	fb93 f1f0 	sdiv	r1, r3, r0
 800309a:	fb00 3311 	mls	r3, r0, r1, r3
 800309e:	2909      	cmp	r1, #9
 80030a0:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80030a4:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80030a8:	460b      	mov	r3, r1
 80030aa:	dcf4      	bgt.n	8003096 <_svfprintf_r+0xe62>
 80030ac:	3330      	adds	r3, #48	; 0x30
 80030ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80030b2:	1e51      	subs	r1, r2, #1
 80030b4:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 80030b8:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 80030bc:	4281      	cmp	r1, r0
 80030be:	461a      	mov	r2, r3
 80030c0:	d20b      	bcs.n	80030da <_svfprintf_r+0xea6>
 80030c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80030c6:	f803 2b01 	strb.w	r2, [r3], #1
 80030ca:	e7f7      	b.n	80030bc <_svfprintf_r+0xe88>
 80030cc:	2230      	movs	r2, #48	; 0x30
 80030ce:	4413      	add	r3, r2
 80030d0:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 80030d4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80030d8:	aa1c      	add	r2, sp, #112	; 0x70
 80030da:	ab1b      	add	r3, sp, #108	; 0x6c
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	9a08      	ldr	r2, [sp, #32]
 80030e0:	9312      	str	r3, [sp, #72]	; 0x48
 80030e2:	2a01      	cmp	r2, #1
 80030e4:	eb03 0a02 	add.w	sl, r3, r2
 80030e8:	dc02      	bgt.n	80030f0 <_svfprintf_r+0xebc>
 80030ea:	f015 0701 	ands.w	r7, r5, #1
 80030ee:	d032      	beq.n	8003156 <_svfprintf_r+0xf22>
 80030f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030f2:	2700      	movs	r7, #0
 80030f4:	449a      	add	sl, r3
 80030f6:	e02e      	b.n	8003156 <_svfprintf_r+0xf22>
 80030f8:	9b06      	ldr	r3, [sp, #24]
 80030fa:	2b66      	cmp	r3, #102	; 0x66
 80030fc:	d113      	bne.n	8003126 <_svfprintf_r+0xef2>
 80030fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003100:	2b00      	cmp	r3, #0
 8003102:	dd07      	ble.n	8003114 <_svfprintf_r+0xee0>
 8003104:	f1ba 0f00 	cmp.w	sl, #0
 8003108:	d101      	bne.n	800310e <_svfprintf_r+0xeda>
 800310a:	07ee      	lsls	r6, r5, #31
 800310c:	d521      	bpl.n	8003152 <_svfprintf_r+0xf1e>
 800310e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003110:	4413      	add	r3, r2
 8003112:	e006      	b.n	8003122 <_svfprintf_r+0xeee>
 8003114:	f1ba 0f00 	cmp.w	sl, #0
 8003118:	d101      	bne.n	800311e <_svfprintf_r+0xeea>
 800311a:	07ed      	lsls	r5, r5, #31
 800311c:	d514      	bpl.n	8003148 <_svfprintf_r+0xf14>
 800311e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003120:	3301      	adds	r3, #1
 8003122:	4453      	add	r3, sl
 8003124:	e015      	b.n	8003152 <_svfprintf_r+0xf1e>
 8003126:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003128:	9a08      	ldr	r2, [sp, #32]
 800312a:	4293      	cmp	r3, r2
 800312c:	db03      	blt.n	8003136 <_svfprintf_r+0xf02>
 800312e:	07e8      	lsls	r0, r5, #31
 8003130:	d50d      	bpl.n	800314e <_svfprintf_r+0xf1a>
 8003132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003134:	e006      	b.n	8003144 <_svfprintf_r+0xf10>
 8003136:	9a08      	ldr	r2, [sp, #32]
 8003138:	990a      	ldr	r1, [sp, #40]	; 0x28
 800313a:	2b00      	cmp	r3, #0
 800313c:	440a      	add	r2, r1
 800313e:	dc05      	bgt.n	800314c <_svfprintf_r+0xf18>
 8003140:	f1c3 0301 	rsb	r3, r3, #1
 8003144:	4413      	add	r3, r2
 8003146:	e002      	b.n	800314e <_svfprintf_r+0xf1a>
 8003148:	2301      	movs	r3, #1
 800314a:	e002      	b.n	8003152 <_svfprintf_r+0xf1e>
 800314c:	4613      	mov	r3, r2
 800314e:	2267      	movs	r2, #103	; 0x67
 8003150:	9206      	str	r2, [sp, #24]
 8003152:	469a      	mov	sl, r3
 8003154:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8003156:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003158:	b113      	cbz	r3, 8003160 <_svfprintf_r+0xf2c>
 800315a:	232d      	movs	r3, #45	; 0x2d
 800315c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003160:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8003162:	2600      	movs	r6, #0
 8003164:	f7ff bb45 	b.w	80027f2 <_svfprintf_r+0x5be>
 8003168:	2200      	movs	r2, #0
 800316a:	2300      	movs	r3, #0
 800316c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800316e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003170:	f7fd fc38 	bl	80009e4 <__aeabi_dcmplt>
 8003174:	b110      	cbz	r0, 800317c <_svfprintf_r+0xf48>
 8003176:	232d      	movs	r3, #45	; 0x2d
 8003178:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800317c:	4b07      	ldr	r3, [pc, #28]	; (800319c <_svfprintf_r+0xf68>)
 800317e:	4a08      	ldr	r2, [pc, #32]	; (80031a0 <_svfprintf_r+0xf6c>)
 8003180:	e6e1      	b.n	8002f46 <_svfprintf_r+0xd12>
 8003182:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003184:	1a1b      	subs	r3, r3, r0
 8003186:	9308      	str	r3, [sp, #32]
 8003188:	e75d      	b.n	8003046 <_svfprintf_r+0xe12>
 800318a:	ea56 0207 	orrs.w	r2, r6, r7
 800318e:	f47f aaa9 	bne.w	80026e4 <_svfprintf_r+0x4b0>
 8003192:	f7ff baae 	b.w	80026f2 <_svfprintf_r+0x4be>
 8003196:	b03d      	add	sp, #244	; 0xf4
 8003198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800319c:	08004fb8 	.word	0x08004fb8
 80031a0:	08004fbc 	.word	0x08004fbc

080031a4 <quorem>:
 80031a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031a8:	6903      	ldr	r3, [r0, #16]
 80031aa:	690c      	ldr	r4, [r1, #16]
 80031ac:	4680      	mov	r8, r0
 80031ae:	429c      	cmp	r4, r3
 80031b0:	dc7f      	bgt.n	80032b2 <quorem+0x10e>
 80031b2:	3c01      	subs	r4, #1
 80031b4:	f101 0714 	add.w	r7, r1, #20
 80031b8:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80031bc:	f100 0614 	add.w	r6, r0, #20
 80031c0:	eb06 030e 	add.w	r3, r6, lr
 80031c4:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80031c8:	9301      	str	r3, [sp, #4]
 80031ca:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 80031ce:	3501      	adds	r5, #1
 80031d0:	fbb3 f5f5 	udiv	r5, r3, r5
 80031d4:	eb07 090e 	add.w	r9, r7, lr
 80031d8:	b3c5      	cbz	r5, 800324c <quorem+0xa8>
 80031da:	f04f 0a00 	mov.w	sl, #0
 80031de:	4638      	mov	r0, r7
 80031e0:	46b4      	mov	ip, r6
 80031e2:	46d3      	mov	fp, sl
 80031e4:	f850 3b04 	ldr.w	r3, [r0], #4
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	fb05 a202 	mla	r2, r5, r2, sl
 80031ee:	0c1b      	lsrs	r3, r3, #16
 80031f0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80031f4:	fb05 a303 	mla	r3, r5, r3, sl
 80031f8:	b292      	uxth	r2, r2
 80031fa:	ebc2 0b0b 	rsb	fp, r2, fp
 80031fe:	f8bc 2000 	ldrh.w	r2, [ip]
 8003202:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003206:	445a      	add	r2, fp
 8003208:	fa1f fb83 	uxth.w	fp, r3
 800320c:	f8dc 3000 	ldr.w	r3, [ip]
 8003210:	4581      	cmp	r9, r0
 8003212:	ebcb 4313 	rsb	r3, fp, r3, lsr #16
 8003216:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800321a:	b292      	uxth	r2, r2
 800321c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003220:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003224:	f84c 2b04 	str.w	r2, [ip], #4
 8003228:	d2dc      	bcs.n	80031e4 <quorem+0x40>
 800322a:	f856 300e 	ldr.w	r3, [r6, lr]
 800322e:	b96b      	cbnz	r3, 800324c <quorem+0xa8>
 8003230:	9b01      	ldr	r3, [sp, #4]
 8003232:	3b04      	subs	r3, #4
 8003234:	429e      	cmp	r6, r3
 8003236:	461a      	mov	r2, r3
 8003238:	d302      	bcc.n	8003240 <quorem+0x9c>
 800323a:	f8c8 4010 	str.w	r4, [r8, #16]
 800323e:	e005      	b.n	800324c <quorem+0xa8>
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	3b04      	subs	r3, #4
 8003244:	2a00      	cmp	r2, #0
 8003246:	d1f8      	bne.n	800323a <quorem+0x96>
 8003248:	3c01      	subs	r4, #1
 800324a:	e7f3      	b.n	8003234 <quorem+0x90>
 800324c:	4640      	mov	r0, r8
 800324e:	f001 fa1e 	bl	800468e <__mcmp>
 8003252:	2800      	cmp	r0, #0
 8003254:	db2b      	blt.n	80032ae <quorem+0x10a>
 8003256:	4630      	mov	r0, r6
 8003258:	3501      	adds	r5, #1
 800325a:	f04f 0e00 	mov.w	lr, #0
 800325e:	f857 2b04 	ldr.w	r2, [r7], #4
 8003262:	6803      	ldr	r3, [r0, #0]
 8003264:	b291      	uxth	r1, r2
 8003266:	ebc1 0e0e 	rsb	lr, r1, lr
 800326a:	0c12      	lsrs	r2, r2, #16
 800326c:	b299      	uxth	r1, r3
 800326e:	4471      	add	r1, lr
 8003270:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 8003274:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8003278:	b289      	uxth	r1, r1
 800327a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800327e:	45b9      	cmp	r9, r7
 8003280:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8003284:	f840 3b04 	str.w	r3, [r0], #4
 8003288:	d2e9      	bcs.n	800325e <quorem+0xba>
 800328a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800328e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003292:	b962      	cbnz	r2, 80032ae <quorem+0x10a>
 8003294:	3b04      	subs	r3, #4
 8003296:	429e      	cmp	r6, r3
 8003298:	461a      	mov	r2, r3
 800329a:	d302      	bcc.n	80032a2 <quorem+0xfe>
 800329c:	f8c8 4010 	str.w	r4, [r8, #16]
 80032a0:	e005      	b.n	80032ae <quorem+0x10a>
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	3b04      	subs	r3, #4
 80032a6:	2a00      	cmp	r2, #0
 80032a8:	d1f8      	bne.n	800329c <quorem+0xf8>
 80032aa:	3c01      	subs	r4, #1
 80032ac:	e7f3      	b.n	8003296 <quorem+0xf2>
 80032ae:	4628      	mov	r0, r5
 80032b0:	e000      	b.n	80032b4 <quorem+0x110>
 80032b2:	2000      	movs	r0, #0
 80032b4:	b003      	add	sp, #12
 80032b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032ba:	0000      	movs	r0, r0
 80032bc:	0000      	movs	r0, r0
	...

080032c0 <_dtoa_r>:
 80032c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032c4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80032c6:	b095      	sub	sp, #84	; 0x54
 80032c8:	4682      	mov	sl, r0
 80032ca:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80032cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80032d0:	b945      	cbnz	r5, 80032e4 <_dtoa_r+0x24>
 80032d2:	2010      	movs	r0, #16
 80032d4:	f000 fd90 	bl	8003df8 <malloc>
 80032d8:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 80032dc:	6045      	str	r5, [r0, #4]
 80032de:	6085      	str	r5, [r0, #8]
 80032e0:	6005      	str	r5, [r0, #0]
 80032e2:	60c5      	str	r5, [r0, #12]
 80032e4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80032e8:	6819      	ldr	r1, [r3, #0]
 80032ea:	b159      	cbz	r1, 8003304 <_dtoa_r+0x44>
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	2301      	movs	r3, #1
 80032f0:	4093      	lsls	r3, r2
 80032f2:	604a      	str	r2, [r1, #4]
 80032f4:	608b      	str	r3, [r1, #8]
 80032f6:	4650      	mov	r0, sl
 80032f8:	f000 fff2 	bl	80042e0 <_Bfree>
 80032fc:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	9b03      	ldr	r3, [sp, #12]
 8003306:	4aa0      	ldr	r2, [pc, #640]	; (8003588 <_dtoa_r+0x2c8>)
 8003308:	2b00      	cmp	r3, #0
 800330a:	bfbd      	ittte	lt
 800330c:	2301      	movlt	r3, #1
 800330e:	6023      	strlt	r3, [r4, #0]
 8003310:	9b03      	ldrlt	r3, [sp, #12]
 8003312:	2300      	movge	r3, #0
 8003314:	bfbc      	itt	lt
 8003316:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800331a:	9303      	strlt	r3, [sp, #12]
 800331c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003320:	bfa8      	it	ge
 8003322:	6023      	strge	r3, [r4, #0]
 8003324:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003328:	0d1b      	lsrs	r3, r3, #20
 800332a:	051b      	lsls	r3, r3, #20
 800332c:	4293      	cmp	r3, r2
 800332e:	d11d      	bne.n	800336c <_dtoa_r+0xac>
 8003330:	f242 730f 	movw	r3, #9999	; 0x270f
 8003334:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	9b02      	ldr	r3, [sp, #8]
 800333a:	b943      	cbnz	r3, 800334e <_dtoa_r+0x8e>
 800333c:	4a93      	ldr	r2, [pc, #588]	; (800358c <_dtoa_r+0x2cc>)
 800333e:	4b94      	ldr	r3, [pc, #592]	; (8003590 <_dtoa_r+0x2d0>)
 8003340:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003344:	2800      	cmp	r0, #0
 8003346:	bf14      	ite	ne
 8003348:	4618      	movne	r0, r3
 800334a:	4610      	moveq	r0, r2
 800334c:	e000      	b.n	8003350 <_dtoa_r+0x90>
 800334e:	4890      	ldr	r0, [pc, #576]	; (8003590 <_dtoa_r+0x2d0>)
 8003350:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 8546 	beq.w	8003de4 <_dtoa_r+0xb24>
 8003358:	78c3      	ldrb	r3, [r0, #3]
 800335a:	b113      	cbz	r3, 8003362 <_dtoa_r+0xa2>
 800335c:	f100 0308 	add.w	r3, r0, #8
 8003360:	e000      	b.n	8003364 <_dtoa_r+0xa4>
 8003362:	1cc3      	adds	r3, r0, #3
 8003364:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	f000 bd3c 	b.w	8003de4 <_dtoa_r+0xb24>
 800336c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003370:	2200      	movs	r2, #0
 8003372:	2300      	movs	r3, #0
 8003374:	4620      	mov	r0, r4
 8003376:	4629      	mov	r1, r5
 8003378:	f7fd fb2a 	bl	80009d0 <__aeabi_dcmpeq>
 800337c:	4607      	mov	r7, r0
 800337e:	b158      	cbz	r0, 8003398 <_dtoa_r+0xd8>
 8003380:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003382:	2301      	movs	r3, #1
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 851e 	beq.w	8003dca <_dtoa_r+0xb0a>
 800338e:	4881      	ldr	r0, [pc, #516]	; (8003594 <_dtoa_r+0x2d4>)
 8003390:	6018      	str	r0, [r3, #0]
 8003392:	3801      	subs	r0, #1
 8003394:	f000 bd26 	b.w	8003de4 <_dtoa_r+0xb24>
 8003398:	ab12      	add	r3, sp, #72	; 0x48
 800339a:	9301      	str	r3, [sp, #4]
 800339c:	ab13      	add	r3, sp, #76	; 0x4c
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	4622      	mov	r2, r4
 80033a2:	462b      	mov	r3, r5
 80033a4:	4650      	mov	r0, sl
 80033a6:	f001 f9ed 	bl	8004784 <__d2b>
 80033aa:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80033ae:	9004      	str	r0, [sp, #16]
 80033b0:	b156      	cbz	r6, 80033c8 <_dtoa_r+0x108>
 80033b2:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80033b6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80033ba:	4620      	mov	r0, r4
 80033bc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80033c0:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 80033c4:	9711      	str	r7, [sp, #68]	; 0x44
 80033c6:	e01d      	b.n	8003404 <_dtoa_r+0x144>
 80033c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80033ca:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80033cc:	441e      	add	r6, r3
 80033ce:	f206 4332 	addw	r3, r6, #1074	; 0x432
 80033d2:	2b20      	cmp	r3, #32
 80033d4:	dd0a      	ble.n	80033ec <_dtoa_r+0x12c>
 80033d6:	9a02      	ldr	r2, [sp, #8]
 80033d8:	f206 4012 	addw	r0, r6, #1042	; 0x412
 80033dc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80033e0:	fa22 f000 	lsr.w	r0, r2, r0
 80033e4:	fa08 f303 	lsl.w	r3, r8, r3
 80033e8:	4318      	orrs	r0, r3
 80033ea:	e004      	b.n	80033f6 <_dtoa_r+0x136>
 80033ec:	f1c3 0020 	rsb	r0, r3, #32
 80033f0:	9b02      	ldr	r3, [sp, #8]
 80033f2:	fa03 f000 	lsl.w	r0, r3, r0
 80033f6:	f7fd f80d 	bl	8000414 <__aeabi_ui2d>
 80033fa:	2301      	movs	r3, #1
 80033fc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003400:	3e01      	subs	r6, #1
 8003402:	9311      	str	r3, [sp, #68]	; 0x44
 8003404:	2200      	movs	r2, #0
 8003406:	4b64      	ldr	r3, [pc, #400]	; (8003598 <_dtoa_r+0x2d8>)
 8003408:	f7fc fec6 	bl	8000198 <__aeabi_dsub>
 800340c:	a358      	add	r3, pc, #352	; (adr r3, 8003570 <_dtoa_r+0x2b0>)
 800340e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003412:	f7fd f875 	bl	8000500 <__aeabi_dmul>
 8003416:	a358      	add	r3, pc, #352	; (adr r3, 8003578 <_dtoa_r+0x2b8>)
 8003418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341c:	f7fc febe 	bl	800019c <__adddf3>
 8003420:	4604      	mov	r4, r0
 8003422:	4630      	mov	r0, r6
 8003424:	460d      	mov	r5, r1
 8003426:	f7fd f805 	bl	8000434 <__aeabi_i2d>
 800342a:	a355      	add	r3, pc, #340	; (adr r3, 8003580 <_dtoa_r+0x2c0>)
 800342c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003430:	f7fd f866 	bl	8000500 <__aeabi_dmul>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4620      	mov	r0, r4
 800343a:	4629      	mov	r1, r5
 800343c:	f7fc feae 	bl	800019c <__adddf3>
 8003440:	4604      	mov	r4, r0
 8003442:	460d      	mov	r5, r1
 8003444:	f7fd fb0c 	bl	8000a60 <__aeabi_d2iz>
 8003448:	2200      	movs	r2, #0
 800344a:	4683      	mov	fp, r0
 800344c:	2300      	movs	r3, #0
 800344e:	4620      	mov	r0, r4
 8003450:	4629      	mov	r1, r5
 8003452:	f7fd fac7 	bl	80009e4 <__aeabi_dcmplt>
 8003456:	b158      	cbz	r0, 8003470 <_dtoa_r+0x1b0>
 8003458:	4658      	mov	r0, fp
 800345a:	f7fc ffeb 	bl	8000434 <__aeabi_i2d>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	4620      	mov	r0, r4
 8003464:	4629      	mov	r1, r5
 8003466:	f7fd fab3 	bl	80009d0 <__aeabi_dcmpeq>
 800346a:	b908      	cbnz	r0, 8003470 <_dtoa_r+0x1b0>
 800346c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003470:	f1bb 0f16 	cmp.w	fp, #22
 8003474:	d80d      	bhi.n	8003492 <_dtoa_r+0x1d2>
 8003476:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800347a:	4948      	ldr	r1, [pc, #288]	; (800359c <_dtoa_r+0x2dc>)
 800347c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8003480:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003484:	f7fd facc 	bl	8000a20 <__aeabi_dcmpgt>
 8003488:	b130      	cbz	r0, 8003498 <_dtoa_r+0x1d8>
 800348a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800348e:	2300      	movs	r3, #0
 8003490:	e000      	b.n	8003494 <_dtoa_r+0x1d4>
 8003492:	2301      	movs	r3, #1
 8003494:	9310      	str	r3, [sp, #64]	; 0x40
 8003496:	e000      	b.n	800349a <_dtoa_r+0x1da>
 8003498:	9010      	str	r0, [sp, #64]	; 0x40
 800349a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800349c:	1b9e      	subs	r6, r3, r6
 800349e:	1e73      	subs	r3, r6, #1
 80034a0:	9307      	str	r3, [sp, #28]
 80034a2:	bf43      	ittte	mi
 80034a4:	f1c3 0800 	rsbmi	r8, r3, #0
 80034a8:	2300      	movmi	r3, #0
 80034aa:	9307      	strmi	r3, [sp, #28]
 80034ac:	f04f 0800 	movpl.w	r8, #0
 80034b0:	f1bb 0f00 	cmp.w	fp, #0
 80034b4:	db06      	blt.n	80034c4 <_dtoa_r+0x204>
 80034b6:	9b07      	ldr	r3, [sp, #28]
 80034b8:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80034bc:	445b      	add	r3, fp
 80034be:	9307      	str	r3, [sp, #28]
 80034c0:	2700      	movs	r7, #0
 80034c2:	e005      	b.n	80034d0 <_dtoa_r+0x210>
 80034c4:	2300      	movs	r3, #0
 80034c6:	ebcb 0808 	rsb	r8, fp, r8
 80034ca:	f1cb 0700 	rsb	r7, fp, #0
 80034ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80034d0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80034d2:	2b09      	cmp	r3, #9
 80034d4:	d828      	bhi.n	8003528 <_dtoa_r+0x268>
 80034d6:	2b05      	cmp	r3, #5
 80034d8:	bfc4      	itt	gt
 80034da:	3b04      	subgt	r3, #4
 80034dc:	931e      	strgt	r3, [sp, #120]	; 0x78
 80034de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80034e0:	bfc8      	it	gt
 80034e2:	2500      	movgt	r5, #0
 80034e4:	f1a3 0302 	sub.w	r3, r3, #2
 80034e8:	bfd8      	it	le
 80034ea:	2501      	movle	r5, #1
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d820      	bhi.n	8003532 <_dtoa_r+0x272>
 80034f0:	e8df f003 	tbb	[pc, r3]
 80034f4:	04020e06 	.word	0x04020e06
 80034f8:	2301      	movs	r3, #1
 80034fa:	e002      	b.n	8003502 <_dtoa_r+0x242>
 80034fc:	2301      	movs	r3, #1
 80034fe:	e008      	b.n	8003512 <_dtoa_r+0x252>
 8003500:	2300      	movs	r3, #0
 8003502:	930a      	str	r3, [sp, #40]	; 0x28
 8003504:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003506:	2b00      	cmp	r3, #0
 8003508:	dd1d      	ble.n	8003546 <_dtoa_r+0x286>
 800350a:	4699      	mov	r9, r3
 800350c:	9305      	str	r3, [sp, #20]
 800350e:	e021      	b.n	8003554 <_dtoa_r+0x294>
 8003510:	2300      	movs	r3, #0
 8003512:	930a      	str	r3, [sp, #40]	; 0x28
 8003514:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003516:	eb0b 0903 	add.w	r9, fp, r3
 800351a:	f109 0301 	add.w	r3, r9, #1
 800351e:	2b01      	cmp	r3, #1
 8003520:	9305      	str	r3, [sp, #20]
 8003522:	bfb8      	it	lt
 8003524:	2301      	movlt	r3, #1
 8003526:	e015      	b.n	8003554 <_dtoa_r+0x294>
 8003528:	2501      	movs	r5, #1
 800352a:	2300      	movs	r3, #0
 800352c:	931e      	str	r3, [sp, #120]	; 0x78
 800352e:	950a      	str	r5, [sp, #40]	; 0x28
 8003530:	e001      	b.n	8003536 <_dtoa_r+0x276>
 8003532:	2301      	movs	r3, #1
 8003534:	930a      	str	r3, [sp, #40]	; 0x28
 8003536:	f04f 39ff 	mov.w	r9, #4294967295
 800353a:	2200      	movs	r2, #0
 800353c:	f8cd 9014 	str.w	r9, [sp, #20]
 8003540:	2312      	movs	r3, #18
 8003542:	921f      	str	r2, [sp, #124]	; 0x7c
 8003544:	e006      	b.n	8003554 <_dtoa_r+0x294>
 8003546:	f04f 0901 	mov.w	r9, #1
 800354a:	464b      	mov	r3, r9
 800354c:	f8cd 9014 	str.w	r9, [sp, #20]
 8003550:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
 8003554:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8003558:	2200      	movs	r2, #0
 800355a:	6062      	str	r2, [r4, #4]
 800355c:	2104      	movs	r1, #4
 800355e:	f101 0214 	add.w	r2, r1, #20
 8003562:	429a      	cmp	r2, r3
 8003564:	d81c      	bhi.n	80035a0 <_dtoa_r+0x2e0>
 8003566:	6862      	ldr	r2, [r4, #4]
 8003568:	0049      	lsls	r1, r1, #1
 800356a:	3201      	adds	r2, #1
 800356c:	6062      	str	r2, [r4, #4]
 800356e:	e7f6      	b.n	800355e <_dtoa_r+0x29e>
 8003570:	636f4361 	.word	0x636f4361
 8003574:	3fd287a7 	.word	0x3fd287a7
 8003578:	8b60c8b3 	.word	0x8b60c8b3
 800357c:	3fc68a28 	.word	0x3fc68a28
 8003580:	509f79fb 	.word	0x509f79fb
 8003584:	3fd34413 	.word	0x3fd34413
 8003588:	7ff00000 	.word	0x7ff00000
 800358c:	08004ffc 	.word	0x08004ffc
 8003590:	08005005 	.word	0x08005005
 8003594:	08004feb 	.word	0x08004feb
 8003598:	3ff80000 	.word	0x3ff80000
 800359c:	08005018 	.word	0x08005018
 80035a0:	6861      	ldr	r1, [r4, #4]
 80035a2:	4650      	mov	r0, sl
 80035a4:	f000 fe67 	bl	8004276 <_Balloc>
 80035a8:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80035ac:	6020      	str	r0, [r4, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	9306      	str	r3, [sp, #24]
 80035b2:	9b05      	ldr	r3, [sp, #20]
 80035b4:	2b0e      	cmp	r3, #14
 80035b6:	f200 815b 	bhi.w	8003870 <_dtoa_r+0x5b0>
 80035ba:	2d00      	cmp	r5, #0
 80035bc:	f000 8158 	beq.w	8003870 <_dtoa_r+0x5b0>
 80035c0:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 80035c4:	f1bb 0f00 	cmp.w	fp, #0
 80035c8:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
 80035cc:	dd30      	ble.n	8003630 <_dtoa_r+0x370>
 80035ce:	4a9f      	ldr	r2, [pc, #636]	; (800384c <_dtoa_r+0x58c>)
 80035d0:	f00b 030f 	and.w	r3, fp, #15
 80035d4:	ea4f 152b 	mov.w	r5, fp, asr #4
 80035d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80035dc:	06e8      	lsls	r0, r5, #27
 80035de:	cb18      	ldmia	r3, {r3, r4}
 80035e0:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80035e4:	d50c      	bpl.n	8003600 <_dtoa_r+0x340>
 80035e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80035ea:	4b99      	ldr	r3, [pc, #612]	; (8003850 <_dtoa_r+0x590>)
 80035ec:	f005 050f 	and.w	r5, r5, #15
 80035f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80035f4:	f7fd f8ae 	bl	8000754 <__aeabi_ddiv>
 80035f8:	2403      	movs	r4, #3
 80035fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80035fe:	e000      	b.n	8003602 <_dtoa_r+0x342>
 8003600:	2402      	movs	r4, #2
 8003602:	4e93      	ldr	r6, [pc, #588]	; (8003850 <_dtoa_r+0x590>)
 8003604:	b16d      	cbz	r5, 8003622 <_dtoa_r+0x362>
 8003606:	07e9      	lsls	r1, r5, #31
 8003608:	d508      	bpl.n	800361c <_dtoa_r+0x35c>
 800360a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800360e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003612:	f7fc ff75 	bl	8000500 <__aeabi_dmul>
 8003616:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800361a:	3401      	adds	r4, #1
 800361c:	106d      	asrs	r5, r5, #1
 800361e:	3608      	adds	r6, #8
 8003620:	e7f0      	b.n	8003604 <_dtoa_r+0x344>
 8003622:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800362a:	f7fd f893 	bl	8000754 <__aeabi_ddiv>
 800362e:	e020      	b.n	8003672 <_dtoa_r+0x3b2>
 8003630:	f1cb 0500 	rsb	r5, fp, #0
 8003634:	b305      	cbz	r5, 8003678 <_dtoa_r+0x3b8>
 8003636:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800363a:	4b84      	ldr	r3, [pc, #528]	; (800384c <_dtoa_r+0x58c>)
 800363c:	f005 020f 	and.w	r2, r5, #15
 8003640:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003648:	f7fc ff5a 	bl	8000500 <__aeabi_dmul>
 800364c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003650:	4e7f      	ldr	r6, [pc, #508]	; (8003850 <_dtoa_r+0x590>)
 8003652:	112d      	asrs	r5, r5, #4
 8003654:	2300      	movs	r3, #0
 8003656:	2402      	movs	r4, #2
 8003658:	b155      	cbz	r5, 8003670 <_dtoa_r+0x3b0>
 800365a:	07ea      	lsls	r2, r5, #31
 800365c:	d505      	bpl.n	800366a <_dtoa_r+0x3aa>
 800365e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003662:	f7fc ff4d 	bl	8000500 <__aeabi_dmul>
 8003666:	3401      	adds	r4, #1
 8003668:	2301      	movs	r3, #1
 800366a:	106d      	asrs	r5, r5, #1
 800366c:	3608      	adds	r6, #8
 800366e:	e7f3      	b.n	8003658 <_dtoa_r+0x398>
 8003670:	b11b      	cbz	r3, 800367a <_dtoa_r+0x3ba>
 8003672:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003676:	e000      	b.n	800367a <_dtoa_r+0x3ba>
 8003678:	2402      	movs	r4, #2
 800367a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800367c:	b1e3      	cbz	r3, 80036b8 <_dtoa_r+0x3f8>
 800367e:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
 8003682:	2200      	movs	r2, #0
 8003684:	4b73      	ldr	r3, [pc, #460]	; (8003854 <_dtoa_r+0x594>)
 8003686:	4628      	mov	r0, r5
 8003688:	4631      	mov	r1, r6
 800368a:	f7fd f9ab 	bl	80009e4 <__aeabi_dcmplt>
 800368e:	b198      	cbz	r0, 80036b8 <_dtoa_r+0x3f8>
 8003690:	9b05      	ldr	r3, [sp, #20]
 8003692:	b18b      	cbz	r3, 80036b8 <_dtoa_r+0x3f8>
 8003694:	f1b9 0f00 	cmp.w	r9, #0
 8003698:	f340 80e6 	ble.w	8003868 <_dtoa_r+0x5a8>
 800369c:	f10b 33ff 	add.w	r3, fp, #4294967295
 80036a0:	9308      	str	r3, [sp, #32]
 80036a2:	4631      	mov	r1, r6
 80036a4:	2200      	movs	r2, #0
 80036a6:	4b6c      	ldr	r3, [pc, #432]	; (8003858 <_dtoa_r+0x598>)
 80036a8:	4628      	mov	r0, r5
 80036aa:	f7fc ff29 	bl	8000500 <__aeabi_dmul>
 80036ae:	3401      	adds	r4, #1
 80036b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80036b4:	464e      	mov	r6, r9
 80036b6:	e002      	b.n	80036be <_dtoa_r+0x3fe>
 80036b8:	9e05      	ldr	r6, [sp, #20]
 80036ba:	f8cd b020 	str.w	fp, [sp, #32]
 80036be:	4620      	mov	r0, r4
 80036c0:	f7fc feb8 	bl	8000434 <__aeabi_i2d>
 80036c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80036c8:	f7fc ff1a 	bl	8000500 <__aeabi_dmul>
 80036cc:	4b63      	ldr	r3, [pc, #396]	; (800385c <_dtoa_r+0x59c>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	f7fc fd64 	bl	800019c <__adddf3>
 80036d4:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80036d8:	4604      	mov	r4, r0
 80036da:	930c      	str	r3, [sp, #48]	; 0x30
 80036dc:	461d      	mov	r5, r3
 80036de:	b9d6      	cbnz	r6, 8003716 <_dtoa_r+0x456>
 80036e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036e4:	2200      	movs	r2, #0
 80036e6:	4b5e      	ldr	r3, [pc, #376]	; (8003860 <_dtoa_r+0x5a0>)
 80036e8:	f7fc fd56 	bl	8000198 <__aeabi_dsub>
 80036ec:	4622      	mov	r2, r4
 80036ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80036f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80036f4:	f7fd f994 	bl	8000a20 <__aeabi_dcmpgt>
 80036f8:	2800      	cmp	r0, #0
 80036fa:	f040 823f 	bne.w	8003b7c <_dtoa_r+0x8bc>
 80036fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003700:	4622      	mov	r2, r4
 8003702:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800370a:	f7fd f96b 	bl	80009e4 <__aeabi_dcmplt>
 800370e:	2800      	cmp	r0, #0
 8003710:	f040 822b 	bne.w	8003b6a <_dtoa_r+0x8aa>
 8003714:	e0a8      	b.n	8003868 <_dtoa_r+0x5a8>
 8003716:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003718:	4b4c      	ldr	r3, [pc, #304]	; (800384c <_dtoa_r+0x58c>)
 800371a:	1e71      	subs	r1, r6, #1
 800371c:	2a00      	cmp	r2, #0
 800371e:	d049      	beq.n	80037b4 <_dtoa_r+0x4f4>
 8003720:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003728:	2000      	movs	r0, #0
 800372a:	494e      	ldr	r1, [pc, #312]	; (8003864 <_dtoa_r+0x5a4>)
 800372c:	f7fd f812 	bl	8000754 <__aeabi_ddiv>
 8003730:	4622      	mov	r2, r4
 8003732:	462b      	mov	r3, r5
 8003734:	f7fc fd30 	bl	8000198 <__aeabi_dsub>
 8003738:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800373c:	9c06      	ldr	r4, [sp, #24]
 800373e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003742:	f7fd f98d 	bl	8000a60 <__aeabi_d2iz>
 8003746:	4605      	mov	r5, r0
 8003748:	f7fc fe74 	bl	8000434 <__aeabi_i2d>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003754:	f7fc fd20 	bl	8000198 <__aeabi_dsub>
 8003758:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800375c:	3530      	adds	r5, #48	; 0x30
 800375e:	f804 5b01 	strb.w	r5, [r4], #1
 8003762:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003766:	f7fd f93d 	bl	80009e4 <__aeabi_dcmplt>
 800376a:	2800      	cmp	r0, #0
 800376c:	f040 831d 	bne.w	8003daa <_dtoa_r+0xaea>
 8003770:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003774:	2000      	movs	r0, #0
 8003776:	4937      	ldr	r1, [pc, #220]	; (8003854 <_dtoa_r+0x594>)
 8003778:	f7fc fd0e 	bl	8000198 <__aeabi_dsub>
 800377c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003780:	f7fd f930 	bl	80009e4 <__aeabi_dcmplt>
 8003784:	2800      	cmp	r0, #0
 8003786:	f040 80d1 	bne.w	800392c <_dtoa_r+0x66c>
 800378a:	9b06      	ldr	r3, [sp, #24]
 800378c:	1ae3      	subs	r3, r4, r3
 800378e:	42b3      	cmp	r3, r6
 8003790:	da6a      	bge.n	8003868 <_dtoa_r+0x5a8>
 8003792:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003796:	2200      	movs	r2, #0
 8003798:	4b2f      	ldr	r3, [pc, #188]	; (8003858 <_dtoa_r+0x598>)
 800379a:	f7fc feb1 	bl	8000500 <__aeabi_dmul>
 800379e:	2200      	movs	r2, #0
 80037a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80037a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037a8:	4b2b      	ldr	r3, [pc, #172]	; (8003858 <_dtoa_r+0x598>)
 80037aa:	f7fc fea9 	bl	8000500 <__aeabi_dmul>
 80037ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80037b2:	e7c4      	b.n	800373e <_dtoa_r+0x47e>
 80037b4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80037b8:	4622      	mov	r2, r4
 80037ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037be:	462b      	mov	r3, r5
 80037c0:	f7fc fe9e 	bl	8000500 <__aeabi_dmul>
 80037c4:	9b06      	ldr	r3, [sp, #24]
 80037c6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80037ca:	461d      	mov	r5, r3
 80037cc:	199c      	adds	r4, r3, r6
 80037ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037d2:	f7fd f945 	bl	8000a60 <__aeabi_d2iz>
 80037d6:	4606      	mov	r6, r0
 80037d8:	f7fc fe2c 	bl	8000434 <__aeabi_i2d>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037e4:	f7fc fcd8 	bl	8000198 <__aeabi_dsub>
 80037e8:	3630      	adds	r6, #48	; 0x30
 80037ea:	f805 6b01 	strb.w	r6, [r5], #1
 80037ee:	42ac      	cmp	r4, r5
 80037f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	d122      	bne.n	8003840 <_dtoa_r+0x580>
 80037fa:	4b1a      	ldr	r3, [pc, #104]	; (8003864 <_dtoa_r+0x5a4>)
 80037fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003800:	f7fc fccc 	bl	800019c <__adddf3>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800380c:	f7fd f908 	bl	8000a20 <__aeabi_dcmpgt>
 8003810:	2800      	cmp	r0, #0
 8003812:	f040 808b 	bne.w	800392c <_dtoa_r+0x66c>
 8003816:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800381a:	2000      	movs	r0, #0
 800381c:	4911      	ldr	r1, [pc, #68]	; (8003864 <_dtoa_r+0x5a4>)
 800381e:	f7fc fcbb 	bl	8000198 <__aeabi_dsub>
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800382a:	f7fd f8db 	bl	80009e4 <__aeabi_dcmplt>
 800382e:	b1d8      	cbz	r0, 8003868 <_dtoa_r+0x5a8>
 8003830:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8003834:	1e62      	subs	r2, r4, #1
 8003836:	2b30      	cmp	r3, #48	; 0x30
 8003838:	f040 82b7 	bne.w	8003daa <_dtoa_r+0xaea>
 800383c:	4614      	mov	r4, r2
 800383e:	e7f7      	b.n	8003830 <_dtoa_r+0x570>
 8003840:	4b05      	ldr	r3, [pc, #20]	; (8003858 <_dtoa_r+0x598>)
 8003842:	f7fc fe5d 	bl	8000500 <__aeabi_dmul>
 8003846:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800384a:	e7c0      	b.n	80037ce <_dtoa_r+0x50e>
 800384c:	08005018 	.word	0x08005018
 8003850:	080050e0 	.word	0x080050e0
 8003854:	3ff00000 	.word	0x3ff00000
 8003858:	40240000 	.word	0x40240000
 800385c:	401c0000 	.word	0x401c0000
 8003860:	40140000 	.word	0x40140000
 8003864:	3fe00000 	.word	0x3fe00000
 8003868:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 800386c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003870:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003872:	2b00      	cmp	r3, #0
 8003874:	db7c      	blt.n	8003970 <_dtoa_r+0x6b0>
 8003876:	f1bb 0f0e 	cmp.w	fp, #14
 800387a:	dc79      	bgt.n	8003970 <_dtoa_r+0x6b0>
 800387c:	4bab      	ldr	r3, [pc, #684]	; (8003b2c <_dtoa_r+0x86c>)
 800387e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003882:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003886:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003888:	2b00      	cmp	r3, #0
 800388a:	da14      	bge.n	80038b6 <_dtoa_r+0x5f6>
 800388c:	9b05      	ldr	r3, [sp, #20]
 800388e:	2b00      	cmp	r3, #0
 8003890:	dc11      	bgt.n	80038b6 <_dtoa_r+0x5f6>
 8003892:	f040 816c 	bne.w	8003b6e <_dtoa_r+0x8ae>
 8003896:	2200      	movs	r2, #0
 8003898:	4ba5      	ldr	r3, [pc, #660]	; (8003b30 <_dtoa_r+0x870>)
 800389a:	4630      	mov	r0, r6
 800389c:	4639      	mov	r1, r7
 800389e:	f7fc fe2f 	bl	8000500 <__aeabi_dmul>
 80038a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80038a6:	f7fd f8b1 	bl	8000a0c <__aeabi_dcmpge>
 80038aa:	9d05      	ldr	r5, [sp, #20]
 80038ac:	462e      	mov	r6, r5
 80038ae:	2800      	cmp	r0, #0
 80038b0:	f040 815f 	bne.w	8003b72 <_dtoa_r+0x8b2>
 80038b4:	e165      	b.n	8003b82 <_dtoa_r+0x8c2>
 80038b6:	9c06      	ldr	r4, [sp, #24]
 80038b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80038bc:	4632      	mov	r2, r6
 80038be:	463b      	mov	r3, r7
 80038c0:	4640      	mov	r0, r8
 80038c2:	4649      	mov	r1, r9
 80038c4:	f7fc ff46 	bl	8000754 <__aeabi_ddiv>
 80038c8:	f7fd f8ca 	bl	8000a60 <__aeabi_d2iz>
 80038cc:	4605      	mov	r5, r0
 80038ce:	f7fc fdb1 	bl	8000434 <__aeabi_i2d>
 80038d2:	4632      	mov	r2, r6
 80038d4:	463b      	mov	r3, r7
 80038d6:	f7fc fe13 	bl	8000500 <__aeabi_dmul>
 80038da:	460b      	mov	r3, r1
 80038dc:	4602      	mov	r2, r0
 80038de:	4649      	mov	r1, r9
 80038e0:	4640      	mov	r0, r8
 80038e2:	f7fc fc59 	bl	8000198 <__aeabi_dsub>
 80038e6:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 80038ea:	9b06      	ldr	r3, [sp, #24]
 80038ec:	f804 eb01 	strb.w	lr, [r4], #1
 80038f0:	ebc3 0e04 	rsb	lr, r3, r4
 80038f4:	9b05      	ldr	r3, [sp, #20]
 80038f6:	4573      	cmp	r3, lr
 80038f8:	d12d      	bne.n	8003956 <_dtoa_r+0x696>
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	f7fc fc4d 	bl	800019c <__adddf3>
 8003902:	4680      	mov	r8, r0
 8003904:	4689      	mov	r9, r1
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4630      	mov	r0, r6
 800390c:	4639      	mov	r1, r7
 800390e:	f7fd f869 	bl	80009e4 <__aeabi_dcmplt>
 8003912:	b978      	cbnz	r0, 8003934 <_dtoa_r+0x674>
 8003914:	4642      	mov	r2, r8
 8003916:	464b      	mov	r3, r9
 8003918:	4630      	mov	r0, r6
 800391a:	4639      	mov	r1, r7
 800391c:	f7fd f858 	bl	80009d0 <__aeabi_dcmpeq>
 8003920:	2800      	cmp	r0, #0
 8003922:	f000 8244 	beq.w	8003dae <_dtoa_r+0xaee>
 8003926:	07eb      	lsls	r3, r5, #31
 8003928:	d404      	bmi.n	8003934 <_dtoa_r+0x674>
 800392a:	e240      	b.n	8003dae <_dtoa_r+0xaee>
 800392c:	f8dd b020 	ldr.w	fp, [sp, #32]
 8003930:	e000      	b.n	8003934 <_dtoa_r+0x674>
 8003932:	461c      	mov	r4, r3
 8003934:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8003938:	1e63      	subs	r3, r4, #1
 800393a:	2a39      	cmp	r2, #57	; 0x39
 800393c:	d107      	bne.n	800394e <_dtoa_r+0x68e>
 800393e:	9a06      	ldr	r2, [sp, #24]
 8003940:	429a      	cmp	r2, r3
 8003942:	d1f6      	bne.n	8003932 <_dtoa_r+0x672>
 8003944:	9906      	ldr	r1, [sp, #24]
 8003946:	2230      	movs	r2, #48	; 0x30
 8003948:	f10b 0b01 	add.w	fp, fp, #1
 800394c:	700a      	strb	r2, [r1, #0]
 800394e:	781a      	ldrb	r2, [r3, #0]
 8003950:	3201      	adds	r2, #1
 8003952:	701a      	strb	r2, [r3, #0]
 8003954:	e22b      	b.n	8003dae <_dtoa_r+0xaee>
 8003956:	2200      	movs	r2, #0
 8003958:	4b76      	ldr	r3, [pc, #472]	; (8003b34 <_dtoa_r+0x874>)
 800395a:	f7fc fdd1 	bl	8000500 <__aeabi_dmul>
 800395e:	2200      	movs	r2, #0
 8003960:	2300      	movs	r3, #0
 8003962:	4680      	mov	r8, r0
 8003964:	4689      	mov	r9, r1
 8003966:	f7fd f833 	bl	80009d0 <__aeabi_dcmpeq>
 800396a:	2800      	cmp	r0, #0
 800396c:	d0a6      	beq.n	80038bc <_dtoa_r+0x5fc>
 800396e:	e21e      	b.n	8003dae <_dtoa_r+0xaee>
 8003970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003972:	2a00      	cmp	r2, #0
 8003974:	d02b      	beq.n	80039ce <_dtoa_r+0x70e>
 8003976:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003978:	2a01      	cmp	r2, #1
 800397a:	dc0a      	bgt.n	8003992 <_dtoa_r+0x6d2>
 800397c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800397e:	b112      	cbz	r2, 8003986 <_dtoa_r+0x6c6>
 8003980:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003984:	e002      	b.n	800398c <_dtoa_r+0x6cc>
 8003986:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003988:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800398c:	463d      	mov	r5, r7
 800398e:	4644      	mov	r4, r8
 8003990:	e013      	b.n	80039ba <_dtoa_r+0x6fa>
 8003992:	9b05      	ldr	r3, [sp, #20]
 8003994:	1e5d      	subs	r5, r3, #1
 8003996:	42af      	cmp	r7, r5
 8003998:	bfbf      	itttt	lt
 800399a:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800399c:	1bea      	sublt	r2, r5, r7
 800399e:	189b      	addlt	r3, r3, r2
 80039a0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80039a2:	9b05      	ldr	r3, [sp, #20]
 80039a4:	bfb6      	itet	lt
 80039a6:	462f      	movlt	r7, r5
 80039a8:	1b7d      	subge	r5, r7, r5
 80039aa:	2500      	movlt	r5, #0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	bfa7      	ittee	ge
 80039b0:	4644      	movge	r4, r8
 80039b2:	9b05      	ldrge	r3, [sp, #20]
 80039b4:	ebc3 0408 	rsblt	r4, r3, r8
 80039b8:	2300      	movlt	r3, #0
 80039ba:	9a07      	ldr	r2, [sp, #28]
 80039bc:	2101      	movs	r1, #1
 80039be:	441a      	add	r2, r3
 80039c0:	4650      	mov	r0, sl
 80039c2:	4498      	add	r8, r3
 80039c4:	9207      	str	r2, [sp, #28]
 80039c6:	f000 fd2a 	bl	800441e <__i2b>
 80039ca:	4606      	mov	r6, r0
 80039cc:	e002      	b.n	80039d4 <_dtoa_r+0x714>
 80039ce:	463d      	mov	r5, r7
 80039d0:	4644      	mov	r4, r8
 80039d2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80039d4:	b15c      	cbz	r4, 80039ee <_dtoa_r+0x72e>
 80039d6:	9b07      	ldr	r3, [sp, #28]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	dd08      	ble.n	80039ee <_dtoa_r+0x72e>
 80039dc:	42a3      	cmp	r3, r4
 80039de:	bfa8      	it	ge
 80039e0:	4623      	movge	r3, r4
 80039e2:	9a07      	ldr	r2, [sp, #28]
 80039e4:	ebc3 0808 	rsb	r8, r3, r8
 80039e8:	1ae4      	subs	r4, r4, r3
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	9307      	str	r3, [sp, #28]
 80039ee:	2f00      	cmp	r7, #0
 80039f0:	dd1d      	ble.n	8003a2e <_dtoa_r+0x76e>
 80039f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039f4:	b1ab      	cbz	r3, 8003a22 <_dtoa_r+0x762>
 80039f6:	b18d      	cbz	r5, 8003a1c <_dtoa_r+0x75c>
 80039f8:	4631      	mov	r1, r6
 80039fa:	462a      	mov	r2, r5
 80039fc:	4650      	mov	r0, sl
 80039fe:	f000 fda7 	bl	8004550 <__pow5mult>
 8003a02:	9a04      	ldr	r2, [sp, #16]
 8003a04:	4601      	mov	r1, r0
 8003a06:	4606      	mov	r6, r0
 8003a08:	4650      	mov	r0, sl
 8003a0a:	f000 fd11 	bl	8004430 <__multiply>
 8003a0e:	9904      	ldr	r1, [sp, #16]
 8003a10:	9008      	str	r0, [sp, #32]
 8003a12:	4650      	mov	r0, sl
 8003a14:	f000 fc64 	bl	80042e0 <_Bfree>
 8003a18:	9b08      	ldr	r3, [sp, #32]
 8003a1a:	9304      	str	r3, [sp, #16]
 8003a1c:	1b7a      	subs	r2, r7, r5
 8003a1e:	d006      	beq.n	8003a2e <_dtoa_r+0x76e>
 8003a20:	e000      	b.n	8003a24 <_dtoa_r+0x764>
 8003a22:	463a      	mov	r2, r7
 8003a24:	9904      	ldr	r1, [sp, #16]
 8003a26:	4650      	mov	r0, sl
 8003a28:	f000 fd92 	bl	8004550 <__pow5mult>
 8003a2c:	9004      	str	r0, [sp, #16]
 8003a2e:	2101      	movs	r1, #1
 8003a30:	4650      	mov	r0, sl
 8003a32:	f000 fcf4 	bl	800441e <__i2b>
 8003a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a38:	4605      	mov	r5, r0
 8003a3a:	b35b      	cbz	r3, 8003a94 <_dtoa_r+0x7d4>
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	4601      	mov	r1, r0
 8003a40:	4650      	mov	r0, sl
 8003a42:	f000 fd85 	bl	8004550 <__pow5mult>
 8003a46:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003a48:	4605      	mov	r5, r0
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	dc18      	bgt.n	8003a80 <_dtoa_r+0x7c0>
 8003a4e:	9b02      	ldr	r3, [sp, #8]
 8003a50:	b983      	cbnz	r3, 8003a74 <_dtoa_r+0x7b4>
 8003a52:	9b03      	ldr	r3, [sp, #12]
 8003a54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a58:	b973      	cbnz	r3, 8003a78 <_dtoa_r+0x7b8>
 8003a5a:	9b03      	ldr	r3, [sp, #12]
 8003a5c:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8003a60:	0d3f      	lsrs	r7, r7, #20
 8003a62:	053f      	lsls	r7, r7, #20
 8003a64:	b14f      	cbz	r7, 8003a7a <_dtoa_r+0x7ba>
 8003a66:	9b07      	ldr	r3, [sp, #28]
 8003a68:	f108 0801 	add.w	r8, r8, #1
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	9307      	str	r3, [sp, #28]
 8003a70:	2701      	movs	r7, #1
 8003a72:	e002      	b.n	8003a7a <_dtoa_r+0x7ba>
 8003a74:	2700      	movs	r7, #0
 8003a76:	e000      	b.n	8003a7a <_dtoa_r+0x7ba>
 8003a78:	9f02      	ldr	r7, [sp, #8]
 8003a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a7c:	b173      	cbz	r3, 8003a9c <_dtoa_r+0x7dc>
 8003a7e:	e000      	b.n	8003a82 <_dtoa_r+0x7c2>
 8003a80:	2700      	movs	r7, #0
 8003a82:	692b      	ldr	r3, [r5, #16]
 8003a84:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003a88:	6918      	ldr	r0, [r3, #16]
 8003a8a:	f000 fc7b 	bl	8004384 <__hi0bits>
 8003a8e:	f1c0 0020 	rsb	r0, r0, #32
 8003a92:	e004      	b.n	8003a9e <_dtoa_r+0x7de>
 8003a94:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	ddd9      	ble.n	8003a4e <_dtoa_r+0x78e>
 8003a9a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	9b07      	ldr	r3, [sp, #28]
 8003aa0:	4418      	add	r0, r3
 8003aa2:	f010 001f 	ands.w	r0, r0, #31
 8003aa6:	d008      	beq.n	8003aba <_dtoa_r+0x7fa>
 8003aa8:	f1c0 0320 	rsb	r3, r0, #32
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	dd02      	ble.n	8003ab6 <_dtoa_r+0x7f6>
 8003ab0:	f1c0 001c 	rsb	r0, r0, #28
 8003ab4:	e002      	b.n	8003abc <_dtoa_r+0x7fc>
 8003ab6:	d006      	beq.n	8003ac6 <_dtoa_r+0x806>
 8003ab8:	4618      	mov	r0, r3
 8003aba:	301c      	adds	r0, #28
 8003abc:	9b07      	ldr	r3, [sp, #28]
 8003abe:	4480      	add	r8, r0
 8003ac0:	4403      	add	r3, r0
 8003ac2:	4404      	add	r4, r0
 8003ac4:	9307      	str	r3, [sp, #28]
 8003ac6:	f1b8 0f00 	cmp.w	r8, #0
 8003aca:	dd05      	ble.n	8003ad8 <_dtoa_r+0x818>
 8003acc:	4642      	mov	r2, r8
 8003ace:	9904      	ldr	r1, [sp, #16]
 8003ad0:	4650      	mov	r0, sl
 8003ad2:	f000 fd8b 	bl	80045ec <__lshift>
 8003ad6:	9004      	str	r0, [sp, #16]
 8003ad8:	9b07      	ldr	r3, [sp, #28]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	dd05      	ble.n	8003aea <_dtoa_r+0x82a>
 8003ade:	4629      	mov	r1, r5
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4650      	mov	r0, sl
 8003ae4:	f000 fd82 	bl	80045ec <__lshift>
 8003ae8:	4605      	mov	r5, r0
 8003aea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003aec:	b323      	cbz	r3, 8003b38 <_dtoa_r+0x878>
 8003aee:	4629      	mov	r1, r5
 8003af0:	9804      	ldr	r0, [sp, #16]
 8003af2:	f000 fdcc 	bl	800468e <__mcmp>
 8003af6:	2800      	cmp	r0, #0
 8003af8:	da1e      	bge.n	8003b38 <_dtoa_r+0x878>
 8003afa:	2300      	movs	r3, #0
 8003afc:	220a      	movs	r2, #10
 8003afe:	9904      	ldr	r1, [sp, #16]
 8003b00:	4650      	mov	r0, sl
 8003b02:	f000 fc04 	bl	800430e <__multadd>
 8003b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b08:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003b0c:	9004      	str	r0, [sp, #16]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 815f 	beq.w	8003dd2 <_dtoa_r+0xb12>
 8003b14:	4631      	mov	r1, r6
 8003b16:	2300      	movs	r3, #0
 8003b18:	220a      	movs	r2, #10
 8003b1a:	4650      	mov	r0, sl
 8003b1c:	f000 fbf7 	bl	800430e <__multadd>
 8003b20:	f1b9 0f00 	cmp.w	r9, #0
 8003b24:	4606      	mov	r6, r0
 8003b26:	dc3f      	bgt.n	8003ba8 <_dtoa_r+0x8e8>
 8003b28:	e03b      	b.n	8003ba2 <_dtoa_r+0x8e2>
 8003b2a:	bf00      	nop
 8003b2c:	08005018 	.word	0x08005018
 8003b30:	40140000 	.word	0x40140000
 8003b34:	40240000 	.word	0x40240000
 8003b38:	9b05      	ldr	r3, [sp, #20]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	dc2b      	bgt.n	8003b96 <_dtoa_r+0x8d6>
 8003b3e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	dd28      	ble.n	8003b96 <_dtoa_r+0x8d6>
 8003b44:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003b48:	f1b9 0f00 	cmp.w	r9, #0
 8003b4c:	d111      	bne.n	8003b72 <_dtoa_r+0x8b2>
 8003b4e:	4629      	mov	r1, r5
 8003b50:	464b      	mov	r3, r9
 8003b52:	2205      	movs	r2, #5
 8003b54:	4650      	mov	r0, sl
 8003b56:	f000 fbda 	bl	800430e <__multadd>
 8003b5a:	4601      	mov	r1, r0
 8003b5c:	4605      	mov	r5, r0
 8003b5e:	9804      	ldr	r0, [sp, #16]
 8003b60:	f000 fd95 	bl	800468e <__mcmp>
 8003b64:	2800      	cmp	r0, #0
 8003b66:	dc0c      	bgt.n	8003b82 <_dtoa_r+0x8c2>
 8003b68:	e003      	b.n	8003b72 <_dtoa_r+0x8b2>
 8003b6a:	4635      	mov	r5, r6
 8003b6c:	e000      	b.n	8003b70 <_dtoa_r+0x8b0>
 8003b6e:	2500      	movs	r5, #0
 8003b70:	462e      	mov	r6, r5
 8003b72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003b74:	9c06      	ldr	r4, [sp, #24]
 8003b76:	ea6f 0b03 	mvn.w	fp, r3
 8003b7a:	e009      	b.n	8003b90 <_dtoa_r+0x8d0>
 8003b7c:	4635      	mov	r5, r6
 8003b7e:	f8dd b020 	ldr.w	fp, [sp, #32]
 8003b82:	9b06      	ldr	r3, [sp, #24]
 8003b84:	9a06      	ldr	r2, [sp, #24]
 8003b86:	1c5c      	adds	r4, r3, #1
 8003b88:	2331      	movs	r3, #49	; 0x31
 8003b8a:	7013      	strb	r3, [r2, #0]
 8003b8c:	f10b 0b01 	add.w	fp, fp, #1
 8003b90:	9605      	str	r6, [sp, #20]
 8003b92:	2600      	movs	r6, #0
 8003b94:	e0f7      	b.n	8003d86 <_dtoa_r+0xac6>
 8003b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b98:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003b9c:	b923      	cbnz	r3, 8003ba8 <_dtoa_r+0x8e8>
 8003b9e:	9c06      	ldr	r4, [sp, #24]
 8003ba0:	e0b2      	b.n	8003d08 <_dtoa_r+0xa48>
 8003ba2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	dccf      	bgt.n	8003b48 <_dtoa_r+0x888>
 8003ba8:	2c00      	cmp	r4, #0
 8003baa:	dd05      	ble.n	8003bb8 <_dtoa_r+0x8f8>
 8003bac:	4631      	mov	r1, r6
 8003bae:	4622      	mov	r2, r4
 8003bb0:	4650      	mov	r0, sl
 8003bb2:	f000 fd1b 	bl	80045ec <__lshift>
 8003bb6:	4606      	mov	r6, r0
 8003bb8:	b19f      	cbz	r7, 8003be2 <_dtoa_r+0x922>
 8003bba:	6871      	ldr	r1, [r6, #4]
 8003bbc:	4650      	mov	r0, sl
 8003bbe:	f000 fb5a 	bl	8004276 <_Balloc>
 8003bc2:	4604      	mov	r4, r0
 8003bc4:	6932      	ldr	r2, [r6, #16]
 8003bc6:	f106 010c 	add.w	r1, r6, #12
 8003bca:	3202      	adds	r2, #2
 8003bcc:	0092      	lsls	r2, r2, #2
 8003bce:	300c      	adds	r0, #12
 8003bd0:	f000 fb44 	bl	800425c <memcpy>
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	4621      	mov	r1, r4
 8003bd8:	4650      	mov	r0, sl
 8003bda:	f000 fd07 	bl	80045ec <__lshift>
 8003bde:	9005      	str	r0, [sp, #20]
 8003be0:	e000      	b.n	8003be4 <_dtoa_r+0x924>
 8003be2:	9605      	str	r6, [sp, #20]
 8003be4:	9b02      	ldr	r3, [sp, #8]
 8003be6:	9f06      	ldr	r7, [sp, #24]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	9307      	str	r3, [sp, #28]
 8003bee:	4629      	mov	r1, r5
 8003bf0:	9804      	ldr	r0, [sp, #16]
 8003bf2:	f7ff fad7 	bl	80031a4 <quorem>
 8003bf6:	4631      	mov	r1, r6
 8003bf8:	4604      	mov	r4, r0
 8003bfa:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003bfe:	9804      	ldr	r0, [sp, #16]
 8003c00:	f000 fd45 	bl	800468e <__mcmp>
 8003c04:	9a05      	ldr	r2, [sp, #20]
 8003c06:	9002      	str	r0, [sp, #8]
 8003c08:	4629      	mov	r1, r5
 8003c0a:	4650      	mov	r0, sl
 8003c0c:	f000 fd5b 	bl	80046c6 <__mdiff>
 8003c10:	68c3      	ldr	r3, [r0, #12]
 8003c12:	4602      	mov	r2, r0
 8003c14:	b93b      	cbnz	r3, 8003c26 <_dtoa_r+0x966>
 8003c16:	4601      	mov	r1, r0
 8003c18:	900a      	str	r0, [sp, #40]	; 0x28
 8003c1a:	9804      	ldr	r0, [sp, #16]
 8003c1c:	f000 fd37 	bl	800468e <__mcmp>
 8003c20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c22:	4603      	mov	r3, r0
 8003c24:	e000      	b.n	8003c28 <_dtoa_r+0x968>
 8003c26:	2301      	movs	r3, #1
 8003c28:	4611      	mov	r1, r2
 8003c2a:	4650      	mov	r0, sl
 8003c2c:	930a      	str	r3, [sp, #40]	; 0x28
 8003c2e:	f000 fb57 	bl	80042e0 <_Bfree>
 8003c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c34:	b953      	cbnz	r3, 8003c4c <_dtoa_r+0x98c>
 8003c36:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003c38:	b942      	cbnz	r2, 8003c4c <_dtoa_r+0x98c>
 8003c3a:	9a07      	ldr	r2, [sp, #28]
 8003c3c:	b932      	cbnz	r2, 8003c4c <_dtoa_r+0x98c>
 8003c3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003c42:	d02a      	beq.n	8003c9a <_dtoa_r+0x9da>
 8003c44:	9b02      	ldr	r3, [sp, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	dc1c      	bgt.n	8003c84 <_dtoa_r+0x9c4>
 8003c4a:	e01d      	b.n	8003c88 <_dtoa_r+0x9c8>
 8003c4c:	9a02      	ldr	r2, [sp, #8]
 8003c4e:	2a00      	cmp	r2, #0
 8003c50:	db04      	blt.n	8003c5c <_dtoa_r+0x99c>
 8003c52:	d11b      	bne.n	8003c8c <_dtoa_r+0x9cc>
 8003c54:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003c56:	b9ca      	cbnz	r2, 8003c8c <_dtoa_r+0x9cc>
 8003c58:	9a07      	ldr	r2, [sp, #28]
 8003c5a:	b9ba      	cbnz	r2, 8003c8c <_dtoa_r+0x9cc>
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	dd13      	ble.n	8003c88 <_dtoa_r+0x9c8>
 8003c60:	2201      	movs	r2, #1
 8003c62:	9904      	ldr	r1, [sp, #16]
 8003c64:	4650      	mov	r0, sl
 8003c66:	f000 fcc1 	bl	80045ec <__lshift>
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	9004      	str	r0, [sp, #16]
 8003c6e:	f000 fd0e 	bl	800468e <__mcmp>
 8003c72:	2800      	cmp	r0, #0
 8003c74:	dc03      	bgt.n	8003c7e <_dtoa_r+0x9be>
 8003c76:	d107      	bne.n	8003c88 <_dtoa_r+0x9c8>
 8003c78:	f018 0f01 	tst.w	r8, #1
 8003c7c:	d004      	beq.n	8003c88 <_dtoa_r+0x9c8>
 8003c7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003c82:	d00a      	beq.n	8003c9a <_dtoa_r+0x9da>
 8003c84:	f104 0831 	add.w	r8, r4, #49	; 0x31
 8003c88:	1c7c      	adds	r4, r7, #1
 8003c8a:	e00c      	b.n	8003ca6 <_dtoa_r+0x9e6>
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f107 0401 	add.w	r4, r7, #1
 8003c92:	dd0b      	ble.n	8003cac <_dtoa_r+0x9ec>
 8003c94:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003c98:	d103      	bne.n	8003ca2 <_dtoa_r+0x9e2>
 8003c9a:	2339      	movs	r3, #57	; 0x39
 8003c9c:	703b      	strb	r3, [r7, #0]
 8003c9e:	3701      	adds	r7, #1
 8003ca0:	e056      	b.n	8003d50 <_dtoa_r+0xa90>
 8003ca2:	f108 0801 	add.w	r8, r8, #1
 8003ca6:	f887 8000 	strb.w	r8, [r7]
 8003caa:	e06c      	b.n	8003d86 <_dtoa_r+0xac6>
 8003cac:	9b06      	ldr	r3, [sp, #24]
 8003cae:	4627      	mov	r7, r4
 8003cb0:	1ae3      	subs	r3, r4, r3
 8003cb2:	454b      	cmp	r3, r9
 8003cb4:	f804 8c01 	strb.w	r8, [r4, #-1]
 8003cb8:	d03b      	beq.n	8003d32 <_dtoa_r+0xa72>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	220a      	movs	r2, #10
 8003cbe:	9904      	ldr	r1, [sp, #16]
 8003cc0:	4650      	mov	r0, sl
 8003cc2:	f000 fb24 	bl	800430e <__multadd>
 8003cc6:	9b05      	ldr	r3, [sp, #20]
 8003cc8:	9004      	str	r0, [sp, #16]
 8003cca:	429e      	cmp	r6, r3
 8003ccc:	f04f 020a 	mov.w	r2, #10
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	4631      	mov	r1, r6
 8003cd6:	4650      	mov	r0, sl
 8003cd8:	d104      	bne.n	8003ce4 <_dtoa_r+0xa24>
 8003cda:	f000 fb18 	bl	800430e <__multadd>
 8003cde:	4606      	mov	r6, r0
 8003ce0:	9005      	str	r0, [sp, #20]
 8003ce2:	e784      	b.n	8003bee <_dtoa_r+0x92e>
 8003ce4:	f000 fb13 	bl	800430e <__multadd>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	4606      	mov	r6, r0
 8003cec:	220a      	movs	r2, #10
 8003cee:	9905      	ldr	r1, [sp, #20]
 8003cf0:	4650      	mov	r0, sl
 8003cf2:	f000 fb0c 	bl	800430e <__multadd>
 8003cf6:	9005      	str	r0, [sp, #20]
 8003cf8:	e779      	b.n	8003bee <_dtoa_r+0x92e>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	220a      	movs	r2, #10
 8003cfe:	9904      	ldr	r1, [sp, #16]
 8003d00:	4650      	mov	r0, sl
 8003d02:	f000 fb04 	bl	800430e <__multadd>
 8003d06:	9004      	str	r0, [sp, #16]
 8003d08:	4629      	mov	r1, r5
 8003d0a:	9804      	ldr	r0, [sp, #16]
 8003d0c:	f7ff fa4a 	bl	80031a4 <quorem>
 8003d10:	9b06      	ldr	r3, [sp, #24]
 8003d12:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003d16:	f804 8b01 	strb.w	r8, [r4], #1
 8003d1a:	1ae3      	subs	r3, r4, r3
 8003d1c:	454b      	cmp	r3, r9
 8003d1e:	dbec      	blt.n	8003cfa <_dtoa_r+0xa3a>
 8003d20:	9b06      	ldr	r3, [sp, #24]
 8003d22:	9605      	str	r6, [sp, #20]
 8003d24:	f1b9 0f01 	cmp.w	r9, #1
 8003d28:	bfac      	ite	ge
 8003d2a:	444b      	addge	r3, r9
 8003d2c:	3301      	addlt	r3, #1
 8003d2e:	461f      	mov	r7, r3
 8003d30:	2600      	movs	r6, #0
 8003d32:	2201      	movs	r2, #1
 8003d34:	9904      	ldr	r1, [sp, #16]
 8003d36:	4650      	mov	r0, sl
 8003d38:	f000 fc58 	bl	80045ec <__lshift>
 8003d3c:	4629      	mov	r1, r5
 8003d3e:	9004      	str	r0, [sp, #16]
 8003d40:	f000 fca5 	bl	800468e <__mcmp>
 8003d44:	2800      	cmp	r0, #0
 8003d46:	dc03      	bgt.n	8003d50 <_dtoa_r+0xa90>
 8003d48:	d115      	bne.n	8003d76 <_dtoa_r+0xab6>
 8003d4a:	f018 0f01 	tst.w	r8, #1
 8003d4e:	d012      	beq.n	8003d76 <_dtoa_r+0xab6>
 8003d50:	463c      	mov	r4, r7
 8003d52:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8003d56:	1e62      	subs	r2, r4, #1
 8003d58:	2b39      	cmp	r3, #57	; 0x39
 8003d5a:	d109      	bne.n	8003d70 <_dtoa_r+0xab0>
 8003d5c:	9b06      	ldr	r3, [sp, #24]
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d104      	bne.n	8003d6c <_dtoa_r+0xaac>
 8003d62:	f10b 0b01 	add.w	fp, fp, #1
 8003d66:	2331      	movs	r3, #49	; 0x31
 8003d68:	9a06      	ldr	r2, [sp, #24]
 8003d6a:	e002      	b.n	8003d72 <_dtoa_r+0xab2>
 8003d6c:	4614      	mov	r4, r2
 8003d6e:	e7f0      	b.n	8003d52 <_dtoa_r+0xa92>
 8003d70:	3301      	adds	r3, #1
 8003d72:	7013      	strb	r3, [r2, #0]
 8003d74:	e007      	b.n	8003d86 <_dtoa_r+0xac6>
 8003d76:	463c      	mov	r4, r7
 8003d78:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8003d7c:	1e62      	subs	r2, r4, #1
 8003d7e:	2b30      	cmp	r3, #48	; 0x30
 8003d80:	d101      	bne.n	8003d86 <_dtoa_r+0xac6>
 8003d82:	4614      	mov	r4, r2
 8003d84:	e7f8      	b.n	8003d78 <_dtoa_r+0xab8>
 8003d86:	4629      	mov	r1, r5
 8003d88:	4650      	mov	r0, sl
 8003d8a:	f000 faa9 	bl	80042e0 <_Bfree>
 8003d8e:	9b05      	ldr	r3, [sp, #20]
 8003d90:	b16b      	cbz	r3, 8003dae <_dtoa_r+0xaee>
 8003d92:	b12e      	cbz	r6, 8003da0 <_dtoa_r+0xae0>
 8003d94:	429e      	cmp	r6, r3
 8003d96:	d003      	beq.n	8003da0 <_dtoa_r+0xae0>
 8003d98:	4631      	mov	r1, r6
 8003d9a:	4650      	mov	r0, sl
 8003d9c:	f000 faa0 	bl	80042e0 <_Bfree>
 8003da0:	9905      	ldr	r1, [sp, #20]
 8003da2:	4650      	mov	r0, sl
 8003da4:	f000 fa9c 	bl	80042e0 <_Bfree>
 8003da8:	e001      	b.n	8003dae <_dtoa_r+0xaee>
 8003daa:	f8dd b020 	ldr.w	fp, [sp, #32]
 8003dae:	9904      	ldr	r1, [sp, #16]
 8003db0:	4650      	mov	r0, sl
 8003db2:	f000 fa95 	bl	80042e0 <_Bfree>
 8003db6:	2300      	movs	r3, #0
 8003db8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003dba:	7023      	strb	r3, [r4, #0]
 8003dbc:	f10b 0301 	add.w	r3, fp, #1
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003dc4:	b11b      	cbz	r3, 8003dce <_dtoa_r+0xb0e>
 8003dc6:	601c      	str	r4, [r3, #0]
 8003dc8:	e001      	b.n	8003dce <_dtoa_r+0xb0e>
 8003dca:	4808      	ldr	r0, [pc, #32]	; (8003dec <_dtoa_r+0xb2c>)
 8003dcc:	e00a      	b.n	8003de4 <_dtoa_r+0xb24>
 8003dce:	9806      	ldr	r0, [sp, #24]
 8003dd0:	e008      	b.n	8003de4 <_dtoa_r+0xb24>
 8003dd2:	f1b9 0f00 	cmp.w	r9, #0
 8003dd6:	f73f aee2 	bgt.w	8003b9e <_dtoa_r+0x8de>
 8003dda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	f77f aede 	ble.w	8003b9e <_dtoa_r+0x8de>
 8003de2:	e6b1      	b.n	8003b48 <_dtoa_r+0x888>
 8003de4:	b015      	add	sp, #84	; 0x54
 8003de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dea:	bf00      	nop
 8003dec:	08004fea 	.word	0x08004fea

08003df0 <_localeconv_r>:
 8003df0:	4800      	ldr	r0, [pc, #0]	; (8003df4 <_localeconv_r+0x4>)
 8003df2:	4770      	bx	lr
 8003df4:	20000114 	.word	0x20000114

08003df8 <malloc>:
 8003df8:	4b02      	ldr	r3, [pc, #8]	; (8003e04 <malloc+0xc>)
 8003dfa:	4601      	mov	r1, r0
 8003dfc:	6818      	ldr	r0, [r3, #0]
 8003dfe:	f000 b803 	b.w	8003e08 <_malloc_r>
 8003e02:	bf00      	nop
 8003e04:	20000110 	.word	0x20000110

08003e08 <_malloc_r>:
 8003e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e0c:	f101 040b 	add.w	r4, r1, #11
 8003e10:	2c16      	cmp	r4, #22
 8003e12:	b085      	sub	sp, #20
 8003e14:	4681      	mov	r9, r0
 8003e16:	d903      	bls.n	8003e20 <_malloc_r+0x18>
 8003e18:	f034 0407 	bics.w	r4, r4, #7
 8003e1c:	d501      	bpl.n	8003e22 <_malloc_r+0x1a>
 8003e1e:	e002      	b.n	8003e26 <_malloc_r+0x1e>
 8003e20:	2410      	movs	r4, #16
 8003e22:	428c      	cmp	r4, r1
 8003e24:	d203      	bcs.n	8003e2e <_malloc_r+0x26>
 8003e26:	230c      	movs	r3, #12
 8003e28:	f8c9 3000 	str.w	r3, [r9]
 8003e2c:	e1e7      	b.n	80041fe <_malloc_r+0x3f6>
 8003e2e:	4648      	mov	r0, r9
 8003e30:	f000 fa1f 	bl	8004272 <__malloc_lock>
 8003e34:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8003e38:	4d9d      	ldr	r5, [pc, #628]	; (80040b0 <_malloc_r+0x2a8>)
 8003e3a:	d217      	bcs.n	8003e6c <_malloc_r+0x64>
 8003e3c:	f104 0208 	add.w	r2, r4, #8
 8003e40:	442a      	add	r2, r5
 8003e42:	6856      	ldr	r6, [r2, #4]
 8003e44:	f1a2 0108 	sub.w	r1, r2, #8
 8003e48:	428e      	cmp	r6, r1
 8003e4a:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8003e4e:	d102      	bne.n	8003e56 <_malloc_r+0x4e>
 8003e50:	68d6      	ldr	r6, [r2, #12]
 8003e52:	42b2      	cmp	r2, r6
 8003e54:	d008      	beq.n	8003e68 <_malloc_r+0x60>
 8003e56:	6873      	ldr	r3, [r6, #4]
 8003e58:	68f2      	ldr	r2, [r6, #12]
 8003e5a:	68b1      	ldr	r1, [r6, #8]
 8003e5c:	f023 0303 	bic.w	r3, r3, #3
 8003e60:	60ca      	str	r2, [r1, #12]
 8003e62:	4433      	add	r3, r6
 8003e64:	6091      	str	r1, [r2, #8]
 8003e66:	e02f      	b.n	8003ec8 <_malloc_r+0xc0>
 8003e68:	3302      	adds	r3, #2
 8003e6a:	e03d      	b.n	8003ee8 <_malloc_r+0xe0>
 8003e6c:	0a63      	lsrs	r3, r4, #9
 8003e6e:	d01a      	beq.n	8003ea6 <_malloc_r+0x9e>
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d802      	bhi.n	8003e7a <_malloc_r+0x72>
 8003e74:	09a3      	lsrs	r3, r4, #6
 8003e76:	3338      	adds	r3, #56	; 0x38
 8003e78:	e018      	b.n	8003eac <_malloc_r+0xa4>
 8003e7a:	2b14      	cmp	r3, #20
 8003e7c:	d801      	bhi.n	8003e82 <_malloc_r+0x7a>
 8003e7e:	335b      	adds	r3, #91	; 0x5b
 8003e80:	e014      	b.n	8003eac <_malloc_r+0xa4>
 8003e82:	2b54      	cmp	r3, #84	; 0x54
 8003e84:	d802      	bhi.n	8003e8c <_malloc_r+0x84>
 8003e86:	0b23      	lsrs	r3, r4, #12
 8003e88:	336e      	adds	r3, #110	; 0x6e
 8003e8a:	e00f      	b.n	8003eac <_malloc_r+0xa4>
 8003e8c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003e90:	d802      	bhi.n	8003e98 <_malloc_r+0x90>
 8003e92:	0be3      	lsrs	r3, r4, #15
 8003e94:	3377      	adds	r3, #119	; 0x77
 8003e96:	e009      	b.n	8003eac <_malloc_r+0xa4>
 8003e98:	f240 5254 	movw	r2, #1364	; 0x554
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d804      	bhi.n	8003eaa <_malloc_r+0xa2>
 8003ea0:	0ca3      	lsrs	r3, r4, #18
 8003ea2:	337c      	adds	r3, #124	; 0x7c
 8003ea4:	e002      	b.n	8003eac <_malloc_r+0xa4>
 8003ea6:	233f      	movs	r3, #63	; 0x3f
 8003ea8:	e000      	b.n	8003eac <_malloc_r+0xa4>
 8003eaa:	237e      	movs	r3, #126	; 0x7e
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003eb2:	f1a2 0008 	sub.w	r0, r2, #8
 8003eb6:	6856      	ldr	r6, [r2, #4]
 8003eb8:	e00c      	b.n	8003ed4 <_malloc_r+0xcc>
 8003eba:	2900      	cmp	r1, #0
 8003ebc:	68f1      	ldr	r1, [r6, #12]
 8003ebe:	db08      	blt.n	8003ed2 <_malloc_r+0xca>
 8003ec0:	68b3      	ldr	r3, [r6, #8]
 8003ec2:	60d9      	str	r1, [r3, #12]
 8003ec4:	608b      	str	r3, [r1, #8]
 8003ec6:	18b3      	adds	r3, r6, r2
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	f042 0201 	orr.w	r2, r2, #1
 8003ece:	605a      	str	r2, [r3, #4]
 8003ed0:	e1a0      	b.n	8004214 <_malloc_r+0x40c>
 8003ed2:	460e      	mov	r6, r1
 8003ed4:	4286      	cmp	r6, r0
 8003ed6:	d006      	beq.n	8003ee6 <_malloc_r+0xde>
 8003ed8:	6872      	ldr	r2, [r6, #4]
 8003eda:	f022 0203 	bic.w	r2, r2, #3
 8003ede:	1b11      	subs	r1, r2, r4
 8003ee0:	290f      	cmp	r1, #15
 8003ee2:	ddea      	ble.n	8003eba <_malloc_r+0xb2>
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	4a71      	ldr	r2, [pc, #452]	; (80040b0 <_malloc_r+0x2a8>)
 8003eea:	692e      	ldr	r6, [r5, #16]
 8003eec:	f102 0708 	add.w	r7, r2, #8
 8003ef0:	42be      	cmp	r6, r7
 8003ef2:	4639      	mov	r1, r7
 8003ef4:	d079      	beq.n	8003fea <_malloc_r+0x1e2>
 8003ef6:	6870      	ldr	r0, [r6, #4]
 8003ef8:	f020 0003 	bic.w	r0, r0, #3
 8003efc:	ebc4 0e00 	rsb	lr, r4, r0
 8003f00:	f1be 0f0f 	cmp.w	lr, #15
 8003f04:	dd0d      	ble.n	8003f22 <_malloc_r+0x11a>
 8003f06:	1933      	adds	r3, r6, r4
 8003f08:	f044 0401 	orr.w	r4, r4, #1
 8003f0c:	6074      	str	r4, [r6, #4]
 8003f0e:	6153      	str	r3, [r2, #20]
 8003f10:	6113      	str	r3, [r2, #16]
 8003f12:	f04e 0201 	orr.w	r2, lr, #1
 8003f16:	60df      	str	r7, [r3, #12]
 8003f18:	609f      	str	r7, [r3, #8]
 8003f1a:	605a      	str	r2, [r3, #4]
 8003f1c:	f843 e00e 	str.w	lr, [r3, lr]
 8003f20:	e178      	b.n	8004214 <_malloc_r+0x40c>
 8003f22:	f1be 0f00 	cmp.w	lr, #0
 8003f26:	6157      	str	r7, [r2, #20]
 8003f28:	6117      	str	r7, [r2, #16]
 8003f2a:	db05      	blt.n	8003f38 <_malloc_r+0x130>
 8003f2c:	4430      	add	r0, r6
 8003f2e:	6843      	ldr	r3, [r0, #4]
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	6043      	str	r3, [r0, #4]
 8003f36:	e16d      	b.n	8004214 <_malloc_r+0x40c>
 8003f38:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003f3c:	d215      	bcs.n	8003f6a <_malloc_r+0x162>
 8003f3e:	08c0      	lsrs	r0, r0, #3
 8003f40:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 8003f44:	2701      	movs	r7, #1
 8003f46:	fa07 fe0e 	lsl.w	lr, r7, lr
 8003f4a:	6857      	ldr	r7, [r2, #4]
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	ea4e 0707 	orr.w	r7, lr, r7
 8003f52:	6057      	str	r7, [r2, #4]
 8003f54:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 8003f58:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8003f5c:	3f08      	subs	r7, #8
 8003f5e:	60f7      	str	r7, [r6, #12]
 8003f60:	f8c6 e008 	str.w	lr, [r6, #8]
 8003f64:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8003f68:	e03d      	b.n	8003fe6 <_malloc_r+0x1de>
 8003f6a:	0a42      	lsrs	r2, r0, #9
 8003f6c:	2a04      	cmp	r2, #4
 8003f6e:	d802      	bhi.n	8003f76 <_malloc_r+0x16e>
 8003f70:	0982      	lsrs	r2, r0, #6
 8003f72:	3238      	adds	r2, #56	; 0x38
 8003f74:	e015      	b.n	8003fa2 <_malloc_r+0x19a>
 8003f76:	2a14      	cmp	r2, #20
 8003f78:	d801      	bhi.n	8003f7e <_malloc_r+0x176>
 8003f7a:	325b      	adds	r2, #91	; 0x5b
 8003f7c:	e011      	b.n	8003fa2 <_malloc_r+0x19a>
 8003f7e:	2a54      	cmp	r2, #84	; 0x54
 8003f80:	d802      	bhi.n	8003f88 <_malloc_r+0x180>
 8003f82:	0b02      	lsrs	r2, r0, #12
 8003f84:	326e      	adds	r2, #110	; 0x6e
 8003f86:	e00c      	b.n	8003fa2 <_malloc_r+0x19a>
 8003f88:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8003f8c:	d802      	bhi.n	8003f94 <_malloc_r+0x18c>
 8003f8e:	0bc2      	lsrs	r2, r0, #15
 8003f90:	3277      	adds	r2, #119	; 0x77
 8003f92:	e006      	b.n	8003fa2 <_malloc_r+0x19a>
 8003f94:	f240 5754 	movw	r7, #1364	; 0x554
 8003f98:	42ba      	cmp	r2, r7
 8003f9a:	bf9a      	itte	ls
 8003f9c:	0c82      	lsrls	r2, r0, #18
 8003f9e:	327c      	addls	r2, #124	; 0x7c
 8003fa0:	227e      	movhi	r2, #126	; 0x7e
 8003fa2:	1c57      	adds	r7, r2, #1
 8003fa4:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8003fa8:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8003fac:	45be      	cmp	lr, r7
 8003fae:	f8df c100 	ldr.w	ip, [pc, #256]	; 80040b0 <_malloc_r+0x2a8>
 8003fb2:	d10d      	bne.n	8003fd0 <_malloc_r+0x1c8>
 8003fb4:	2001      	movs	r0, #1
 8003fb6:	1092      	asrs	r2, r2, #2
 8003fb8:	fa00 f202 	lsl.w	r2, r0, r2
 8003fbc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8003fc0:	4310      	orrs	r0, r2
 8003fc2:	f8cc 0004 	str.w	r0, [ip, #4]
 8003fc6:	4672      	mov	r2, lr
 8003fc8:	e009      	b.n	8003fde <_malloc_r+0x1d6>
 8003fca:	68bf      	ldr	r7, [r7, #8]
 8003fcc:	45be      	cmp	lr, r7
 8003fce:	d004      	beq.n	8003fda <_malloc_r+0x1d2>
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	f022 0203 	bic.w	r2, r2, #3
 8003fd6:	4290      	cmp	r0, r2
 8003fd8:	d3f7      	bcc.n	8003fca <_malloc_r+0x1c2>
 8003fda:	46be      	mov	lr, r7
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	60f2      	str	r2, [r6, #12]
 8003fe0:	f8c6 e008 	str.w	lr, [r6, #8]
 8003fe4:	6096      	str	r6, [r2, #8]
 8003fe6:	f8ce 600c 	str.w	r6, [lr, #12]
 8003fea:	2001      	movs	r0, #1
 8003fec:	109a      	asrs	r2, r3, #2
 8003fee:	fa00 f202 	lsl.w	r2, r0, r2
 8003ff2:	6868      	ldr	r0, [r5, #4]
 8003ff4:	4282      	cmp	r2, r0
 8003ff6:	d85d      	bhi.n	80040b4 <_malloc_r+0x2ac>
 8003ff8:	4202      	tst	r2, r0
 8003ffa:	d106      	bne.n	800400a <_malloc_r+0x202>
 8003ffc:	f023 0303 	bic.w	r3, r3, #3
 8004000:	0052      	lsls	r2, r2, #1
 8004002:	4202      	tst	r2, r0
 8004004:	f103 0304 	add.w	r3, r3, #4
 8004008:	d0fa      	beq.n	8004000 <_malloc_r+0x1f8>
 800400a:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 800400e:	46c2      	mov	sl, r8
 8004010:	469c      	mov	ip, r3
 8004012:	f8da 600c 	ldr.w	r6, [sl, #12]
 8004016:	4556      	cmp	r6, sl
 8004018:	d02c      	beq.n	8004074 <_malloc_r+0x26c>
 800401a:	6870      	ldr	r0, [r6, #4]
 800401c:	68f7      	ldr	r7, [r6, #12]
 800401e:	f020 0003 	bic.w	r0, r0, #3
 8004022:	ebc4 0e00 	rsb	lr, r4, r0
 8004026:	f1be 0f0f 	cmp.w	lr, #15
 800402a:	dd11      	ble.n	8004050 <_malloc_r+0x248>
 800402c:	1933      	adds	r3, r6, r4
 800402e:	f044 0401 	orr.w	r4, r4, #1
 8004032:	6074      	str	r4, [r6, #4]
 8004034:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8004038:	60d7      	str	r7, [r2, #12]
 800403a:	60ba      	str	r2, [r7, #8]
 800403c:	f04e 0201 	orr.w	r2, lr, #1
 8004040:	616b      	str	r3, [r5, #20]
 8004042:	612b      	str	r3, [r5, #16]
 8004044:	60d9      	str	r1, [r3, #12]
 8004046:	6099      	str	r1, [r3, #8]
 8004048:	605a      	str	r2, [r3, #4]
 800404a:	f843 e00e 	str.w	lr, [r3, lr]
 800404e:	e00b      	b.n	8004068 <_malloc_r+0x260>
 8004050:	f1be 0f00 	cmp.w	lr, #0
 8004054:	db0c      	blt.n	8004070 <_malloc_r+0x268>
 8004056:	1833      	adds	r3, r6, r0
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	f042 0201 	orr.w	r2, r2, #1
 800405e:	605a      	str	r2, [r3, #4]
 8004060:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8004064:	60df      	str	r7, [r3, #12]
 8004066:	60bb      	str	r3, [r7, #8]
 8004068:	4648      	mov	r0, r9
 800406a:	f000 f903 	bl	8004274 <__malloc_unlock>
 800406e:	e0d5      	b.n	800421c <_malloc_r+0x414>
 8004070:	463e      	mov	r6, r7
 8004072:	e7d0      	b.n	8004016 <_malloc_r+0x20e>
 8004074:	f10c 0c01 	add.w	ip, ip, #1
 8004078:	f01c 0f03 	tst.w	ip, #3
 800407c:	f10a 0a08 	add.w	sl, sl, #8
 8004080:	d1c7      	bne.n	8004012 <_malloc_r+0x20a>
 8004082:	0798      	lsls	r0, r3, #30
 8004084:	d104      	bne.n	8004090 <_malloc_r+0x288>
 8004086:	686b      	ldr	r3, [r5, #4]
 8004088:	ea23 0302 	bic.w	r3, r3, r2
 800408c:	606b      	str	r3, [r5, #4]
 800408e:	e004      	b.n	800409a <_malloc_r+0x292>
 8004090:	f858 0908 	ldr.w	r0, [r8], #-8
 8004094:	3b01      	subs	r3, #1
 8004096:	4580      	cmp	r8, r0
 8004098:	d0f3      	beq.n	8004082 <_malloc_r+0x27a>
 800409a:	6868      	ldr	r0, [r5, #4]
 800409c:	0052      	lsls	r2, r2, #1
 800409e:	4282      	cmp	r2, r0
 80040a0:	d808      	bhi.n	80040b4 <_malloc_r+0x2ac>
 80040a2:	b13a      	cbz	r2, 80040b4 <_malloc_r+0x2ac>
 80040a4:	4663      	mov	r3, ip
 80040a6:	4202      	tst	r2, r0
 80040a8:	d1af      	bne.n	800400a <_malloc_r+0x202>
 80040aa:	3304      	adds	r3, #4
 80040ac:	0052      	lsls	r2, r2, #1
 80040ae:	e7fa      	b.n	80040a6 <_malloc_r+0x29e>
 80040b0:	2000014c 	.word	0x2000014c
 80040b4:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80040b8:	f8db 6004 	ldr.w	r6, [fp, #4]
 80040bc:	f026 0603 	bic.w	r6, r6, #3
 80040c0:	42b4      	cmp	r4, r6
 80040c2:	d803      	bhi.n	80040cc <_malloc_r+0x2c4>
 80040c4:	1b33      	subs	r3, r6, r4
 80040c6:	2b0f      	cmp	r3, #15
 80040c8:	f300 809b 	bgt.w	8004202 <_malloc_r+0x3fa>
 80040cc:	4a55      	ldr	r2, [pc, #340]	; (8004224 <_malloc_r+0x41c>)
 80040ce:	4956      	ldr	r1, [pc, #344]	; (8004228 <_malloc_r+0x420>)
 80040d0:	6812      	ldr	r2, [r2, #0]
 80040d2:	6808      	ldr	r0, [r1, #0]
 80040d4:	f102 0810 	add.w	r8, r2, #16
 80040d8:	4a54      	ldr	r2, [pc, #336]	; (800422c <_malloc_r+0x424>)
 80040da:	3001      	adds	r0, #1
 80040dc:	9101      	str	r1, [sp, #4]
 80040de:	44a0      	add	r8, r4
 80040e0:	bf1f      	itttt	ne
 80040e2:	f102 31ff 	addne.w	r1, r2, #4294967295
 80040e6:	4488      	addne	r8, r1
 80040e8:	4251      	negne	r1, r2
 80040ea:	ea01 0808 	andne.w	r8, r1, r8
 80040ee:	eb0b 0306 	add.w	r3, fp, r6
 80040f2:	4641      	mov	r1, r8
 80040f4:	4648      	mov	r0, r9
 80040f6:	9203      	str	r2, [sp, #12]
 80040f8:	9302      	str	r3, [sp, #8]
 80040fa:	f000 fb91 	bl	8004820 <_sbrk_r>
 80040fe:	1c42      	adds	r2, r0, #1
 8004100:	4607      	mov	r7, r0
 8004102:	d06f      	beq.n	80041e4 <_malloc_r+0x3dc>
 8004104:	9b02      	ldr	r3, [sp, #8]
 8004106:	9a03      	ldr	r2, [sp, #12]
 8004108:	4283      	cmp	r3, r0
 800410a:	d901      	bls.n	8004110 <_malloc_r+0x308>
 800410c:	45ab      	cmp	fp, r5
 800410e:	d169      	bne.n	80041e4 <_malloc_r+0x3dc>
 8004110:	f8df a124 	ldr.w	sl, [pc, #292]	; 8004238 <_malloc_r+0x430>
 8004114:	42bb      	cmp	r3, r7
 8004116:	f8da 0000 	ldr.w	r0, [sl]
 800411a:	f8df c120 	ldr.w	ip, [pc, #288]	; 800423c <_malloc_r+0x434>
 800411e:	4440      	add	r0, r8
 8004120:	f8ca 0000 	str.w	r0, [sl]
 8004124:	d108      	bne.n	8004138 <_malloc_r+0x330>
 8004126:	ea13 0f0c 	tst.w	r3, ip
 800412a:	d105      	bne.n	8004138 <_malloc_r+0x330>
 800412c:	68ab      	ldr	r3, [r5, #8]
 800412e:	4446      	add	r6, r8
 8004130:	f046 0601 	orr.w	r6, r6, #1
 8004134:	605e      	str	r6, [r3, #4]
 8004136:	e049      	b.n	80041cc <_malloc_r+0x3c4>
 8004138:	9901      	ldr	r1, [sp, #4]
 800413a:	f8d1 e000 	ldr.w	lr, [r1]
 800413e:	f1be 3fff 	cmp.w	lr, #4294967295
 8004142:	bf15      	itete	ne
 8004144:	1afb      	subne	r3, r7, r3
 8004146:	4b38      	ldreq	r3, [pc, #224]	; (8004228 <_malloc_r+0x420>)
 8004148:	181b      	addne	r3, r3, r0
 800414a:	601f      	streq	r7, [r3, #0]
 800414c:	bf18      	it	ne
 800414e:	f8ca 3000 	strne.w	r3, [sl]
 8004152:	f017 0307 	ands.w	r3, r7, #7
 8004156:	bf1c      	itt	ne
 8004158:	f1c3 0308 	rsbne	r3, r3, #8
 800415c:	18ff      	addne	r7, r7, r3
 800415e:	44b8      	add	r8, r7
 8004160:	441a      	add	r2, r3
 8004162:	ea08 080c 	and.w	r8, r8, ip
 8004166:	ebc8 0802 	rsb	r8, r8, r2
 800416a:	4641      	mov	r1, r8
 800416c:	4648      	mov	r0, r9
 800416e:	f000 fb57 	bl	8004820 <_sbrk_r>
 8004172:	1c43      	adds	r3, r0, #1
 8004174:	bf04      	itt	eq
 8004176:	4638      	moveq	r0, r7
 8004178:	f04f 0800 	moveq.w	r8, #0
 800417c:	f8da 3000 	ldr.w	r3, [sl]
 8004180:	1bc2      	subs	r2, r0, r7
 8004182:	4442      	add	r2, r8
 8004184:	4443      	add	r3, r8
 8004186:	f042 0201 	orr.w	r2, r2, #1
 800418a:	45ab      	cmp	fp, r5
 800418c:	60af      	str	r7, [r5, #8]
 800418e:	f8ca 3000 	str.w	r3, [sl]
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	d01a      	beq.n	80041cc <_malloc_r+0x3c4>
 8004196:	2e0f      	cmp	r6, #15
 8004198:	d802      	bhi.n	80041a0 <_malloc_r+0x398>
 800419a:	2301      	movs	r3, #1
 800419c:	607b      	str	r3, [r7, #4]
 800419e:	e021      	b.n	80041e4 <_malloc_r+0x3dc>
 80041a0:	f8db 3004 	ldr.w	r3, [fp, #4]
 80041a4:	3e0c      	subs	r6, #12
 80041a6:	f026 0607 	bic.w	r6, r6, #7
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	4333      	orrs	r3, r6
 80041b0:	f8cb 3004 	str.w	r3, [fp, #4]
 80041b4:	2205      	movs	r2, #5
 80041b6:	eb0b 0306 	add.w	r3, fp, r6
 80041ba:	2e0f      	cmp	r6, #15
 80041bc:	605a      	str	r2, [r3, #4]
 80041be:	609a      	str	r2, [r3, #8]
 80041c0:	d904      	bls.n	80041cc <_malloc_r+0x3c4>
 80041c2:	f10b 0108 	add.w	r1, fp, #8
 80041c6:	4648      	mov	r0, r9
 80041c8:	f000 fc3c 	bl	8004a44 <_free_r>
 80041cc:	4a18      	ldr	r2, [pc, #96]	; (8004230 <_malloc_r+0x428>)
 80041ce:	f8da 3000 	ldr.w	r3, [sl]
 80041d2:	6811      	ldr	r1, [r2, #0]
 80041d4:	428b      	cmp	r3, r1
 80041d6:	bf88      	it	hi
 80041d8:	6013      	strhi	r3, [r2, #0]
 80041da:	4a16      	ldr	r2, [pc, #88]	; (8004234 <_malloc_r+0x42c>)
 80041dc:	6811      	ldr	r1, [r2, #0]
 80041de:	428b      	cmp	r3, r1
 80041e0:	bf88      	it	hi
 80041e2:	6013      	strhi	r3, [r2, #0]
 80041e4:	68ab      	ldr	r3, [r5, #8]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	f022 0203 	bic.w	r2, r2, #3
 80041ec:	4294      	cmp	r4, r2
 80041ee:	eba2 0304 	sub.w	r3, r2, r4
 80041f2:	d801      	bhi.n	80041f8 <_malloc_r+0x3f0>
 80041f4:	2b0f      	cmp	r3, #15
 80041f6:	dc04      	bgt.n	8004202 <_malloc_r+0x3fa>
 80041f8:	4648      	mov	r0, r9
 80041fa:	f000 f83b 	bl	8004274 <__malloc_unlock>
 80041fe:	2600      	movs	r6, #0
 8004200:	e00c      	b.n	800421c <_malloc_r+0x414>
 8004202:	68ae      	ldr	r6, [r5, #8]
 8004204:	f044 0201 	orr.w	r2, r4, #1
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	4434      	add	r4, r6
 800420e:	6072      	str	r2, [r6, #4]
 8004210:	60ac      	str	r4, [r5, #8]
 8004212:	6063      	str	r3, [r4, #4]
 8004214:	4648      	mov	r0, r9
 8004216:	f000 f82d 	bl	8004274 <__malloc_unlock>
 800421a:	3608      	adds	r6, #8
 800421c:	4630      	mov	r0, r6
 800421e:	b005      	add	sp, #20
 8004220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004224:	20000594 	.word	0x20000594
 8004228:	20000558 	.word	0x20000558
 800422c:	00000080 	.word	0x00000080
 8004230:	20000590 	.word	0x20000590
 8004234:	2000058c 	.word	0x2000058c
 8004238:	20000598 	.word	0x20000598
 800423c:	0000007f 	.word	0x0000007f

08004240 <memchr>:
 8004240:	b510      	push	{r4, lr}
 8004242:	b2c9      	uxtb	r1, r1
 8004244:	4402      	add	r2, r0
 8004246:	4290      	cmp	r0, r2
 8004248:	4603      	mov	r3, r0
 800424a:	d005      	beq.n	8004258 <memchr+0x18>
 800424c:	781c      	ldrb	r4, [r3, #0]
 800424e:	3001      	adds	r0, #1
 8004250:	428c      	cmp	r4, r1
 8004252:	d1f8      	bne.n	8004246 <memchr+0x6>
 8004254:	4618      	mov	r0, r3
 8004256:	bd10      	pop	{r4, pc}
 8004258:	2000      	movs	r0, #0
 800425a:	bd10      	pop	{r4, pc}

0800425c <memcpy>:
 800425c:	b510      	push	{r4, lr}
 800425e:	1e43      	subs	r3, r0, #1
 8004260:	440a      	add	r2, r1
 8004262:	4291      	cmp	r1, r2
 8004264:	d004      	beq.n	8004270 <memcpy+0x14>
 8004266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800426a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800426e:	e7f8      	b.n	8004262 <memcpy+0x6>
 8004270:	bd10      	pop	{r4, pc}

08004272 <__malloc_lock>:
 8004272:	4770      	bx	lr

08004274 <__malloc_unlock>:
 8004274:	4770      	bx	lr

08004276 <_Balloc>:
 8004276:	b570      	push	{r4, r5, r6, lr}
 8004278:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800427a:	4604      	mov	r4, r0
 800427c:	460e      	mov	r6, r1
 800427e:	b93d      	cbnz	r5, 8004290 <_Balloc+0x1a>
 8004280:	2010      	movs	r0, #16
 8004282:	f7ff fdb9 	bl	8003df8 <malloc>
 8004286:	6260      	str	r0, [r4, #36]	; 0x24
 8004288:	6045      	str	r5, [r0, #4]
 800428a:	6085      	str	r5, [r0, #8]
 800428c:	6005      	str	r5, [r0, #0]
 800428e:	60c5      	str	r5, [r0, #12]
 8004290:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004292:	68eb      	ldr	r3, [r5, #12]
 8004294:	b143      	cbz	r3, 80042a8 <_Balloc+0x32>
 8004296:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800429e:	b178      	cbz	r0, 80042c0 <_Balloc+0x4a>
 80042a0:	6802      	ldr	r2, [r0, #0]
 80042a2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80042a6:	e017      	b.n	80042d8 <_Balloc+0x62>
 80042a8:	2221      	movs	r2, #33	; 0x21
 80042aa:	2104      	movs	r1, #4
 80042ac:	4620      	mov	r0, r4
 80042ae:	f000 fb46 	bl	800493e <_calloc_r>
 80042b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042b4:	60e8      	str	r0, [r5, #12]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1ec      	bne.n	8004296 <_Balloc+0x20>
 80042bc:	2000      	movs	r0, #0
 80042be:	bd70      	pop	{r4, r5, r6, pc}
 80042c0:	2101      	movs	r1, #1
 80042c2:	fa01 f506 	lsl.w	r5, r1, r6
 80042c6:	1d6a      	adds	r2, r5, #5
 80042c8:	0092      	lsls	r2, r2, #2
 80042ca:	4620      	mov	r0, r4
 80042cc:	f000 fb37 	bl	800493e <_calloc_r>
 80042d0:	2800      	cmp	r0, #0
 80042d2:	d0f3      	beq.n	80042bc <_Balloc+0x46>
 80042d4:	6046      	str	r6, [r0, #4]
 80042d6:	6085      	str	r5, [r0, #8]
 80042d8:	2300      	movs	r3, #0
 80042da:	6103      	str	r3, [r0, #16]
 80042dc:	60c3      	str	r3, [r0, #12]
 80042de:	bd70      	pop	{r4, r5, r6, pc}

080042e0 <_Bfree>:
 80042e0:	b570      	push	{r4, r5, r6, lr}
 80042e2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80042e4:	4606      	mov	r6, r0
 80042e6:	460d      	mov	r5, r1
 80042e8:	b93c      	cbnz	r4, 80042fa <_Bfree+0x1a>
 80042ea:	2010      	movs	r0, #16
 80042ec:	f7ff fd84 	bl	8003df8 <malloc>
 80042f0:	6270      	str	r0, [r6, #36]	; 0x24
 80042f2:	6044      	str	r4, [r0, #4]
 80042f4:	6084      	str	r4, [r0, #8]
 80042f6:	6004      	str	r4, [r0, #0]
 80042f8:	60c4      	str	r4, [r0, #12]
 80042fa:	b13d      	cbz	r5, 800430c <_Bfree+0x2c>
 80042fc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80042fe:	686a      	ldr	r2, [r5, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004306:	6029      	str	r1, [r5, #0]
 8004308:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800430c:	bd70      	pop	{r4, r5, r6, pc}

0800430e <__multadd>:
 800430e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004312:	4606      	mov	r6, r0
 8004314:	460c      	mov	r4, r1
 8004316:	690d      	ldr	r5, [r1, #16]
 8004318:	461f      	mov	r7, r3
 800431a:	f101 0e14 	add.w	lr, r1, #20
 800431e:	2300      	movs	r3, #0
 8004320:	f8de 0000 	ldr.w	r0, [lr]
 8004324:	3301      	adds	r3, #1
 8004326:	b281      	uxth	r1, r0
 8004328:	fb02 7101 	mla	r1, r2, r1, r7
 800432c:	0c00      	lsrs	r0, r0, #16
 800432e:	0c0f      	lsrs	r7, r1, #16
 8004330:	fb02 7000 	mla	r0, r2, r0, r7
 8004334:	b289      	uxth	r1, r1
 8004336:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800433a:	429d      	cmp	r5, r3
 800433c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004340:	f84e 1b04 	str.w	r1, [lr], #4
 8004344:	dcec      	bgt.n	8004320 <__multadd+0x12>
 8004346:	b1d7      	cbz	r7, 800437e <__multadd+0x70>
 8004348:	68a3      	ldr	r3, [r4, #8]
 800434a:	429d      	cmp	r5, r3
 800434c:	db12      	blt.n	8004374 <__multadd+0x66>
 800434e:	6861      	ldr	r1, [r4, #4]
 8004350:	4630      	mov	r0, r6
 8004352:	3101      	adds	r1, #1
 8004354:	f7ff ff8f 	bl	8004276 <_Balloc>
 8004358:	4680      	mov	r8, r0
 800435a:	6922      	ldr	r2, [r4, #16]
 800435c:	f104 010c 	add.w	r1, r4, #12
 8004360:	3202      	adds	r2, #2
 8004362:	0092      	lsls	r2, r2, #2
 8004364:	300c      	adds	r0, #12
 8004366:	f7ff ff79 	bl	800425c <memcpy>
 800436a:	4621      	mov	r1, r4
 800436c:	4630      	mov	r0, r6
 800436e:	f7ff ffb7 	bl	80042e0 <_Bfree>
 8004372:	4644      	mov	r4, r8
 8004374:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004378:	3501      	adds	r5, #1
 800437a:	615f      	str	r7, [r3, #20]
 800437c:	6125      	str	r5, [r4, #16]
 800437e:	4620      	mov	r0, r4
 8004380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004384 <__hi0bits>:
 8004384:	0c03      	lsrs	r3, r0, #16
 8004386:	041b      	lsls	r3, r3, #16
 8004388:	b913      	cbnz	r3, 8004390 <__hi0bits+0xc>
 800438a:	0400      	lsls	r0, r0, #16
 800438c:	2310      	movs	r3, #16
 800438e:	e000      	b.n	8004392 <__hi0bits+0xe>
 8004390:	2300      	movs	r3, #0
 8004392:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004396:	bf04      	itt	eq
 8004398:	0200      	lsleq	r0, r0, #8
 800439a:	3308      	addeq	r3, #8
 800439c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80043a0:	bf04      	itt	eq
 80043a2:	0100      	lsleq	r0, r0, #4
 80043a4:	3304      	addeq	r3, #4
 80043a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80043aa:	bf04      	itt	eq
 80043ac:	0080      	lsleq	r0, r0, #2
 80043ae:	3302      	addeq	r3, #2
 80043b0:	2800      	cmp	r0, #0
 80043b2:	db03      	blt.n	80043bc <__hi0bits+0x38>
 80043b4:	0042      	lsls	r2, r0, #1
 80043b6:	d503      	bpl.n	80043c0 <__hi0bits+0x3c>
 80043b8:	1c58      	adds	r0, r3, #1
 80043ba:	4770      	bx	lr
 80043bc:	4618      	mov	r0, r3
 80043be:	4770      	bx	lr
 80043c0:	2020      	movs	r0, #32
 80043c2:	4770      	bx	lr

080043c4 <__lo0bits>:
 80043c4:	6803      	ldr	r3, [r0, #0]
 80043c6:	f013 0207 	ands.w	r2, r3, #7
 80043ca:	d00b      	beq.n	80043e4 <__lo0bits+0x20>
 80043cc:	07d9      	lsls	r1, r3, #31
 80043ce:	d422      	bmi.n	8004416 <__lo0bits+0x52>
 80043d0:	079a      	lsls	r2, r3, #30
 80043d2:	bf4b      	itete	mi
 80043d4:	085b      	lsrmi	r3, r3, #1
 80043d6:	089b      	lsrpl	r3, r3, #2
 80043d8:	6003      	strmi	r3, [r0, #0]
 80043da:	6003      	strpl	r3, [r0, #0]
 80043dc:	bf4c      	ite	mi
 80043de:	2001      	movmi	r0, #1
 80043e0:	2002      	movpl	r0, #2
 80043e2:	4770      	bx	lr
 80043e4:	b299      	uxth	r1, r3
 80043e6:	b909      	cbnz	r1, 80043ec <__lo0bits+0x28>
 80043e8:	0c1b      	lsrs	r3, r3, #16
 80043ea:	2210      	movs	r2, #16
 80043ec:	f013 0fff 	tst.w	r3, #255	; 0xff
 80043f0:	bf04      	itt	eq
 80043f2:	0a1b      	lsreq	r3, r3, #8
 80043f4:	3208      	addeq	r2, #8
 80043f6:	0719      	lsls	r1, r3, #28
 80043f8:	bf04      	itt	eq
 80043fa:	091b      	lsreq	r3, r3, #4
 80043fc:	3204      	addeq	r2, #4
 80043fe:	0799      	lsls	r1, r3, #30
 8004400:	bf04      	itt	eq
 8004402:	089b      	lsreq	r3, r3, #2
 8004404:	3202      	addeq	r2, #2
 8004406:	07d9      	lsls	r1, r3, #31
 8004408:	d402      	bmi.n	8004410 <__lo0bits+0x4c>
 800440a:	085b      	lsrs	r3, r3, #1
 800440c:	d005      	beq.n	800441a <__lo0bits+0x56>
 800440e:	3201      	adds	r2, #1
 8004410:	6003      	str	r3, [r0, #0]
 8004412:	4610      	mov	r0, r2
 8004414:	4770      	bx	lr
 8004416:	2000      	movs	r0, #0
 8004418:	4770      	bx	lr
 800441a:	2020      	movs	r0, #32
 800441c:	4770      	bx	lr

0800441e <__i2b>:
 800441e:	b510      	push	{r4, lr}
 8004420:	460c      	mov	r4, r1
 8004422:	2101      	movs	r1, #1
 8004424:	f7ff ff27 	bl	8004276 <_Balloc>
 8004428:	2201      	movs	r2, #1
 800442a:	6144      	str	r4, [r0, #20]
 800442c:	6102      	str	r2, [r0, #16]
 800442e:	bd10      	pop	{r4, pc}

08004430 <__multiply>:
 8004430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004434:	4614      	mov	r4, r2
 8004436:	690a      	ldr	r2, [r1, #16]
 8004438:	6923      	ldr	r3, [r4, #16]
 800443a:	4688      	mov	r8, r1
 800443c:	429a      	cmp	r2, r3
 800443e:	bfbe      	ittt	lt
 8004440:	460b      	movlt	r3, r1
 8004442:	46a0      	movlt	r8, r4
 8004444:	461c      	movlt	r4, r3
 8004446:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800444a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800444e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004452:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004456:	eb07 0609 	add.w	r6, r7, r9
 800445a:	429e      	cmp	r6, r3
 800445c:	bfc8      	it	gt
 800445e:	3101      	addgt	r1, #1
 8004460:	f7ff ff09 	bl	8004276 <_Balloc>
 8004464:	f100 0514 	add.w	r5, r0, #20
 8004468:	462b      	mov	r3, r5
 800446a:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 800446e:	2200      	movs	r2, #0
 8004470:	4563      	cmp	r3, ip
 8004472:	d202      	bcs.n	800447a <__multiply+0x4a>
 8004474:	f843 2b04 	str.w	r2, [r3], #4
 8004478:	e7fa      	b.n	8004470 <__multiply+0x40>
 800447a:	f104 0214 	add.w	r2, r4, #20
 800447e:	f108 0114 	add.w	r1, r8, #20
 8004482:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004486:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	9b00      	ldr	r3, [sp, #0]
 800448e:	9201      	str	r2, [sp, #4]
 8004490:	4293      	cmp	r3, r2
 8004492:	d957      	bls.n	8004544 <__multiply+0x114>
 8004494:	f8b2 b000 	ldrh.w	fp, [r2]
 8004498:	f1bb 0f00 	cmp.w	fp, #0
 800449c:	d023      	beq.n	80044e6 <__multiply+0xb6>
 800449e:	4689      	mov	r9, r1
 80044a0:	46ae      	mov	lr, r5
 80044a2:	f04f 0800 	mov.w	r8, #0
 80044a6:	f859 4b04 	ldr.w	r4, [r9], #4
 80044aa:	f8be a000 	ldrh.w	sl, [lr]
 80044ae:	b2a3      	uxth	r3, r4
 80044b0:	fb0b a303 	mla	r3, fp, r3, sl
 80044b4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80044b8:	f8de 4000 	ldr.w	r4, [lr]
 80044bc:	4443      	add	r3, r8
 80044be:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80044c2:	fb0b 840a 	mla	r4, fp, sl, r8
 80044c6:	46f2      	mov	sl, lr
 80044c8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80044d2:	454f      	cmp	r7, r9
 80044d4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80044d8:	f84a 3b04 	str.w	r3, [sl], #4
 80044dc:	d901      	bls.n	80044e2 <__multiply+0xb2>
 80044de:	46d6      	mov	lr, sl
 80044e0:	e7e1      	b.n	80044a6 <__multiply+0x76>
 80044e2:	f8ce 8004 	str.w	r8, [lr, #4]
 80044e6:	9b01      	ldr	r3, [sp, #4]
 80044e8:	3204      	adds	r2, #4
 80044ea:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80044ee:	f1ba 0f00 	cmp.w	sl, #0
 80044f2:	d021      	beq.n	8004538 <__multiply+0x108>
 80044f4:	462c      	mov	r4, r5
 80044f6:	4689      	mov	r9, r1
 80044f8:	682b      	ldr	r3, [r5, #0]
 80044fa:	f04f 0800 	mov.w	r8, #0
 80044fe:	f8b9 e000 	ldrh.w	lr, [r9]
 8004502:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8004506:	b29b      	uxth	r3, r3
 8004508:	fb0a be0e 	mla	lr, sl, lr, fp
 800450c:	46a3      	mov	fp, r4
 800450e:	44f0      	add	r8, lr
 8004510:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8004514:	f84b 3b04 	str.w	r3, [fp], #4
 8004518:	f859 3b04 	ldr.w	r3, [r9], #4
 800451c:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8004520:	0c1b      	lsrs	r3, r3, #16
 8004522:	fb0a e303 	mla	r3, sl, r3, lr
 8004526:	454f      	cmp	r7, r9
 8004528:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 800452c:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8004530:	d901      	bls.n	8004536 <__multiply+0x106>
 8004532:	465c      	mov	r4, fp
 8004534:	e7e3      	b.n	80044fe <__multiply+0xce>
 8004536:	6063      	str	r3, [r4, #4]
 8004538:	3504      	adds	r5, #4
 800453a:	e7a7      	b.n	800448c <__multiply+0x5c>
 800453c:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8004540:	b913      	cbnz	r3, 8004548 <__multiply+0x118>
 8004542:	3e01      	subs	r6, #1
 8004544:	2e00      	cmp	r6, #0
 8004546:	dcf9      	bgt.n	800453c <__multiply+0x10c>
 8004548:	6106      	str	r6, [r0, #16]
 800454a:	b003      	add	sp, #12
 800454c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004550 <__pow5mult>:
 8004550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004554:	4615      	mov	r5, r2
 8004556:	f012 0203 	ands.w	r2, r2, #3
 800455a:	4606      	mov	r6, r0
 800455c:	460f      	mov	r7, r1
 800455e:	d007      	beq.n	8004570 <__pow5mult+0x20>
 8004560:	4c21      	ldr	r4, [pc, #132]	; (80045e8 <__pow5mult+0x98>)
 8004562:	3a01      	subs	r2, #1
 8004564:	2300      	movs	r3, #0
 8004566:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800456a:	f7ff fed0 	bl	800430e <__multadd>
 800456e:	4607      	mov	r7, r0
 8004570:	10ad      	asrs	r5, r5, #2
 8004572:	d036      	beq.n	80045e2 <__pow5mult+0x92>
 8004574:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004576:	b93c      	cbnz	r4, 8004588 <__pow5mult+0x38>
 8004578:	2010      	movs	r0, #16
 800457a:	f7ff fc3d 	bl	8003df8 <malloc>
 800457e:	6270      	str	r0, [r6, #36]	; 0x24
 8004580:	6044      	str	r4, [r0, #4]
 8004582:	6084      	str	r4, [r0, #8]
 8004584:	6004      	str	r4, [r0, #0]
 8004586:	60c4      	str	r4, [r0, #12]
 8004588:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800458c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004590:	b94c      	cbnz	r4, 80045a6 <__pow5mult+0x56>
 8004592:	f240 2171 	movw	r1, #625	; 0x271
 8004596:	4630      	mov	r0, r6
 8004598:	f7ff ff41 	bl	800441e <__i2b>
 800459c:	4604      	mov	r4, r0
 800459e:	2300      	movs	r3, #0
 80045a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80045a4:	6003      	str	r3, [r0, #0]
 80045a6:	f04f 0800 	mov.w	r8, #0
 80045aa:	07eb      	lsls	r3, r5, #31
 80045ac:	d50a      	bpl.n	80045c4 <__pow5mult+0x74>
 80045ae:	4639      	mov	r1, r7
 80045b0:	4622      	mov	r2, r4
 80045b2:	4630      	mov	r0, r6
 80045b4:	f7ff ff3c 	bl	8004430 <__multiply>
 80045b8:	4681      	mov	r9, r0
 80045ba:	4639      	mov	r1, r7
 80045bc:	4630      	mov	r0, r6
 80045be:	f7ff fe8f 	bl	80042e0 <_Bfree>
 80045c2:	464f      	mov	r7, r9
 80045c4:	106d      	asrs	r5, r5, #1
 80045c6:	d00c      	beq.n	80045e2 <__pow5mult+0x92>
 80045c8:	6820      	ldr	r0, [r4, #0]
 80045ca:	b108      	cbz	r0, 80045d0 <__pow5mult+0x80>
 80045cc:	4604      	mov	r4, r0
 80045ce:	e7ec      	b.n	80045aa <__pow5mult+0x5a>
 80045d0:	4622      	mov	r2, r4
 80045d2:	4621      	mov	r1, r4
 80045d4:	4630      	mov	r0, r6
 80045d6:	f7ff ff2b 	bl	8004430 <__multiply>
 80045da:	6020      	str	r0, [r4, #0]
 80045dc:	f8c0 8000 	str.w	r8, [r0]
 80045e0:	e7f4      	b.n	80045cc <__pow5mult+0x7c>
 80045e2:	4638      	mov	r0, r7
 80045e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045e8:	08005108 	.word	0x08005108

080045ec <__lshift>:
 80045ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045f0:	460c      	mov	r4, r1
 80045f2:	4607      	mov	r7, r0
 80045f4:	4691      	mov	r9, r2
 80045f6:	6926      	ldr	r6, [r4, #16]
 80045f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80045fc:	4456      	add	r6, sl
 80045fe:	6849      	ldr	r1, [r1, #4]
 8004600:	68a3      	ldr	r3, [r4, #8]
 8004602:	1c75      	adds	r5, r6, #1
 8004604:	42ab      	cmp	r3, r5
 8004606:	da02      	bge.n	800460e <__lshift+0x22>
 8004608:	3101      	adds	r1, #1
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	e7fa      	b.n	8004604 <__lshift+0x18>
 800460e:	4638      	mov	r0, r7
 8004610:	f7ff fe31 	bl	8004276 <_Balloc>
 8004614:	2300      	movs	r3, #0
 8004616:	4680      	mov	r8, r0
 8004618:	461a      	mov	r2, r3
 800461a:	f100 0114 	add.w	r1, r0, #20
 800461e:	4553      	cmp	r3, sl
 8004620:	da03      	bge.n	800462a <__lshift+0x3e>
 8004622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004626:	3301      	adds	r3, #1
 8004628:	e7f9      	b.n	800461e <__lshift+0x32>
 800462a:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800462e:	6920      	ldr	r0, [r4, #16]
 8004630:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8004634:	f019 091f 	ands.w	r9, r9, #31
 8004638:	f104 0114 	add.w	r1, r4, #20
 800463c:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004640:	d014      	beq.n	800466c <__lshift+0x80>
 8004642:	f1c9 0c20 	rsb	ip, r9, #32
 8004646:	2200      	movs	r2, #0
 8004648:	6808      	ldr	r0, [r1, #0]
 800464a:	469a      	mov	sl, r3
 800464c:	fa00 f009 	lsl.w	r0, r0, r9
 8004650:	4302      	orrs	r2, r0
 8004652:	f843 2b04 	str.w	r2, [r3], #4
 8004656:	f851 2b04 	ldr.w	r2, [r1], #4
 800465a:	458e      	cmp	lr, r1
 800465c:	fa22 f20c 	lsr.w	r2, r2, ip
 8004660:	d8f2      	bhi.n	8004648 <__lshift+0x5c>
 8004662:	f8ca 2004 	str.w	r2, [sl, #4]
 8004666:	b142      	cbz	r2, 800467a <__lshift+0x8e>
 8004668:	1cb5      	adds	r5, r6, #2
 800466a:	e006      	b.n	800467a <__lshift+0x8e>
 800466c:	3b04      	subs	r3, #4
 800466e:	f851 2b04 	ldr.w	r2, [r1], #4
 8004672:	458e      	cmp	lr, r1
 8004674:	f843 2f04 	str.w	r2, [r3, #4]!
 8004678:	d8f9      	bhi.n	800466e <__lshift+0x82>
 800467a:	3d01      	subs	r5, #1
 800467c:	4638      	mov	r0, r7
 800467e:	f8c8 5010 	str.w	r5, [r8, #16]
 8004682:	4621      	mov	r1, r4
 8004684:	f7ff fe2c 	bl	80042e0 <_Bfree>
 8004688:	4640      	mov	r0, r8
 800468a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800468e <__mcmp>:
 800468e:	6903      	ldr	r3, [r0, #16]
 8004690:	690a      	ldr	r2, [r1, #16]
 8004692:	b510      	push	{r4, lr}
 8004694:	1a9b      	subs	r3, r3, r2
 8004696:	d111      	bne.n	80046bc <__mcmp+0x2e>
 8004698:	0092      	lsls	r2, r2, #2
 800469a:	3014      	adds	r0, #20
 800469c:	3114      	adds	r1, #20
 800469e:	1883      	adds	r3, r0, r2
 80046a0:	440a      	add	r2, r1
 80046a2:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80046a6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80046aa:	428c      	cmp	r4, r1
 80046ac:	d002      	beq.n	80046b4 <__mcmp+0x26>
 80046ae:	d307      	bcc.n	80046c0 <__mcmp+0x32>
 80046b0:	2001      	movs	r0, #1
 80046b2:	bd10      	pop	{r4, pc}
 80046b4:	4298      	cmp	r0, r3
 80046b6:	d3f4      	bcc.n	80046a2 <__mcmp+0x14>
 80046b8:	2000      	movs	r0, #0
 80046ba:	bd10      	pop	{r4, pc}
 80046bc:	4618      	mov	r0, r3
 80046be:	bd10      	pop	{r4, pc}
 80046c0:	f04f 30ff 	mov.w	r0, #4294967295
 80046c4:	bd10      	pop	{r4, pc}

080046c6 <__mdiff>:
 80046c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046ca:	460c      	mov	r4, r1
 80046cc:	4607      	mov	r7, r0
 80046ce:	4611      	mov	r1, r2
 80046d0:	4620      	mov	r0, r4
 80046d2:	4615      	mov	r5, r2
 80046d4:	f7ff ffdb 	bl	800468e <__mcmp>
 80046d8:	1e06      	subs	r6, r0, #0
 80046da:	d108      	bne.n	80046ee <__mdiff+0x28>
 80046dc:	4631      	mov	r1, r6
 80046de:	4638      	mov	r0, r7
 80046e0:	f7ff fdc9 	bl	8004276 <_Balloc>
 80046e4:	2301      	movs	r3, #1
 80046e6:	6103      	str	r3, [r0, #16]
 80046e8:	6146      	str	r6, [r0, #20]
 80046ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046ee:	bfbc      	itt	lt
 80046f0:	4623      	movlt	r3, r4
 80046f2:	462c      	movlt	r4, r5
 80046f4:	4638      	mov	r0, r7
 80046f6:	6861      	ldr	r1, [r4, #4]
 80046f8:	bfba      	itte	lt
 80046fa:	461d      	movlt	r5, r3
 80046fc:	2601      	movlt	r6, #1
 80046fe:	2600      	movge	r6, #0
 8004700:	f7ff fdb9 	bl	8004276 <_Balloc>
 8004704:	692b      	ldr	r3, [r5, #16]
 8004706:	60c6      	str	r6, [r0, #12]
 8004708:	6926      	ldr	r6, [r4, #16]
 800470a:	f105 0914 	add.w	r9, r5, #20
 800470e:	f104 0114 	add.w	r1, r4, #20
 8004712:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 8004716:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800471a:	f100 0514 	add.w	r5, r0, #20
 800471e:	f04f 0c00 	mov.w	ip, #0
 8004722:	f851 2b04 	ldr.w	r2, [r1], #4
 8004726:	f859 4b04 	ldr.w	r4, [r9], #4
 800472a:	b293      	uxth	r3, r2
 800472c:	449c      	add	ip, r3
 800472e:	b2a3      	uxth	r3, r4
 8004730:	0c24      	lsrs	r4, r4, #16
 8004732:	ebc3 030c 	rsb	r3, r3, ip
 8004736:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 800473a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800473e:	b29b      	uxth	r3, r3
 8004740:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004744:	45c8      	cmp	r8, r9
 8004746:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800474a:	468e      	mov	lr, r1
 800474c:	f845 2b04 	str.w	r2, [r5], #4
 8004750:	d8e7      	bhi.n	8004722 <__mdiff+0x5c>
 8004752:	45be      	cmp	lr, r7
 8004754:	d20e      	bcs.n	8004774 <__mdiff+0xae>
 8004756:	f85e 1b04 	ldr.w	r1, [lr], #4
 800475a:	b28a      	uxth	r2, r1
 800475c:	4462      	add	r2, ip
 800475e:	1413      	asrs	r3, r2, #16
 8004760:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8004764:	b292      	uxth	r2, r2
 8004766:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800476a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800476e:	f845 2b04 	str.w	r2, [r5], #4
 8004772:	e7ee      	b.n	8004752 <__mdiff+0x8c>
 8004774:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004778:	b90b      	cbnz	r3, 800477e <__mdiff+0xb8>
 800477a:	3e01      	subs	r6, #1
 800477c:	e7fa      	b.n	8004774 <__mdiff+0xae>
 800477e:	6106      	str	r6, [r0, #16]
 8004780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004784 <__d2b>:
 8004784:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004788:	461c      	mov	r4, r3
 800478a:	2101      	movs	r1, #1
 800478c:	4690      	mov	r8, r2
 800478e:	9e08      	ldr	r6, [sp, #32]
 8004790:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004792:	f7ff fd70 	bl	8004276 <_Balloc>
 8004796:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800479a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800479e:	4607      	mov	r7, r0
 80047a0:	b10c      	cbz	r4, 80047a6 <__d2b+0x22>
 80047a2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80047a6:	9201      	str	r2, [sp, #4]
 80047a8:	f1b8 0f00 	cmp.w	r8, #0
 80047ac:	d019      	beq.n	80047e2 <__d2b+0x5e>
 80047ae:	a802      	add	r0, sp, #8
 80047b0:	f840 8d08 	str.w	r8, [r0, #-8]!
 80047b4:	f7ff fe06 	bl	80043c4 <__lo0bits>
 80047b8:	9b00      	ldr	r3, [sp, #0]
 80047ba:	b148      	cbz	r0, 80047d0 <__d2b+0x4c>
 80047bc:	9a01      	ldr	r2, [sp, #4]
 80047be:	f1c0 0120 	rsb	r1, r0, #32
 80047c2:	fa02 f101 	lsl.w	r1, r2, r1
 80047c6:	430b      	orrs	r3, r1
 80047c8:	40c2      	lsrs	r2, r0
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	9201      	str	r2, [sp, #4]
 80047ce:	e000      	b.n	80047d2 <__d2b+0x4e>
 80047d0:	617b      	str	r3, [r7, #20]
 80047d2:	9b01      	ldr	r3, [sp, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	bf14      	ite	ne
 80047d8:	2102      	movne	r1, #2
 80047da:	2101      	moveq	r1, #1
 80047dc:	61bb      	str	r3, [r7, #24]
 80047de:	6139      	str	r1, [r7, #16]
 80047e0:	e007      	b.n	80047f2 <__d2b+0x6e>
 80047e2:	a801      	add	r0, sp, #4
 80047e4:	f7ff fdee 	bl	80043c4 <__lo0bits>
 80047e8:	9b01      	ldr	r3, [sp, #4]
 80047ea:	2101      	movs	r1, #1
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	6139      	str	r1, [r7, #16]
 80047f0:	3020      	adds	r0, #32
 80047f2:	b134      	cbz	r4, 8004802 <__d2b+0x7e>
 80047f4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80047f8:	4404      	add	r4, r0
 80047fa:	6034      	str	r4, [r6, #0]
 80047fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004800:	e009      	b.n	8004816 <__d2b+0x92>
 8004802:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004806:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800480a:	6030      	str	r0, [r6, #0]
 800480c:	6918      	ldr	r0, [r3, #16]
 800480e:	f7ff fdb9 	bl	8004384 <__hi0bits>
 8004812:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004816:	6028      	str	r0, [r5, #0]
 8004818:	4638      	mov	r0, r7
 800481a:	b002      	add	sp, #8
 800481c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004820 <_sbrk_r>:
 8004820:	b538      	push	{r3, r4, r5, lr}
 8004822:	4c06      	ldr	r4, [pc, #24]	; (800483c <_sbrk_r+0x1c>)
 8004824:	2300      	movs	r3, #0
 8004826:	4605      	mov	r5, r0
 8004828:	4608      	mov	r0, r1
 800482a:	6023      	str	r3, [r4, #0]
 800482c:	f000 fb98 	bl	8004f60 <_sbrk>
 8004830:	1c43      	adds	r3, r0, #1
 8004832:	d102      	bne.n	800483a <_sbrk_r+0x1a>
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	b103      	cbz	r3, 800483a <_sbrk_r+0x1a>
 8004838:	602b      	str	r3, [r5, #0]
 800483a:	bd38      	pop	{r3, r4, r5, pc}
 800483c:	200005d4 	.word	0x200005d4

08004840 <__ssprint_r>:
 8004840:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004844:	4693      	mov	fp, r2
 8004846:	6892      	ldr	r2, [r2, #8]
 8004848:	4681      	mov	r9, r0
 800484a:	460c      	mov	r4, r1
 800484c:	b34a      	cbz	r2, 80048a2 <__ssprint_r+0x62>
 800484e:	2300      	movs	r3, #0
 8004850:	f8db a000 	ldr.w	sl, [fp]
 8004854:	9301      	str	r3, [sp, #4]
 8004856:	461f      	mov	r7, r3
 8004858:	e006      	b.n	8004868 <__ssprint_r+0x28>
 800485a:	f8da 3000 	ldr.w	r3, [sl]
 800485e:	f8da 7004 	ldr.w	r7, [sl, #4]
 8004862:	9301      	str	r3, [sp, #4]
 8004864:	f10a 0a08 	add.w	sl, sl, #8
 8004868:	2f00      	cmp	r7, #0
 800486a:	d0f6      	beq.n	800485a <__ssprint_r+0x1a>
 800486c:	68a6      	ldr	r6, [r4, #8]
 800486e:	42b7      	cmp	r7, r6
 8004870:	d360      	bcc.n	8004934 <__ssprint_r+0xf4>
 8004872:	89a0      	ldrh	r0, [r4, #12]
 8004874:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8004878:	d117      	bne.n	80048aa <__ssprint_r+0x6a>
 800487a:	42b7      	cmp	r7, r6
 800487c:	d35a      	bcc.n	8004934 <__ssprint_r+0xf4>
 800487e:	4632      	mov	r2, r6
 8004880:	9901      	ldr	r1, [sp, #4]
 8004882:	6820      	ldr	r0, [r4, #0]
 8004884:	f000 f99c 	bl	8004bc0 <memmove>
 8004888:	68a2      	ldr	r2, [r4, #8]
 800488a:	1b92      	subs	r2, r2, r6
 800488c:	60a2      	str	r2, [r4, #8]
 800488e:	6822      	ldr	r2, [r4, #0]
 8004890:	4416      	add	r6, r2
 8004892:	f8db 2008 	ldr.w	r2, [fp, #8]
 8004896:	6026      	str	r6, [r4, #0]
 8004898:	1bd7      	subs	r7, r2, r7
 800489a:	f8cb 7008 	str.w	r7, [fp, #8]
 800489e:	2f00      	cmp	r7, #0
 80048a0:	d1db      	bne.n	800485a <__ssprint_r+0x1a>
 80048a2:	2000      	movs	r0, #0
 80048a4:	f8cb 0004 	str.w	r0, [fp, #4]
 80048a8:	e046      	b.n	8004938 <__ssprint_r+0xf8>
 80048aa:	6825      	ldr	r5, [r4, #0]
 80048ac:	6921      	ldr	r1, [r4, #16]
 80048ae:	2302      	movs	r3, #2
 80048b0:	ebc1 0805 	rsb	r8, r1, r5
 80048b4:	6965      	ldr	r5, [r4, #20]
 80048b6:	f108 0201 	add.w	r2, r8, #1
 80048ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048be:	fb95 f5f3 	sdiv	r5, r5, r3
 80048c2:	443a      	add	r2, r7
 80048c4:	4295      	cmp	r5, r2
 80048c6:	bf38      	it	cc
 80048c8:	4615      	movcc	r5, r2
 80048ca:	0543      	lsls	r3, r0, #21
 80048cc:	d510      	bpl.n	80048f0 <__ssprint_r+0xb0>
 80048ce:	4629      	mov	r1, r5
 80048d0:	4648      	mov	r0, r9
 80048d2:	f7ff fa99 	bl	8003e08 <_malloc_r>
 80048d6:	4606      	mov	r6, r0
 80048d8:	b1a0      	cbz	r0, 8004904 <__ssprint_r+0xc4>
 80048da:	4642      	mov	r2, r8
 80048dc:	6921      	ldr	r1, [r4, #16]
 80048de:	f7ff fcbd 	bl	800425c <memcpy>
 80048e2:	89a2      	ldrh	r2, [r4, #12]
 80048e4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80048e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048ec:	81a2      	strh	r2, [r4, #12]
 80048ee:	e018      	b.n	8004922 <__ssprint_r+0xe2>
 80048f0:	462a      	mov	r2, r5
 80048f2:	4648      	mov	r0, r9
 80048f4:	f000 f988 	bl	8004c08 <_realloc_r>
 80048f8:	4606      	mov	r6, r0
 80048fa:	b990      	cbnz	r0, 8004922 <__ssprint_r+0xe2>
 80048fc:	6921      	ldr	r1, [r4, #16]
 80048fe:	4648      	mov	r0, r9
 8004900:	f000 f8a0 	bl	8004a44 <_free_r>
 8004904:	220c      	movs	r2, #12
 8004906:	f8c9 2000 	str.w	r2, [r9]
 800490a:	89a2      	ldrh	r2, [r4, #12]
 800490c:	f04f 30ff 	mov.w	r0, #4294967295
 8004910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004914:	81a2      	strh	r2, [r4, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f8cb 2008 	str.w	r2, [fp, #8]
 800491c:	f8cb 2004 	str.w	r2, [fp, #4]
 8004920:	e00a      	b.n	8004938 <__ssprint_r+0xf8>
 8004922:	6126      	str	r6, [r4, #16]
 8004924:	6165      	str	r5, [r4, #20]
 8004926:	4446      	add	r6, r8
 8004928:	ebc8 0505 	rsb	r5, r8, r5
 800492c:	6026      	str	r6, [r4, #0]
 800492e:	60a5      	str	r5, [r4, #8]
 8004930:	463e      	mov	r6, r7
 8004932:	e7a2      	b.n	800487a <__ssprint_r+0x3a>
 8004934:	463e      	mov	r6, r7
 8004936:	e7a2      	b.n	800487e <__ssprint_r+0x3e>
 8004938:	b003      	add	sp, #12
 800493a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800493e <_calloc_r>:
 800493e:	b510      	push	{r4, lr}
 8004940:	4351      	muls	r1, r2
 8004942:	f7ff fa61 	bl	8003e08 <_malloc_r>
 8004946:	4604      	mov	r4, r0
 8004948:	b320      	cbz	r0, 8004994 <_calloc_r+0x56>
 800494a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800494e:	f022 0203 	bic.w	r2, r2, #3
 8004952:	3a04      	subs	r2, #4
 8004954:	2a24      	cmp	r2, #36	; 0x24
 8004956:	d81a      	bhi.n	800498e <_calloc_r+0x50>
 8004958:	2a13      	cmp	r2, #19
 800495a:	d912      	bls.n	8004982 <_calloc_r+0x44>
 800495c:	2100      	movs	r1, #0
 800495e:	2a1b      	cmp	r2, #27
 8004960:	6001      	str	r1, [r0, #0]
 8004962:	6041      	str	r1, [r0, #4]
 8004964:	d802      	bhi.n	800496c <_calloc_r+0x2e>
 8004966:	f100 0308 	add.w	r3, r0, #8
 800496a:	e00b      	b.n	8004984 <_calloc_r+0x46>
 800496c:	2a24      	cmp	r2, #36	; 0x24
 800496e:	6081      	str	r1, [r0, #8]
 8004970:	60c1      	str	r1, [r0, #12]
 8004972:	bf11      	iteee	ne
 8004974:	f100 0310 	addne.w	r3, r0, #16
 8004978:	6101      	streq	r1, [r0, #16]
 800497a:	f100 0318 	addeq.w	r3, r0, #24
 800497e:	6141      	streq	r1, [r0, #20]
 8004980:	e000      	b.n	8004984 <_calloc_r+0x46>
 8004982:	4603      	mov	r3, r0
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	605a      	str	r2, [r3, #4]
 800498a:	609a      	str	r2, [r3, #8]
 800498c:	e002      	b.n	8004994 <_calloc_r+0x56>
 800498e:	2100      	movs	r1, #0
 8004990:	f000 f931 	bl	8004bf6 <memset>
 8004994:	4620      	mov	r0, r4
 8004996:	bd10      	pop	{r4, pc}

08004998 <_malloc_trim_r>:
 8004998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800499c:	4689      	mov	r9, r1
 800499e:	4f25      	ldr	r7, [pc, #148]	; (8004a34 <_malloc_trim_r+0x9c>)
 80049a0:	4606      	mov	r6, r0
 80049a2:	f7ff fc66 	bl	8004272 <__malloc_lock>
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8004a40 <_malloc_trim_r+0xa8>
 80049ac:	685d      	ldr	r5, [r3, #4]
 80049ae:	f1a8 0411 	sub.w	r4, r8, #17
 80049b2:	f025 0503 	bic.w	r5, r5, #3
 80049b6:	442c      	add	r4, r5
 80049b8:	ebc9 0404 	rsb	r4, r9, r4
 80049bc:	fbb4 f4f8 	udiv	r4, r4, r8
 80049c0:	3c01      	subs	r4, #1
 80049c2:	fb08 f404 	mul.w	r4, r8, r4
 80049c6:	4544      	cmp	r4, r8
 80049c8:	da05      	bge.n	80049d6 <_malloc_trim_r+0x3e>
 80049ca:	4630      	mov	r0, r6
 80049cc:	f7ff fc52 	bl	8004274 <__malloc_unlock>
 80049d0:	2000      	movs	r0, #0
 80049d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049d6:	2100      	movs	r1, #0
 80049d8:	4630      	mov	r0, r6
 80049da:	f7ff ff21 	bl	8004820 <_sbrk_r>
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	442b      	add	r3, r5
 80049e2:	4298      	cmp	r0, r3
 80049e4:	d1f1      	bne.n	80049ca <_malloc_trim_r+0x32>
 80049e6:	4261      	negs	r1, r4
 80049e8:	4630      	mov	r0, r6
 80049ea:	f7ff ff19 	bl	8004820 <_sbrk_r>
 80049ee:	3001      	adds	r0, #1
 80049f0:	d110      	bne.n	8004a14 <_malloc_trim_r+0x7c>
 80049f2:	2100      	movs	r1, #0
 80049f4:	4630      	mov	r0, r6
 80049f6:	f7ff ff13 	bl	8004820 <_sbrk_r>
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	1a83      	subs	r3, r0, r2
 80049fe:	2b0f      	cmp	r3, #15
 8004a00:	dde3      	ble.n	80049ca <_malloc_trim_r+0x32>
 8004a02:	490d      	ldr	r1, [pc, #52]	; (8004a38 <_malloc_trim_r+0xa0>)
 8004a04:	f043 0301 	orr.w	r3, r3, #1
 8004a08:	6809      	ldr	r1, [r1, #0]
 8004a0a:	6053      	str	r3, [r2, #4]
 8004a0c:	1a40      	subs	r0, r0, r1
 8004a0e:	490b      	ldr	r1, [pc, #44]	; (8004a3c <_malloc_trim_r+0xa4>)
 8004a10:	6008      	str	r0, [r1, #0]
 8004a12:	e7da      	b.n	80049ca <_malloc_trim_r+0x32>
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4a09      	ldr	r2, [pc, #36]	; (8004a3c <_malloc_trim_r+0xa4>)
 8004a18:	1b2d      	subs	r5, r5, r4
 8004a1a:	f045 0501 	orr.w	r5, r5, #1
 8004a1e:	605d      	str	r5, [r3, #4]
 8004a20:	6813      	ldr	r3, [r2, #0]
 8004a22:	4630      	mov	r0, r6
 8004a24:	1b1c      	subs	r4, r3, r4
 8004a26:	6014      	str	r4, [r2, #0]
 8004a28:	f7ff fc24 	bl	8004274 <__malloc_unlock>
 8004a2c:	2001      	movs	r0, #1
 8004a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a32:	bf00      	nop
 8004a34:	2000014c 	.word	0x2000014c
 8004a38:	20000558 	.word	0x20000558
 8004a3c:	20000598 	.word	0x20000598
 8004a40:	00000080 	.word	0x00000080

08004a44 <_free_r>:
 8004a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a48:	4604      	mov	r4, r0
 8004a4a:	4688      	mov	r8, r1
 8004a4c:	2900      	cmp	r1, #0
 8004a4e:	f000 80ad 	beq.w	8004bac <_free_r+0x168>
 8004a52:	f7ff fc0e 	bl	8004272 <__malloc_lock>
 8004a56:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8004a5a:	4d55      	ldr	r5, [pc, #340]	; (8004bb0 <_free_r+0x16c>)
 8004a5c:	f022 0001 	bic.w	r0, r2, #1
 8004a60:	f1a8 0308 	sub.w	r3, r8, #8
 8004a64:	181f      	adds	r7, r3, r0
 8004a66:	68a9      	ldr	r1, [r5, #8]
 8004a68:	687e      	ldr	r6, [r7, #4]
 8004a6a:	428f      	cmp	r7, r1
 8004a6c:	f026 0603 	bic.w	r6, r6, #3
 8004a70:	f002 0201 	and.w	r2, r2, #1
 8004a74:	d11b      	bne.n	8004aae <_free_r+0x6a>
 8004a76:	4430      	add	r0, r6
 8004a78:	b93a      	cbnz	r2, 8004a8a <_free_r+0x46>
 8004a7a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8004a7e:	1a9b      	subs	r3, r3, r2
 8004a80:	6899      	ldr	r1, [r3, #8]
 8004a82:	4410      	add	r0, r2
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	60ca      	str	r2, [r1, #12]
 8004a88:	6091      	str	r1, [r2, #8]
 8004a8a:	f040 0201 	orr.w	r2, r0, #1
 8004a8e:	605a      	str	r2, [r3, #4]
 8004a90:	60ab      	str	r3, [r5, #8]
 8004a92:	4b48      	ldr	r3, [pc, #288]	; (8004bb4 <_free_r+0x170>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4298      	cmp	r0, r3
 8004a98:	d304      	bcc.n	8004aa4 <_free_r+0x60>
 8004a9a:	4b47      	ldr	r3, [pc, #284]	; (8004bb8 <_free_r+0x174>)
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	6819      	ldr	r1, [r3, #0]
 8004aa0:	f7ff ff7a 	bl	8004998 <_malloc_trim_r>
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aaa:	f7ff bbe3 	b.w	8004274 <__malloc_unlock>
 8004aae:	607e      	str	r6, [r7, #4]
 8004ab0:	b97a      	cbnz	r2, 8004ad2 <_free_r+0x8e>
 8004ab2:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8004ab6:	f105 0e08 	add.w	lr, r5, #8
 8004aba:	1a5b      	subs	r3, r3, r1
 8004abc:	4408      	add	r0, r1
 8004abe:	6899      	ldr	r1, [r3, #8]
 8004ac0:	4571      	cmp	r1, lr
 8004ac2:	d008      	beq.n	8004ad6 <_free_r+0x92>
 8004ac4:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8004ac8:	f8c1 e00c 	str.w	lr, [r1, #12]
 8004acc:	f8ce 1008 	str.w	r1, [lr, #8]
 8004ad0:	e002      	b.n	8004ad8 <_free_r+0x94>
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	e000      	b.n	8004ad8 <_free_r+0x94>
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	19b9      	adds	r1, r7, r6
 8004ada:	6849      	ldr	r1, [r1, #4]
 8004adc:	07c9      	lsls	r1, r1, #31
 8004ade:	d40e      	bmi.n	8004afe <_free_r+0xba>
 8004ae0:	4430      	add	r0, r6
 8004ae2:	68b9      	ldr	r1, [r7, #8]
 8004ae4:	b942      	cbnz	r2, 8004af8 <_free_r+0xb4>
 8004ae6:	4e35      	ldr	r6, [pc, #212]	; (8004bbc <_free_r+0x178>)
 8004ae8:	42b1      	cmp	r1, r6
 8004aea:	d105      	bne.n	8004af8 <_free_r+0xb4>
 8004aec:	616b      	str	r3, [r5, #20]
 8004aee:	612b      	str	r3, [r5, #16]
 8004af0:	2201      	movs	r2, #1
 8004af2:	60d9      	str	r1, [r3, #12]
 8004af4:	6099      	str	r1, [r3, #8]
 8004af6:	e002      	b.n	8004afe <_free_r+0xba>
 8004af8:	68fe      	ldr	r6, [r7, #12]
 8004afa:	60ce      	str	r6, [r1, #12]
 8004afc:	60b1      	str	r1, [r6, #8]
 8004afe:	f040 0101 	orr.w	r1, r0, #1
 8004b02:	6059      	str	r1, [r3, #4]
 8004b04:	5018      	str	r0, [r3, r0]
 8004b06:	2a00      	cmp	r2, #0
 8004b08:	d1cc      	bne.n	8004aa4 <_free_r+0x60>
 8004b0a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004b0e:	d212      	bcs.n	8004b36 <_free_r+0xf2>
 8004b10:	08c0      	lsrs	r0, r0, #3
 8004b12:	1081      	asrs	r1, r0, #2
 8004b14:	2201      	movs	r2, #1
 8004b16:	fa02 f101 	lsl.w	r1, r2, r1
 8004b1a:	686a      	ldr	r2, [r5, #4]
 8004b1c:	3001      	adds	r0, #1
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	606a      	str	r2, [r5, #4]
 8004b22:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8004b26:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8004b2a:	3a08      	subs	r2, #8
 8004b2c:	60da      	str	r2, [r3, #12]
 8004b2e:	6099      	str	r1, [r3, #8]
 8004b30:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8004b34:	e038      	b.n	8004ba8 <_free_r+0x164>
 8004b36:	0a42      	lsrs	r2, r0, #9
 8004b38:	2a04      	cmp	r2, #4
 8004b3a:	d802      	bhi.n	8004b42 <_free_r+0xfe>
 8004b3c:	0982      	lsrs	r2, r0, #6
 8004b3e:	3238      	adds	r2, #56	; 0x38
 8004b40:	e015      	b.n	8004b6e <_free_r+0x12a>
 8004b42:	2a14      	cmp	r2, #20
 8004b44:	d801      	bhi.n	8004b4a <_free_r+0x106>
 8004b46:	325b      	adds	r2, #91	; 0x5b
 8004b48:	e011      	b.n	8004b6e <_free_r+0x12a>
 8004b4a:	2a54      	cmp	r2, #84	; 0x54
 8004b4c:	d802      	bhi.n	8004b54 <_free_r+0x110>
 8004b4e:	0b02      	lsrs	r2, r0, #12
 8004b50:	326e      	adds	r2, #110	; 0x6e
 8004b52:	e00c      	b.n	8004b6e <_free_r+0x12a>
 8004b54:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004b58:	d802      	bhi.n	8004b60 <_free_r+0x11c>
 8004b5a:	0bc2      	lsrs	r2, r0, #15
 8004b5c:	3277      	adds	r2, #119	; 0x77
 8004b5e:	e006      	b.n	8004b6e <_free_r+0x12a>
 8004b60:	f240 5154 	movw	r1, #1364	; 0x554
 8004b64:	428a      	cmp	r2, r1
 8004b66:	bf9a      	itte	ls
 8004b68:	0c82      	lsrls	r2, r0, #18
 8004b6a:	327c      	addls	r2, #124	; 0x7c
 8004b6c:	227e      	movhi	r2, #126	; 0x7e
 8004b6e:	1c51      	adds	r1, r2, #1
 8004b70:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8004b74:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8004b78:	428e      	cmp	r6, r1
 8004b7a:	4f0d      	ldr	r7, [pc, #52]	; (8004bb0 <_free_r+0x16c>)
 8004b7c:	d10b      	bne.n	8004b96 <_free_r+0x152>
 8004b7e:	2101      	movs	r1, #1
 8004b80:	1092      	asrs	r2, r2, #2
 8004b82:	fa01 f202 	lsl.w	r2, r1, r2
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	4311      	orrs	r1, r2
 8004b8a:	6079      	str	r1, [r7, #4]
 8004b8c:	4631      	mov	r1, r6
 8004b8e:	e008      	b.n	8004ba2 <_free_r+0x15e>
 8004b90:	6889      	ldr	r1, [r1, #8]
 8004b92:	428e      	cmp	r6, r1
 8004b94:	d004      	beq.n	8004ba0 <_free_r+0x15c>
 8004b96:	684a      	ldr	r2, [r1, #4]
 8004b98:	f022 0203 	bic.w	r2, r2, #3
 8004b9c:	4290      	cmp	r0, r2
 8004b9e:	d3f7      	bcc.n	8004b90 <_free_r+0x14c>
 8004ba0:	68ce      	ldr	r6, [r1, #12]
 8004ba2:	60de      	str	r6, [r3, #12]
 8004ba4:	6099      	str	r1, [r3, #8]
 8004ba6:	60b3      	str	r3, [r6, #8]
 8004ba8:	60cb      	str	r3, [r1, #12]
 8004baa:	e77b      	b.n	8004aa4 <_free_r+0x60>
 8004bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bb0:	2000014c 	.word	0x2000014c
 8004bb4:	20000554 	.word	0x20000554
 8004bb8:	20000594 	.word	0x20000594
 8004bbc:	20000154 	.word	0x20000154

08004bc0 <memmove>:
 8004bc0:	4288      	cmp	r0, r1
 8004bc2:	b510      	push	{r4, lr}
 8004bc4:	eb01 0302 	add.w	r3, r1, r2
 8004bc8:	d801      	bhi.n	8004bce <memmove+0xe>
 8004bca:	1e42      	subs	r2, r0, #1
 8004bcc:	e00b      	b.n	8004be6 <memmove+0x26>
 8004bce:	4298      	cmp	r0, r3
 8004bd0:	d2fb      	bcs.n	8004bca <memmove+0xa>
 8004bd2:	1881      	adds	r1, r0, r2
 8004bd4:	1ad2      	subs	r2, r2, r3
 8004bd6:	42d3      	cmn	r3, r2
 8004bd8:	d004      	beq.n	8004be4 <memmove+0x24>
 8004bda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bde:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004be2:	e7f8      	b.n	8004bd6 <memmove+0x16>
 8004be4:	bd10      	pop	{r4, pc}
 8004be6:	4299      	cmp	r1, r3
 8004be8:	d004      	beq.n	8004bf4 <memmove+0x34>
 8004bea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bee:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004bf2:	e7f8      	b.n	8004be6 <memmove+0x26>
 8004bf4:	bd10      	pop	{r4, pc}

08004bf6 <memset>:
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	4402      	add	r2, r0
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d002      	beq.n	8004c04 <memset+0xe>
 8004bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8004c02:	e7fa      	b.n	8004bfa <memset+0x4>
 8004c04:	4770      	bx	lr
	...

08004c08 <_realloc_r>:
 8004c08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c0c:	4681      	mov	r9, r0
 8004c0e:	460c      	mov	r4, r1
 8004c10:	b929      	cbnz	r1, 8004c1e <_realloc_r+0x16>
 8004c12:	4611      	mov	r1, r2
 8004c14:	b003      	add	sp, #12
 8004c16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c1a:	f7ff b8f5 	b.w	8003e08 <_malloc_r>
 8004c1e:	9201      	str	r2, [sp, #4]
 8004c20:	f7ff fb27 	bl	8004272 <__malloc_lock>
 8004c24:	9a01      	ldr	r2, [sp, #4]
 8004c26:	f854 ec04 	ldr.w	lr, [r4, #-4]
 8004c2a:	f102 080b 	add.w	r8, r2, #11
 8004c2e:	f1b8 0f16 	cmp.w	r8, #22
 8004c32:	f1a4 0b08 	sub.w	fp, r4, #8
 8004c36:	f02e 0503 	bic.w	r5, lr, #3
 8004c3a:	d903      	bls.n	8004c44 <_realloc_r+0x3c>
 8004c3c:	f038 0807 	bics.w	r8, r8, #7
 8004c40:	d502      	bpl.n	8004c48 <_realloc_r+0x40>
 8004c42:	e003      	b.n	8004c4c <_realloc_r+0x44>
 8004c44:	f04f 0810 	mov.w	r8, #16
 8004c48:	4590      	cmp	r8, r2
 8004c4a:	d204      	bcs.n	8004c56 <_realloc_r+0x4e>
 8004c4c:	230c      	movs	r3, #12
 8004c4e:	f8c9 3000 	str.w	r3, [r9]
 8004c52:	2000      	movs	r0, #0
 8004c54:	e181      	b.n	8004f5a <_realloc_r+0x352>
 8004c56:	45a8      	cmp	r8, r5
 8004c58:	f340 8154 	ble.w	8004f04 <_realloc_r+0x2fc>
 8004c5c:	4ba8      	ldr	r3, [pc, #672]	; (8004f00 <_realloc_r+0x2f8>)
 8004c5e:	eb0b 0105 	add.w	r1, fp, r5
 8004c62:	6898      	ldr	r0, [r3, #8]
 8004c64:	684f      	ldr	r7, [r1, #4]
 8004c66:	4281      	cmp	r1, r0
 8004c68:	d005      	beq.n	8004c76 <_realloc_r+0x6e>
 8004c6a:	f027 0601 	bic.w	r6, r7, #1
 8004c6e:	440e      	add	r6, r1
 8004c70:	6876      	ldr	r6, [r6, #4]
 8004c72:	07f6      	lsls	r6, r6, #31
 8004c74:	d426      	bmi.n	8004cc4 <_realloc_r+0xbc>
 8004c76:	f027 0a03 	bic.w	sl, r7, #3
 8004c7a:	4281      	cmp	r1, r0
 8004c7c:	eb05 070a 	add.w	r7, r5, sl
 8004c80:	d118      	bne.n	8004cb4 <_realloc_r+0xac>
 8004c82:	f108 0610 	add.w	r6, r8, #16
 8004c86:	42b7      	cmp	r7, r6
 8004c88:	db1f      	blt.n	8004cca <_realloc_r+0xc2>
 8004c8a:	ebc8 0707 	rsb	r7, r8, r7
 8004c8e:	eb0b 0008 	add.w	r0, fp, r8
 8004c92:	f047 0701 	orr.w	r7, r7, #1
 8004c96:	6098      	str	r0, [r3, #8]
 8004c98:	6047      	str	r7, [r0, #4]
 8004c9a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004c9e:	4648      	mov	r0, r9
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	ea43 0308 	orr.w	r3, r3, r8
 8004ca8:	f844 3c04 	str.w	r3, [r4, #-4]
 8004cac:	f7ff fae2 	bl	8004274 <__malloc_unlock>
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	e152      	b.n	8004f5a <_realloc_r+0x352>
 8004cb4:	45b8      	cmp	r8, r7
 8004cb6:	dc08      	bgt.n	8004cca <_realloc_r+0xc2>
 8004cb8:	68cb      	ldr	r3, [r1, #12]
 8004cba:	688a      	ldr	r2, [r1, #8]
 8004cbc:	463d      	mov	r5, r7
 8004cbe:	60d3      	str	r3, [r2, #12]
 8004cc0:	609a      	str	r2, [r3, #8]
 8004cc2:	e11f      	b.n	8004f04 <_realloc_r+0x2fc>
 8004cc4:	f04f 0a00 	mov.w	sl, #0
 8004cc8:	4651      	mov	r1, sl
 8004cca:	f01e 0f01 	tst.w	lr, #1
 8004cce:	f040 80c6 	bne.w	8004e5e <_realloc_r+0x256>
 8004cd2:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8004cd6:	ebc7 070b 	rsb	r7, r7, fp
 8004cda:	687e      	ldr	r6, [r7, #4]
 8004cdc:	f026 0603 	bic.w	r6, r6, #3
 8004ce0:	442e      	add	r6, r5
 8004ce2:	2900      	cmp	r1, #0
 8004ce4:	f000 8085 	beq.w	8004df2 <_realloc_r+0x1ea>
 8004ce8:	4281      	cmp	r1, r0
 8004cea:	44b2      	add	sl, r6
 8004cec:	d148      	bne.n	8004d80 <_realloc_r+0x178>
 8004cee:	f108 0110 	add.w	r1, r8, #16
 8004cf2:	458a      	cmp	sl, r1
 8004cf4:	db7d      	blt.n	8004df2 <_realloc_r+0x1ea>
 8004cf6:	463e      	mov	r6, r7
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	f856 1f08 	ldr.w	r1, [r6, #8]!
 8004cfe:	60ca      	str	r2, [r1, #12]
 8004d00:	6091      	str	r1, [r2, #8]
 8004d02:	1f2a      	subs	r2, r5, #4
 8004d04:	2a24      	cmp	r2, #36	; 0x24
 8004d06:	d826      	bhi.n	8004d56 <_realloc_r+0x14e>
 8004d08:	2a13      	cmp	r2, #19
 8004d0a:	d91c      	bls.n	8004d46 <_realloc_r+0x13e>
 8004d0c:	6821      	ldr	r1, [r4, #0]
 8004d0e:	2a1b      	cmp	r2, #27
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	6861      	ldr	r1, [r4, #4]
 8004d14:	60f9      	str	r1, [r7, #12]
 8004d16:	d803      	bhi.n	8004d20 <_realloc_r+0x118>
 8004d18:	f107 0210 	add.w	r2, r7, #16
 8004d1c:	3408      	adds	r4, #8
 8004d1e:	e013      	b.n	8004d48 <_realloc_r+0x140>
 8004d20:	68a1      	ldr	r1, [r4, #8]
 8004d22:	2a24      	cmp	r2, #36	; 0x24
 8004d24:	6139      	str	r1, [r7, #16]
 8004d26:	68e1      	ldr	r1, [r4, #12]
 8004d28:	bf18      	it	ne
 8004d2a:	f107 0218 	addne.w	r2, r7, #24
 8004d2e:	6179      	str	r1, [r7, #20]
 8004d30:	bf09      	itett	eq
 8004d32:	6922      	ldreq	r2, [r4, #16]
 8004d34:	3410      	addne	r4, #16
 8004d36:	61ba      	streq	r2, [r7, #24]
 8004d38:	6961      	ldreq	r1, [r4, #20]
 8004d3a:	bf02      	ittt	eq
 8004d3c:	f107 0220 	addeq.w	r2, r7, #32
 8004d40:	61f9      	streq	r1, [r7, #28]
 8004d42:	3418      	addeq	r4, #24
 8004d44:	e000      	b.n	8004d48 <_realloc_r+0x140>
 8004d46:	4632      	mov	r2, r6
 8004d48:	6821      	ldr	r1, [r4, #0]
 8004d4a:	6011      	str	r1, [r2, #0]
 8004d4c:	6861      	ldr	r1, [r4, #4]
 8004d4e:	6051      	str	r1, [r2, #4]
 8004d50:	68a1      	ldr	r1, [r4, #8]
 8004d52:	6091      	str	r1, [r2, #8]
 8004d54:	e005      	b.n	8004d62 <_realloc_r+0x15a>
 8004d56:	4621      	mov	r1, r4
 8004d58:	4630      	mov	r0, r6
 8004d5a:	9301      	str	r3, [sp, #4]
 8004d5c:	f7ff ff30 	bl	8004bc0 <memmove>
 8004d60:	9b01      	ldr	r3, [sp, #4]
 8004d62:	eb07 0208 	add.w	r2, r7, r8
 8004d66:	ebc8 0a0a 	rsb	sl, r8, sl
 8004d6a:	609a      	str	r2, [r3, #8]
 8004d6c:	f04a 0301 	orr.w	r3, sl, #1
 8004d70:	6053      	str	r3, [r2, #4]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	ea43 0308 	orr.w	r3, r3, r8
 8004d7c:	607b      	str	r3, [r7, #4]
 8004d7e:	e0b9      	b.n	8004ef4 <_realloc_r+0x2ec>
 8004d80:	45d0      	cmp	r8, sl
 8004d82:	dc36      	bgt.n	8004df2 <_realloc_r+0x1ea>
 8004d84:	4638      	mov	r0, r7
 8004d86:	68cb      	ldr	r3, [r1, #12]
 8004d88:	688a      	ldr	r2, [r1, #8]
 8004d8a:	60d3      	str	r3, [r2, #12]
 8004d8c:	609a      	str	r2, [r3, #8]
 8004d8e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	60d3      	str	r3, [r2, #12]
 8004d96:	609a      	str	r2, [r3, #8]
 8004d98:	1f2a      	subs	r2, r5, #4
 8004d9a:	2a24      	cmp	r2, #36	; 0x24
 8004d9c:	d824      	bhi.n	8004de8 <_realloc_r+0x1e0>
 8004d9e:	2a13      	cmp	r2, #19
 8004da0:	d91b      	bls.n	8004dda <_realloc_r+0x1d2>
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	2a1b      	cmp	r2, #27
 8004da6:	60bb      	str	r3, [r7, #8]
 8004da8:	6863      	ldr	r3, [r4, #4]
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	d803      	bhi.n	8004db6 <_realloc_r+0x1ae>
 8004dae:	f107 0010 	add.w	r0, r7, #16
 8004db2:	3408      	adds	r4, #8
 8004db4:	e011      	b.n	8004dda <_realloc_r+0x1d2>
 8004db6:	68a3      	ldr	r3, [r4, #8]
 8004db8:	2a24      	cmp	r2, #36	; 0x24
 8004dba:	613b      	str	r3, [r7, #16]
 8004dbc:	68e3      	ldr	r3, [r4, #12]
 8004dbe:	bf18      	it	ne
 8004dc0:	f107 0018 	addne.w	r0, r7, #24
 8004dc4:	617b      	str	r3, [r7, #20]
 8004dc6:	bf09      	itett	eq
 8004dc8:	6923      	ldreq	r3, [r4, #16]
 8004dca:	3410      	addne	r4, #16
 8004dcc:	61bb      	streq	r3, [r7, #24]
 8004dce:	6963      	ldreq	r3, [r4, #20]
 8004dd0:	bf02      	ittt	eq
 8004dd2:	f107 0020 	addeq.w	r0, r7, #32
 8004dd6:	61fb      	streq	r3, [r7, #28]
 8004dd8:	3418      	addeq	r4, #24
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	6003      	str	r3, [r0, #0]
 8004dde:	6863      	ldr	r3, [r4, #4]
 8004de0:	6043      	str	r3, [r0, #4]
 8004de2:	68a3      	ldr	r3, [r4, #8]
 8004de4:	6083      	str	r3, [r0, #8]
 8004de6:	e002      	b.n	8004dee <_realloc_r+0x1e6>
 8004de8:	4621      	mov	r1, r4
 8004dea:	f7ff fee9 	bl	8004bc0 <memmove>
 8004dee:	4655      	mov	r5, sl
 8004df0:	e02f      	b.n	8004e52 <_realloc_r+0x24a>
 8004df2:	45b0      	cmp	r8, r6
 8004df4:	dc33      	bgt.n	8004e5e <_realloc_r+0x256>
 8004df6:	4638      	mov	r0, r7
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8004dfe:	60d3      	str	r3, [r2, #12]
 8004e00:	609a      	str	r2, [r3, #8]
 8004e02:	1f2a      	subs	r2, r5, #4
 8004e04:	2a24      	cmp	r2, #36	; 0x24
 8004e06:	d826      	bhi.n	8004e56 <_realloc_r+0x24e>
 8004e08:	2a13      	cmp	r2, #19
 8004e0a:	d91b      	bls.n	8004e44 <_realloc_r+0x23c>
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	2a1b      	cmp	r2, #27
 8004e10:	60bb      	str	r3, [r7, #8]
 8004e12:	6863      	ldr	r3, [r4, #4]
 8004e14:	60fb      	str	r3, [r7, #12]
 8004e16:	d803      	bhi.n	8004e20 <_realloc_r+0x218>
 8004e18:	f107 0010 	add.w	r0, r7, #16
 8004e1c:	3408      	adds	r4, #8
 8004e1e:	e011      	b.n	8004e44 <_realloc_r+0x23c>
 8004e20:	68a3      	ldr	r3, [r4, #8]
 8004e22:	2a24      	cmp	r2, #36	; 0x24
 8004e24:	613b      	str	r3, [r7, #16]
 8004e26:	68e3      	ldr	r3, [r4, #12]
 8004e28:	bf18      	it	ne
 8004e2a:	f107 0018 	addne.w	r0, r7, #24
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	bf09      	itett	eq
 8004e32:	6923      	ldreq	r3, [r4, #16]
 8004e34:	3410      	addne	r4, #16
 8004e36:	61bb      	streq	r3, [r7, #24]
 8004e38:	6963      	ldreq	r3, [r4, #20]
 8004e3a:	bf02      	ittt	eq
 8004e3c:	f107 0020 	addeq.w	r0, r7, #32
 8004e40:	61fb      	streq	r3, [r7, #28]
 8004e42:	3418      	addeq	r4, #24
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	6003      	str	r3, [r0, #0]
 8004e48:	6863      	ldr	r3, [r4, #4]
 8004e4a:	6043      	str	r3, [r0, #4]
 8004e4c:	68a3      	ldr	r3, [r4, #8]
 8004e4e:	6083      	str	r3, [r0, #8]
 8004e50:	4635      	mov	r5, r6
 8004e52:	46bb      	mov	fp, r7
 8004e54:	e056      	b.n	8004f04 <_realloc_r+0x2fc>
 8004e56:	4621      	mov	r1, r4
 8004e58:	f7ff feb2 	bl	8004bc0 <memmove>
 8004e5c:	e7f8      	b.n	8004e50 <_realloc_r+0x248>
 8004e5e:	4611      	mov	r1, r2
 8004e60:	4648      	mov	r0, r9
 8004e62:	f7fe ffd1 	bl	8003e08 <_malloc_r>
 8004e66:	4606      	mov	r6, r0
 8004e68:	2800      	cmp	r0, #0
 8004e6a:	d043      	beq.n	8004ef4 <_realloc_r+0x2ec>
 8004e6c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004e70:	f1a0 0208 	sub.w	r2, r0, #8
 8004e74:	f023 0301 	bic.w	r3, r3, #1
 8004e78:	445b      	add	r3, fp
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d105      	bne.n	8004e8a <_realloc_r+0x282>
 8004e7e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004e82:	f023 0303 	bic.w	r3, r3, #3
 8004e86:	441d      	add	r5, r3
 8004e88:	e03c      	b.n	8004f04 <_realloc_r+0x2fc>
 8004e8a:	1f2a      	subs	r2, r5, #4
 8004e8c:	2a24      	cmp	r2, #36	; 0x24
 8004e8e:	d82a      	bhi.n	8004ee6 <_realloc_r+0x2de>
 8004e90:	2a13      	cmp	r2, #19
 8004e92:	d91f      	bls.n	8004ed4 <_realloc_r+0x2cc>
 8004e94:	6823      	ldr	r3, [r4, #0]
 8004e96:	2a1b      	cmp	r2, #27
 8004e98:	6003      	str	r3, [r0, #0]
 8004e9a:	6863      	ldr	r3, [r4, #4]
 8004e9c:	6043      	str	r3, [r0, #4]
 8004e9e:	d804      	bhi.n	8004eaa <_realloc_r+0x2a2>
 8004ea0:	f100 0308 	add.w	r3, r0, #8
 8004ea4:	f104 0208 	add.w	r2, r4, #8
 8004ea8:	e016      	b.n	8004ed8 <_realloc_r+0x2d0>
 8004eaa:	68a3      	ldr	r3, [r4, #8]
 8004eac:	2a24      	cmp	r2, #36	; 0x24
 8004eae:	6083      	str	r3, [r0, #8]
 8004eb0:	68e3      	ldr	r3, [r4, #12]
 8004eb2:	bf18      	it	ne
 8004eb4:	f104 0210 	addne.w	r2, r4, #16
 8004eb8:	60c3      	str	r3, [r0, #12]
 8004eba:	bf09      	itett	eq
 8004ebc:	6923      	ldreq	r3, [r4, #16]
 8004ebe:	f100 0310 	addne.w	r3, r0, #16
 8004ec2:	6103      	streq	r3, [r0, #16]
 8004ec4:	6961      	ldreq	r1, [r4, #20]
 8004ec6:	bf02      	ittt	eq
 8004ec8:	f100 0318 	addeq.w	r3, r0, #24
 8004ecc:	f104 0218 	addeq.w	r2, r4, #24
 8004ed0:	6141      	streq	r1, [r0, #20]
 8004ed2:	e001      	b.n	8004ed8 <_realloc_r+0x2d0>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	4622      	mov	r2, r4
 8004ed8:	6811      	ldr	r1, [r2, #0]
 8004eda:	6019      	str	r1, [r3, #0]
 8004edc:	6851      	ldr	r1, [r2, #4]
 8004ede:	6059      	str	r1, [r3, #4]
 8004ee0:	6892      	ldr	r2, [r2, #8]
 8004ee2:	609a      	str	r2, [r3, #8]
 8004ee4:	e002      	b.n	8004eec <_realloc_r+0x2e4>
 8004ee6:	4621      	mov	r1, r4
 8004ee8:	f7ff fe6a 	bl	8004bc0 <memmove>
 8004eec:	4621      	mov	r1, r4
 8004eee:	4648      	mov	r0, r9
 8004ef0:	f7ff fda8 	bl	8004a44 <_free_r>
 8004ef4:	4648      	mov	r0, r9
 8004ef6:	f7ff f9bd 	bl	8004274 <__malloc_unlock>
 8004efa:	4630      	mov	r0, r6
 8004efc:	e02d      	b.n	8004f5a <_realloc_r+0x352>
 8004efe:	bf00      	nop
 8004f00:	2000014c 	.word	0x2000014c
 8004f04:	ebc8 0205 	rsb	r2, r8, r5
 8004f08:	2a0f      	cmp	r2, #15
 8004f0a:	f8db 3004 	ldr.w	r3, [fp, #4]
 8004f0e:	d914      	bls.n	8004f3a <_realloc_r+0x332>
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	ea43 0308 	orr.w	r3, r3, r8
 8004f18:	f8cb 3004 	str.w	r3, [fp, #4]
 8004f1c:	eb0b 0108 	add.w	r1, fp, r8
 8004f20:	f042 0301 	orr.w	r3, r2, #1
 8004f24:	604b      	str	r3, [r1, #4]
 8004f26:	440a      	add	r2, r1
 8004f28:	6853      	ldr	r3, [r2, #4]
 8004f2a:	3108      	adds	r1, #8
 8004f2c:	f043 0301 	orr.w	r3, r3, #1
 8004f30:	6053      	str	r3, [r2, #4]
 8004f32:	4648      	mov	r0, r9
 8004f34:	f7ff fd86 	bl	8004a44 <_free_r>
 8004f38:	e00a      	b.n	8004f50 <_realloc_r+0x348>
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	432b      	orrs	r3, r5
 8004f40:	f8cb 3004 	str.w	r3, [fp, #4]
 8004f44:	eb0b 0205 	add.w	r2, fp, r5
 8004f48:	6853      	ldr	r3, [r2, #4]
 8004f4a:	f043 0301 	orr.w	r3, r3, #1
 8004f4e:	6053      	str	r3, [r2, #4]
 8004f50:	4648      	mov	r0, r9
 8004f52:	f7ff f98f 	bl	8004274 <__malloc_unlock>
 8004f56:	f10b 0008 	add.w	r0, fp, #8
 8004f5a:	b003      	add	sp, #12
 8004f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004f60 <_sbrk>:
 8004f60:	4b04      	ldr	r3, [pc, #16]	; (8004f74 <_sbrk+0x14>)
 8004f62:	4602      	mov	r2, r0
 8004f64:	6819      	ldr	r1, [r3, #0]
 8004f66:	b909      	cbnz	r1, 8004f6c <_sbrk+0xc>
 8004f68:	4903      	ldr	r1, [pc, #12]	; (8004f78 <_sbrk+0x18>)
 8004f6a:	6019      	str	r1, [r3, #0]
 8004f6c:	6818      	ldr	r0, [r3, #0]
 8004f6e:	4402      	add	r2, r0
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	4770      	bx	lr
 8004f74:	200005c0 	.word	0x200005c0
 8004f78:	200005d8 	.word	0x200005d8

08004f7c <_init>:
 8004f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7e:	bf00      	nop
 8004f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f82:	bc08      	pop	{r3}
 8004f84:	469e      	mov	lr, r3
 8004f86:	4770      	bx	lr

08004f88 <_fini>:
 8004f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8a:	bf00      	nop
 8004f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f8e:	bc08      	pop	{r3}
 8004f90:	469e      	mov	lr, r3
 8004f92:	4770      	bx	lr
